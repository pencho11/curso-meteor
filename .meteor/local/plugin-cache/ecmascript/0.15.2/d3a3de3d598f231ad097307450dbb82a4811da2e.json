{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\RUBEN\\Desktop\\meteor-vue\\packages\\spacebars-compiler\\whitespace.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.windows.x86_64"},"sourceFileName":"packages/spacebars-compiler/whitespace.js","filename":"C:\\Users\\RUBEN\\Desktop\\meteor-vue\\packages\\spacebars-compiler\\whitespace.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"C:\\Users\\RUBEN\\Desktop\\meteor-vue","root":"C:\\Users\\RUBEN\\Desktop\\meteor-vue","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.14.0","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"C:\\Users\\RUBEN\\Desktop\\meteor-vue\\packages\\spacebars-compiler\\whitespace.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/spacebars-compiler/whitespace.js"}},"code":"module.export({\n  removeWhitespace: () => removeWhitespace\n});\nlet HTML;\nmodule.link(\"meteor/htmljs\", {\n  HTML(v) {\n    HTML = v;\n  }\n\n}, 0);\nlet TreeTransformer, toRaw;\nmodule.link(\"./optimizer\", {\n  TreeTransformer(v) {\n    TreeTransformer = v;\n  },\n\n  toRaw(v) {\n    toRaw = v;\n  }\n\n}, 1);\n\nfunction compactRaw(array) {\n  var result = [];\n\n  for (var i = 0; i < array.length; i++) {\n    var item = array[i];\n\n    if (item instanceof HTML.Raw) {\n      if (!item.value) {\n        continue;\n      }\n\n      if (result.length && result[result.length - 1] instanceof HTML.Raw) {\n        result[result.length - 1] = HTML.Raw(result[result.length - 1].value + item.value);\n        continue;\n      }\n    }\n\n    result.push(item);\n  }\n\n  return result;\n}\n\nfunction replaceIfContainsNewline(match) {\n  if (match.indexOf('\\n') >= 0) {\n    return '';\n  }\n\n  return match;\n}\n\nfunction stripWhitespace(array) {\n  var result = [];\n\n  for (var i = 0; i < array.length; i++) {\n    var item = array[i];\n\n    if (item instanceof HTML.Raw) {\n      // remove nodes that contain only whitespace & a newline\n      if (item.value.indexOf('\\n') !== -1 && !/\\S/.test(item.value)) {\n        continue;\n      } // Trim any preceding whitespace, if it contains a newline\n\n\n      var newStr = item.value;\n      newStr = newStr.replace(/^\\s+/, replaceIfContainsNewline);\n      newStr = newStr.replace(/\\s+$/, replaceIfContainsNewline);\n      item.value = newStr;\n    }\n\n    result.push(item);\n  }\n\n  return result;\n}\n\nvar WhitespaceRemovingVisitor = TreeTransformer.extend();\nWhitespaceRemovingVisitor.def({\n  visitNull: toRaw,\n  visitPrimitive: toRaw,\n  visitCharRef: toRaw,\n  visitArray: function (array) {\n    // this.super(array)\n    var result = TreeTransformer.prototype.visitArray.call(this, array);\n    result = compactRaw(result);\n    result = stripWhitespace(result);\n    return result;\n  },\n  visitTag: function (tag) {\n    var tagName = tag.tagName; // TODO - List tags that we don't want to strip whitespace for.\n\n    if (tagName === 'textarea' || tagName === 'script' || tagName === 'pre' || !HTML.isKnownElement(tagName) || HTML.isKnownSVGElement(tagName)) {\n      return tag;\n    }\n\n    return TreeTransformer.prototype.visitTag.call(this, tag);\n  },\n  visitAttributes: function (attrs) {\n    return attrs;\n  }\n});\n\nfunction removeWhitespace(tree) {\n  tree = new WhitespaceRemovingVisitor().visit(tree);\n  return tree;\n}","map":{"version":3,"sources":["packages/spacebars-compiler/whitespace.js"],"names":["module","export","removeWhitespace","HTML","link","v","TreeTransformer","toRaw","compactRaw","array","result","i","length","item","Raw","value","push","replaceIfContainsNewline","match","indexOf","stripWhitespace","test","newStr","replace","WhitespaceRemovingVisitor","extend","def","visitNull","visitPrimitive","visitCharRef","visitArray","prototype","call","visitTag","tag","tagName","isKnownElement","isKnownSVGElement","visitAttributes","attrs","tree","visit"],"mappings":"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","sourcesContent":["import { HTML } from 'meteor/htmljs';\nimport { TreeTransformer, toRaw } from './optimizer';\n\nfunction compactRaw(array){\n  var result = [];\n  for (var i = 0; i < array.length; i++) {\n    var item = array[i];\n    if (item instanceof HTML.Raw) {\n      if (!item.value) {\n        continue;\n      }\n      if (result.length &&\n          (result[result.length - 1] instanceof HTML.Raw)){\n        result[result.length - 1] = HTML.Raw(\n          result[result.length - 1].value + item.value);\n        continue\n      }\n    }\n    result.push(item);\n  }\n  return result;\n}\n\nfunction replaceIfContainsNewline(match) {\n  if (match.indexOf('\\n') >= 0) {\n    return ''\n  }\n  return match;\n}\n\nfunction stripWhitespace(array){\n  var result = [];\n  for (var i = 0; i < array.length; i++) {\n    var item = array[i];\n    if (item instanceof HTML.Raw) {\n      // remove nodes that contain only whitespace & a newline\n      if (item.value.indexOf('\\n') !== -1 && !/\\S/.test(item.value)) {\n        continue;\n      }\n      // Trim any preceding whitespace, if it contains a newline\n      var newStr = item.value;\n      newStr = newStr.replace(/^\\s+/, replaceIfContainsNewline);\n      newStr = newStr.replace(/\\s+$/, replaceIfContainsNewline);\n      item.value = newStr;\n    }\n    result.push(item)\n  }\n  return result;\n}\n\nvar WhitespaceRemovingVisitor = TreeTransformer.extend();\nWhitespaceRemovingVisitor.def({\n  visitNull: toRaw,\n  visitPrimitive: toRaw,\n  visitCharRef: toRaw,\n  visitArray: function(array){\n    // this.super(array)\n    var result = TreeTransformer.prototype.visitArray.call(this, array);\n    result = compactRaw(result);\n    result = stripWhitespace(result);\n    return result;\n  },\n  visitTag: function (tag) {\n    var tagName = tag.tagName;\n    // TODO - List tags that we don't want to strip whitespace for.\n    if (tagName === 'textarea' || tagName === 'script' || tagName === 'pre'\n      || !HTML.isKnownElement(tagName) || HTML.isKnownSVGElement(tagName)) {\n      return tag;\n    }\n    return TreeTransformer.prototype.visitTag.call(this, tag)\n  },\n  visitAttributes: function (attrs) {\n    return attrs;\n  }\n});\n\n\nexport function removeWhitespace(tree) {\n  tree = (new WhitespaceRemovingVisitor).visit(tree);\n  return tree;\n}\n"]},"sourceType":"module","hash":"d3a3de3d598f231ad097307450dbb82a4811da2e"}
