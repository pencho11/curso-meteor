{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\RUBEN\\Desktop\\meteor-vue\\imports\\api\\Users\\UserPresenceConfig.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.windows.x86_64"},"sourceFileName":"imports/api/Users/UserPresenceConfig.js","filename":"C:\\Users\\RUBEN\\Desktop\\meteor-vue\\imports\\api\\Users\\UserPresenceConfig.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"C:\\Users\\RUBEN\\Desktop\\meteor-vue","root":"C:\\Users\\RUBEN\\Desktop\\meteor-vue","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.14.0","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"C:\\Users\\RUBEN\\Desktop\\meteor-vue\\imports\\api\\Users\\UserPresenceConfig.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"imports/api/Users/UserPresenceConfig.js"}},"code":"let Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet User;\nmodule.link(\"meteor/socialize:user-model\", {\n  User(v) {\n    User = v;\n  }\n\n}, 1);\nlet UserPresence;\nmodule.link(\"meteor/socialize:user-presence\", {\n  UserPresence(v) {\n    UserPresence = v;\n  }\n\n}, 2);\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 3);\n// Schema for the fields where we will store the status data\nconst StatusSchema = new SimpleSchema({\n  status: Object,\n  'status.online': {\n    type: Boolean\n  },\n  'status.idle': {\n    type: Boolean,\n    optional: true\n  },\n  'status.lastLogin': {\n    type: Boolean,\n    optional: true,\n    blackbox: true\n  }\n}); // Add the schema to the existing schema currently attached to the User model\n\nUser.attachSchema(StatusSchema); // If `sessionIds` is undefined this signifies we need a fresh start.\n// When a full cleanup is necessary we will unset the status field to show all users as offline\n\nUserPresence.onCleanup(function onCleanup(sessionIds) {\n  if (!sessionIds) {\n    Meteor.users.update({}, {\n      $set: {\n        'status.online': true\n      },\n      $unset: {\n        'status.idle': true\n      }\n    }, {\n      multi: true\n    });\n  }\n}); // When a user comes online we set their status to online and set the lastOnline field to the current time\n\nUserPresence.onUserOnline(function onUserOnline(userId, connection) {\n  if (connection) {\n    Meteor.users.update(userId, {\n      $set: {\n        'status.online': true,\n        'status.idle': false,\n        'status.lastLogin': {\n          date: new Date(),\n          ipAddr: connection.clientAddress,\n          userAgent: connection.httpHeaders['user-agent']\n        }\n      }\n    });\n  }\n}); // When a user goes idle we'll set their status to indicate this\n\nUserPresence.onUserIdle(function onUserIdle(userId) {\n  Meteor.users.update(userId, {\n    $set: {\n      'status.idle': true\n    }\n  });\n}); // When a user goes offline we'll unset their status field to indicate offline status\n\nUserPresence.onUserOffline(function onUserOffline(userId) {\n  Meteor.users.update(userId, {\n    $set: {\n      'status.online': false\n    },\n    $unset: {\n      'status.idle': true\n    }\n  });\n});","map":{"version":3,"sources":["imports/api/Users/UserPresenceConfig.js"],"names":["Meteor","module","link","v","User","UserPresence","SimpleSchema","default","StatusSchema","status","Object","type","Boolean","optional","blackbox","attachSchema","onCleanup","sessionIds","users","update","$set","$unset","multi","onUserOnline","userId","connection","date","Date","ipAddr","clientAddress","userAgent","httpHeaders","onUserIdle","onUserOffline"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\r\nimport { User } from 'meteor/socialize:user-model';\r\nimport { UserPresence } from 'meteor/socialize:user-presence';\r\nimport SimpleSchema from 'simpl-schema';\r\n\r\n// Schema for the fields where we will store the status data\r\nconst StatusSchema = new SimpleSchema({\r\n    status: Object,\r\n    'status.online': {type: Boolean},\r\n    'status.idle': {type: Boolean, optional: true},\r\n    'status.lastLogin': {type: Boolean, optional: true, blackbox: true}\r\n});\r\n\r\n// Add the schema to the existing schema currently attached to the User model\r\nUser.attachSchema(StatusSchema);\r\n\r\n// If `sessionIds` is undefined this signifies we need a fresh start.\r\n// When a full cleanup is necessary we will unset the status field to show all users as offline\r\nUserPresence.onCleanup(function onCleanup(sessionIds) {\r\n    if (!sessionIds) {\r\n        Meteor.users.update({}, { $set: {'status.online': true}, $unset: { 'status.idle': true } }, { multi: true });\r\n    }\r\n});\r\n\r\n// When a user comes online we set their status to online and set the lastOnline field to the current time\r\nUserPresence.onUserOnline(function onUserOnline(userId, connection) {\r\n    if (connection) {\r\n        Meteor.users.update(userId, { \r\n            $set: { \r\n                'status.online': true, 'status.idle': false,\r\n                'status.lastLogin': {\r\n                    date: new Date(),\r\n                    ipAddr: connection.clientAddress,\r\n                    userAgent: connection.httpHeaders['user-agent']\r\n                }\r\n            } \r\n        });\r\n    }\r\n});\r\n\r\n// When a user goes idle we'll set their status to indicate this\r\nUserPresence.onUserIdle(function onUserIdle(userId) {\r\n    Meteor.users.update(userId, { $set: { 'status.idle': true } });\r\n});\r\n\r\n// When a user goes offline we'll unset their status field to indicate offline status\r\nUserPresence.onUserOffline(function onUserOffline(userId) {\r\n    Meteor.users.update(userId, { $set: { 'status.online': false }, $unset: { 'status.idle': true } });\r\n});\r\n"]},"sourceType":"module","hash":"6a16d98013db60b78e9b1944872e8b9149e6cd6c"}
