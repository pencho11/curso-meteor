{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\RUBEN\\Desktop\\meteor-vue\\packages\\spacebars-compiler\\compiler.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.windows.x86_64"},"sourceFileName":"packages/spacebars-compiler/compiler.js","filename":"C:\\Users\\RUBEN\\Desktop\\meteor-vue\\packages\\spacebars-compiler\\compiler.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"C:\\Users\\RUBEN\\Desktop\\meteor-vue","root":"C:\\Users\\RUBEN\\Desktop\\meteor-vue","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.14.0","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"C:\\Users\\RUBEN\\Desktop\\meteor-vue\\packages\\spacebars-compiler\\compiler.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/spacebars-compiler/compiler.js"}},"code":"module.export({\n  parse: () => parse,\n  compile: () => compile,\n  TemplateTagReplacer: () => TemplateTagReplacer,\n  codeGen: () => codeGen,\n  beautify: () => beautify\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet HTMLTools;\nmodule.link(\"meteor/html-tools\", {\n  HTMLTools(v) {\n    HTMLTools = v;\n  }\n\n}, 1);\nlet HTML;\nmodule.link(\"meteor/htmljs\", {\n  HTML(v) {\n    HTML = v;\n  }\n\n}, 2);\nlet BlazeTools;\nmodule.link(\"meteor/blaze-tools\", {\n  BlazeTools(v) {\n    BlazeTools = v;\n  }\n\n}, 3);\nlet CodeGen;\nmodule.link(\"./codegen\", {\n  CodeGen(v) {\n    CodeGen = v;\n  }\n\n}, 4);\nlet optimize;\nmodule.link(\"./optimizer\", {\n  optimize(v) {\n    optimize = v;\n  }\n\n}, 5);\nlet ReactComponentSiblingForbidder;\nmodule.link(\"./react\", {\n  ReactComponentSiblingForbidder(v) {\n    ReactComponentSiblingForbidder = v;\n  }\n\n}, 6);\nlet TemplateTag;\nmodule.link(\"./templatetag\", {\n  TemplateTag(v) {\n    TemplateTag = v;\n  }\n\n}, 7);\nlet removeWhitespace;\nmodule.link(\"./whitespace\", {\n  removeWhitespace(v) {\n    removeWhitespace = v;\n  }\n\n}, 8);\nvar UglifyJSMinify = null;\n\nif (Meteor.isServer) {\n  UglifyJSMinify = Npm.require('uglify-js').minify;\n}\n\nfunction parse(input) {\n  return HTMLTools.parseFragment(input, {\n    getTemplateTag: TemplateTag.parseCompleteTag\n  });\n}\n\nfunction compile(input, options) {\n  var tree = parse(input);\n  return codeGen(tree, options);\n}\n\nconst TemplateTagReplacer = HTML.TransformingVisitor.extend();\nTemplateTagReplacer.def({\n  visitObject: function (x) {\n    if (x instanceof HTMLTools.TemplateTag) {\n      // Make sure all TemplateTags in attributes have the right\n      // `.position` set on them.  This is a bit of a hack\n      // (we shouldn't be mutating that here), but it allows\n      // cleaner codegen of \"synthetic\" attributes like TEXTAREA's\n      // \"value\", where the template tags were originally not\n      // in an attribute.\n      if (this.inAttributeValue) x.position = HTMLTools.TEMPLATE_TAG_POSITION.IN_ATTRIBUTE;\n      return this.codegen.codeGenTemplateTag(x);\n    }\n\n    return HTML.TransformingVisitor.prototype.visitObject.call(this, x);\n  },\n  visitAttributes: function (attrs) {\n    if (attrs instanceof HTMLTools.TemplateTag) return this.codegen.codeGenTemplateTag(attrs); // call super (e.g. for case where `attrs` is an array)\n\n    return HTML.TransformingVisitor.prototype.visitAttributes.call(this, attrs);\n  },\n  visitAttribute: function (name, value, tag) {\n    this.inAttributeValue = true;\n    var result = this.visit(value);\n    this.inAttributeValue = false;\n\n    if (result !== value) {\n      // some template tags must have been replaced, because otherwise\n      // we try to keep things `===` when transforming.  Wrap the code\n      // in a function as per the rules.  You can't have\n      // `{id: Blaze.View(...)}` as an attributes dict because the View\n      // would be rendered more than once; you need to wrap it in a function\n      // so that it's a different View each time.\n      return BlazeTools.EmitCode(this.codegen.codeGenBlock(result));\n    }\n\n    return result;\n  }\n});\n\nfunction codeGen(parseTree, options) {\n  // is this a template, rather than a block passed to\n  // a block helper, say\n  var isTemplate = options && options.isTemplate;\n  var isBody = options && options.isBody;\n  var whitespace = options && options.whitespace;\n  var sourceName = options && options.sourceName;\n  var tree = parseTree; // The flags `isTemplate` and `isBody` are kind of a hack.\n\n  if (isTemplate || isBody) {\n    if (typeof whitespace === 'string' && whitespace.toLowerCase() === 'strip') {\n      tree = removeWhitespace(tree);\n    } // optimizing fragments would require being smarter about whether we are\n    // in a TEXTAREA, say.\n\n\n    tree = optimize(tree);\n  } // throws an error if using `{{> React}}` with siblings\n\n\n  new ReactComponentSiblingForbidder({\n    sourceName: sourceName\n  }).visit(tree);\n  var codegen = new CodeGen();\n  tree = new TemplateTagReplacer({\n    codegen: codegen\n  }).visit(tree);\n  var code = '(function () { ';\n\n  if (isTemplate || isBody) {\n    code += 'var view = this; ';\n  }\n\n  code += 'return ';\n  code += BlazeTools.toJS(tree);\n  code += '; })';\n  code = beautify(code);\n  return code;\n}\n\nfunction beautify(code) {\n  if (!UglifyJSMinify) {\n    return code;\n  }\n\n  var result = UglifyJSMinify(code, {\n    fromString: true,\n    mangle: false,\n    compress: false,\n    output: {\n      beautify: true,\n      indent_level: 2,\n      width: 80\n    }\n  });\n  var output = result.code; // Uglify interprets our expression as a statement and may add a semicolon.\n  // Strip trailing semicolon.\n\n  output = output.replace(/;$/, '');\n  return output;\n}","map":{"version":3,"sources":["packages/spacebars-compiler/compiler.js"],"names":["module","export","parse","compile","TemplateTagReplacer","codeGen","beautify","Meteor","link","v","HTMLTools","HTML","BlazeTools","CodeGen","optimize","ReactComponentSiblingForbidder","TemplateTag","removeWhitespace","UglifyJSMinify","isServer","Npm","require","minify","input","parseFragment","getTemplateTag","parseCompleteTag","options","tree","TransformingVisitor","extend","def","visitObject","x","inAttributeValue","position","TEMPLATE_TAG_POSITION","IN_ATTRIBUTE","codegen","codeGenTemplateTag","prototype","call","visitAttributes","attrs","visitAttribute","name","value","tag","result","visit","EmitCode","codeGenBlock","parseTree","isTemplate","isBody","whitespace","sourceName","toLowerCase","code","toJS","fromString","mangle","compress","output","indent_level","width","replace"],"mappings":"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","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { HTMLTools } from 'meteor/html-tools';\nimport { HTML } from 'meteor/htmljs';\nimport { BlazeTools } from 'meteor/blaze-tools';\nimport { CodeGen } from './codegen';\nimport { optimize } from './optimizer';\nimport { ReactComponentSiblingForbidder} from './react';\nimport { TemplateTag } from './templatetag';\nimport { removeWhitespace } from './whitespace';\n\nvar UglifyJSMinify = null;\nif (Meteor.isServer) {\n  UglifyJSMinify = Npm.require('uglify-js').minify;\n}\n\nexport function parse(input) {\n  return HTMLTools.parseFragment(\n    input,\n    { getTemplateTag: TemplateTag.parseCompleteTag });\n}\n\nexport function compile(input, options) {\n  var tree = parse(input);\n  return codeGen(tree, options);\n}\n\nexport const TemplateTagReplacer = HTML.TransformingVisitor.extend();\nTemplateTagReplacer.def({\n  visitObject: function (x) {\n    if (x instanceof HTMLTools.TemplateTag) {\n\n      // Make sure all TemplateTags in attributes have the right\n      // `.position` set on them.  This is a bit of a hack\n      // (we shouldn't be mutating that here), but it allows\n      // cleaner codegen of \"synthetic\" attributes like TEXTAREA's\n      // \"value\", where the template tags were originally not\n      // in an attribute.\n      if (this.inAttributeValue)\n        x.position = HTMLTools.TEMPLATE_TAG_POSITION.IN_ATTRIBUTE;\n\n      return this.codegen.codeGenTemplateTag(x);\n    }\n\n    return HTML.TransformingVisitor.prototype.visitObject.call(this, x);\n  },\n  visitAttributes: function (attrs) {\n    if (attrs instanceof HTMLTools.TemplateTag)\n      return this.codegen.codeGenTemplateTag(attrs);\n\n    // call super (e.g. for case where `attrs` is an array)\n    return HTML.TransformingVisitor.prototype.visitAttributes.call(this, attrs);\n  },\n  visitAttribute: function (name, value, tag) {\n    this.inAttributeValue = true;\n    var result = this.visit(value);\n    this.inAttributeValue = false;\n\n    if (result !== value) {\n      // some template tags must have been replaced, because otherwise\n      // we try to keep things `===` when transforming.  Wrap the code\n      // in a function as per the rules.  You can't have\n      // `{id: Blaze.View(...)}` as an attributes dict because the View\n      // would be rendered more than once; you need to wrap it in a function\n      // so that it's a different View each time.\n      return BlazeTools.EmitCode(this.codegen.codeGenBlock(result));\n    }\n    return result;\n  }\n});\n\nexport function codeGen (parseTree, options) {\n  // is this a template, rather than a block passed to\n  // a block helper, say\n  var isTemplate = (options && options.isTemplate);\n  var isBody = (options && options.isBody);\n  var whitespace = (options && options.whitespace)\n  var sourceName = (options && options.sourceName);\n\n  var tree = parseTree;\n\n  // The flags `isTemplate` and `isBody` are kind of a hack.\n  if (isTemplate || isBody) {\n    if (typeof whitespace === 'string' && whitespace.toLowerCase() === 'strip') {\n      tree = removeWhitespace(tree);\n    }\n    // optimizing fragments would require being smarter about whether we are\n    // in a TEXTAREA, say.\n    tree = optimize(tree);\n  }\n\n  // throws an error if using `{{> React}}` with siblings\n  new ReactComponentSiblingForbidder({sourceName: sourceName})\n    .visit(tree);\n\n  var codegen = new CodeGen;\n  tree = (new TemplateTagReplacer(\n    {codegen: codegen})).visit(tree);\n\n  var code = '(function () { ';\n  if (isTemplate || isBody) {\n    code += 'var view = this; ';\n  }\n  code += 'return ';\n  code += BlazeTools.toJS(tree);\n  code += '; })';\n\n  code = beautify(code);\n\n  return code;\n}\n\nexport function beautify (code) {\n  if (!UglifyJSMinify) {\n    return code;\n  }\n\n  var result = UglifyJSMinify(code, {\n    fromString: true,\n    mangle: false,\n    compress: false,\n    output: {\n      beautify: true,\n      indent_level: 2,\n      width: 80\n    }\n  });\n\n  var output = result.code;\n  // Uglify interprets our expression as a statement and may add a semicolon.\n  // Strip trailing semicolon.\n  output = output.replace(/;$/, '');\n  return output;\n}\n"]},"sourceType":"module","hash":"e48eff99ca2219d3b3d56323e90b2bbb22df23ba"}
