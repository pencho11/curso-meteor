{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\RUBEN\\Desktop\\meteor-vue\\packages\\accounts-base\\accounts_server.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.windows.x86_64"},"sourceFileName":"packages/accounts-base/accounts_server.js","filename":"C:\\Users\\RUBEN\\Desktop\\meteor-vue\\packages\\accounts-base\\accounts_server.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"C:\\Users\\RUBEN\\Desktop\\meteor-vue","root":"C:\\Users\\RUBEN\\Desktop\\meteor-vue","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.14.0","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"C:\\Users\\RUBEN\\Desktop\\meteor-vue\\packages\\accounts-base\\accounts_server.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/accounts-base/accounts_server.js"}},"code":"let _objectWithoutProperties;\n\nmodule.link(\"@babel/runtime/helpers/objectWithoutProperties\", {\n  default(v) {\n    _objectWithoutProperties = v;\n  }\n\n}, 0);\n\nlet _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 1);\nmodule.export({\n  AccountsServer: () => AccountsServer\n});\nlet crypto;\nmodule.link(\"crypto\", {\n  default(v) {\n    crypto = v;\n  }\n\n}, 0);\nlet AccountsCommon, EXPIRE_TOKENS_INTERVAL_MS, CONNECTION_CLOSE_DELAY_MS;\nmodule.link(\"./accounts_common.js\", {\n  AccountsCommon(v) {\n    AccountsCommon = v;\n  },\n\n  EXPIRE_TOKENS_INTERVAL_MS(v) {\n    EXPIRE_TOKENS_INTERVAL_MS = v;\n  },\n\n  CONNECTION_CLOSE_DELAY_MS(v) {\n    CONNECTION_CLOSE_DELAY_MS = v;\n  }\n\n}, 1);\nlet URL;\nmodule.link(\"meteor/url\", {\n  URL(v) {\n    URL = v;\n  }\n\n}, 2);\nconst hasOwn = Object.prototype.hasOwnProperty;\n/**\n * @summary Constructor for the `Accounts` namespace on the server.\n * @locus Server\n * @class AccountsServer\n * @extends AccountsCommon\n * @instancename accountsServer\n * @param {Object} server A server object such as `Meteor.server`.\n */\n\nclass AccountsServer extends AccountsCommon {\n  // Note that this constructor is less likely to be instantiated multiple\n  // times than the `AccountsClient` constructor, because a single server\n  // can provide only one set of methods.\n  constructor(server) {\n    super();\n    this._server = server || Meteor.server; // Set up the server's methods, as if by calling Meteor.methods.\n\n    this._initServerMethods();\n\n    this._initAccountDataHooks(); // If autopublish is on, publish these user fields. Login service\n    // packages (eg accounts-google) add to these by calling\n    // addAutopublishFields.  Notably, this isn't implemented with multiple\n    // publishes since DDP only merges only across top-level fields, not\n    // subfields (such as 'services.facebook.accessToken')\n\n\n    this._autopublishFields = {\n      loggedInUser: ['profile', 'username', 'emails'],\n      otherUsers: ['profile', 'username']\n    }; // use object to keep the reference when used in functions\n    // where _defaultPublishFields is destructured into lexical scope\n    // for publish callbacks that need `this`\n\n    this._defaultPublishFields = {\n      projection: {\n        profile: 1,\n        username: 1,\n        emails: 1\n      }\n    };\n\n    this._initServerPublications(); // connectionId -> {connection, loginToken}\n\n\n    this._accountData = {}; // connection id -> observe handle for the login token that this connection is\n    // currently associated with, or a number. The number indicates that we are in\n    // the process of setting up the observe (using a number instead of a single\n    // sentinel allows multiple attempts to set up the observe to identify which\n    // one was theirs).\n\n    this._userObservesForConnections = {};\n    this._nextUserObserveNumber = 1; // for the number described above.\n    // list of all registered handlers.\n\n    this._loginHandlers = [];\n    setupUsersCollection(this.users);\n    setupDefaultLoginHandlers(this);\n    setExpireTokensInterval(this);\n    this._validateLoginHook = new Hook({\n      bindEnvironment: false\n    });\n    this._validateNewUserHooks = [defaultValidateNewUserHook.bind(this)];\n\n    this._deleteSavedTokensForAllUsersOnStartup();\n\n    this._skipCaseInsensitiveChecksForTest = {};\n    this.urls = {\n      resetPassword: (token, extraParams) => this.buildEmailUrl(\"#/reset-password/\".concat(token), extraParams),\n      verifyEmail: (token, extraParams) => this.buildEmailUrl(\"#/verify-email/\".concat(token), extraParams),\n      enrollAccount: (token, extraParams) => this.buildEmailUrl(\"#/enroll-account/\".concat(token), extraParams)\n    };\n    this.addDefaultRateLimit();\n\n    this.buildEmailUrl = function (path) {\n      let extraParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      const url = new URL(Meteor.absoluteUrl(path));\n      const params = Object.entries(extraParams);\n\n      if (params.length > 0) {\n        // Add additional parameters to the url\n        for (const [key, value] of params) {\n          url.searchParams.append(key, value);\n        }\n      }\n\n      return url.toString();\n    };\n  } ///\n  /// CURRENT USER\n  ///\n  // @override of \"abstract\" non-implementation in accounts_common.js\n\n\n  userId() {\n    // This function only works if called inside a method or a pubication.\n    // Using any of the information from Meteor.user() in a method or\n    // publish function will always use the value from when the function first\n    // runs. This is likely not what the user expects. The way to make this work\n    // in a method or publish function is to do Meteor.find(this.userId).observe\n    // and recompute when the user record changes.\n    const currentInvocation = DDP._CurrentMethodInvocation.get() || DDP._CurrentPublicationInvocation.get();\n\n    if (!currentInvocation) throw new Error(\"Meteor.userId can only be invoked in method calls or publications.\");\n    return currentInvocation.userId;\n  } ///\n  /// LOGIN HOOKS\n  ///\n\n  /**\n   * @summary Validate login attempts.\n   * @locus Server\n   * @param {Function} func Called whenever a login is attempted (either successful or unsuccessful).  A login can be aborted by returning a falsy value or throwing an exception.\n   */\n\n\n  validateLoginAttempt(func) {\n    // Exceptions inside the hook callback are passed up to us.\n    return this._validateLoginHook.register(func);\n  }\n  /**\n   * @summary Set restrictions on new user creation.\n   * @locus Server\n   * @param {Function} func Called whenever a new user is created. Takes the new user object, and returns true to allow the creation or false to abort.\n   */\n\n\n  validateNewUser(func) {\n    this._validateNewUserHooks.push(func);\n  }\n  /**\n   * @summary Validate login from external service\n   * @locus Server\n   * @param {Function} func Called whenever login/user creation from external service is attempted. Login or user creation based on this login can be aborted by passing a falsy value or throwing an exception.\n   */\n\n\n  beforeExternalLogin(func) {\n    if (this._beforeExternalLoginHook) {\n      throw new Error(\"Can only call beforeExternalLogin once\");\n    }\n\n    this._beforeExternalLoginHook = func;\n  } ///\n  /// CREATE USER HOOKS\n  ///\n\n  /**\n   * @summary Customize new user creation.\n   * @locus Server\n   * @param {Function} func Called whenever a new user is created. Return the new user object, or throw an `Error` to abort the creation.\n   */\n\n\n  onCreateUser(func) {\n    if (this._onCreateUserHook) {\n      throw new Error(\"Can only call onCreateUser once\");\n    }\n\n    this._onCreateUserHook = func;\n  }\n  /**\n   * @summary Customize oauth user profile updates\n   * @locus Server\n   * @param {Function} func Called whenever a user is logged in via oauth. Return the profile object to be merged, or throw an `Error` to abort the creation.\n   */\n\n\n  onExternalLogin(func) {\n    if (this._onExternalLoginHook) {\n      throw new Error(\"Can only call onExternalLogin once\");\n    }\n\n    this._onExternalLoginHook = func;\n  }\n  /**\n   * @summary Customize user selection on external logins\n   * @locus Server\n   * @param {Function} func Called whenever a user is logged in via oauth and a\n   * user is not found with the service id. Return the user or undefined.\n   */\n\n\n  setAdditionalFindUserOnExternalLogin(func) {\n    if (this._additionalFindUserOnExternalLogin) {\n      throw new Error(\"Can only call setAdditionalFindUserOnExternalLogin once\");\n    }\n\n    this._additionalFindUserOnExternalLogin = func;\n  }\n\n  _validateLogin(connection, attempt) {\n    this._validateLoginHook.each(callback => {\n      let ret;\n\n      try {\n        ret = callback(cloneAttemptWithConnection(connection, attempt));\n      } catch (e) {\n        attempt.allowed = false; // XXX this means the last thrown error overrides previous error\n        // messages. Maybe this is surprising to users and we should make\n        // overriding errors more explicit. (see\n        // https://github.com/meteor/meteor/issues/1960)\n\n        attempt.error = e;\n        return true;\n      }\n\n      if (!ret) {\n        attempt.allowed = false; // don't override a specific error provided by a previous\n        // validator or the initial attempt (eg \"incorrect password\").\n\n        if (!attempt.error) attempt.error = new Meteor.Error(403, \"Login forbidden\");\n      }\n\n      return true;\n    });\n  }\n\n  _successfulLogin(connection, attempt) {\n    this._onLoginHook.each(callback => {\n      callback(cloneAttemptWithConnection(connection, attempt));\n      return true;\n    });\n  }\n\n  _failedLogin(connection, attempt) {\n    this._onLoginFailureHook.each(callback => {\n      callback(cloneAttemptWithConnection(connection, attempt));\n      return true;\n    });\n  }\n\n  _successfulLogout(connection, userId) {\n    // don't fetch the user object unless there are some callbacks registered\n    let user;\n\n    this._onLogoutHook.each(callback => {\n      if (!user && userId) user = this.users.findOne(userId, {\n        fields: this._options.defaultFieldSelector\n      });\n      callback({\n        user,\n        connection\n      });\n      return true;\n    });\n  }\n\n  ///\n  /// LOGIN METHODS\n  ///\n  // Login methods return to the client an object containing these\n  // fields when the user was logged in successfully:\n  //\n  //   id: userId\n  //   token: *\n  //   tokenExpires: *\n  //\n  // tokenExpires is optional and intends to provide a hint to the\n  // client as to when the token will expire. If not provided, the\n  // client will call Accounts._tokenExpiration, passing it the date\n  // that it received the token.\n  //\n  // The login method will throw an error back to the client if the user\n  // failed to log in.\n  //\n  //\n  // Login handlers and service specific login methods such as\n  // `createUser` internally return a `result` object containing these\n  // fields:\n  //\n  //   type:\n  //     optional string; the service name, overrides the handler\n  //     default if present.\n  //\n  //   error:\n  //     exception; if the user is not allowed to login, the reason why.\n  //\n  //   userId:\n  //     string; the user id of the user attempting to login (if\n  //     known), required for an allowed login.\n  //\n  //   options:\n  //     optional object merged into the result returned by the login\n  //     method; used by HAMK from SRP.\n  //\n  //   stampedLoginToken:\n  //     optional object with `token` and `when` indicating the login\n  //     token is already present in the database, returned by the\n  //     \"resume\" login handler.\n  //\n  // For convenience, login methods can also throw an exception, which\n  // is converted into an {error} result.  However, if the id of the\n  // user attempting the login is known, a {userId, error} result should\n  // be returned instead since the user id is not captured when an\n  // exception is thrown.\n  //\n  // This internal `result` object is automatically converted into the\n  // public {id, token, tokenExpires} object returned to the client.\n  // Try a login method, converting thrown exceptions into an {error}\n  // result.  The `type` argument is a default, inserted into the result\n  // object if not explicitly returned.\n  //\n  // Log in a user on a connection.\n  //\n  // We use the method invocation to set the user id on the connection,\n  // not the connection object directly. setUserId is tied to methods to\n  // enforce clear ordering of method application (using wait methods on\n  // the client, and a no setUserId after unblock restriction on the\n  // server)\n  //\n  // The `stampedLoginToken` parameter is optional.  When present, it\n  // indicates that the login token has already been inserted into the\n  // database and doesn't need to be inserted again.  (It's used by the\n  // \"resume\" login handler).\n  _loginUser(methodInvocation, userId, stampedLoginToken) {\n    if (!stampedLoginToken) {\n      stampedLoginToken = this._generateStampedLoginToken();\n\n      this._insertLoginToken(userId, stampedLoginToken);\n    } // This order (and the avoidance of yields) is important to make\n    // sure that when publish functions are rerun, they see a\n    // consistent view of the world: the userId is set and matches\n    // the login token on the connection (not that there is\n    // currently a public API for reading the login token on a\n    // connection).\n\n\n    Meteor._noYieldsAllowed(() => this._setLoginToken(userId, methodInvocation.connection, this._hashLoginToken(stampedLoginToken.token)));\n\n    methodInvocation.setUserId(userId);\n    return {\n      id: userId,\n      token: stampedLoginToken.token,\n      tokenExpires: this._tokenExpiration(stampedLoginToken.when)\n    };\n  }\n\n  // After a login method has completed, call the login hooks.  Note\n  // that `attemptLogin` is called for *all* login attempts, even ones\n  // which aren't successful (such as an invalid password, etc).\n  //\n  // If the login is allowed and isn't aborted by a validate login hook\n  // callback, log in the user.\n  //\n  _attemptLogin(methodInvocation, methodName, methodArgs, result) {\n    if (!result) throw new Error(\"result is required\"); // XXX A programming error in a login handler can lead to this occurring, and\n    // then we don't call onLogin or onLoginFailure callbacks. Should\n    // tryLoginMethod catch this case and turn it into an error?\n\n    if (!result.userId && !result.error) throw new Error(\"A login method must specify a userId or an error\");\n    let user;\n    if (result.userId) user = this.users.findOne(result.userId, {\n      fields: this._options.defaultFieldSelector\n    });\n    const attempt = {\n      type: result.type || \"unknown\",\n      allowed: !!(result.userId && !result.error),\n      methodName: methodName,\n      methodArguments: Array.from(methodArgs)\n    };\n\n    if (result.error) {\n      attempt.error = result.error;\n    }\n\n    if (user) {\n      attempt.user = user;\n    } // _validateLogin may mutate `attempt` by adding an error and changing allowed\n    // to false, but that's the only change it can make (and the user's callbacks\n    // only get a clone of `attempt`).\n\n\n    this._validateLogin(methodInvocation.connection, attempt);\n\n    if (attempt.allowed) {\n      const ret = _objectSpread(_objectSpread({}, this._loginUser(methodInvocation, result.userId, result.stampedLoginToken)), result.options);\n\n      ret.type = attempt.type;\n\n      this._successfulLogin(methodInvocation.connection, attempt);\n\n      return ret;\n    } else {\n      this._failedLogin(methodInvocation.connection, attempt);\n\n      throw attempt.error;\n    }\n  }\n\n  // All service specific login methods should go through this function.\n  // Ensure that thrown exceptions are caught and that login hook\n  // callbacks are still called.\n  //\n  _loginMethod(methodInvocation, methodName, methodArgs, type, fn) {\n    return this._attemptLogin(methodInvocation, methodName, methodArgs, tryLoginMethod(type, fn));\n  }\n\n  // Report a login attempt failed outside the context of a normal login\n  // method. This is for use in the case where there is a multi-step login\n  // procedure (eg SRP based password login). If a method early in the\n  // chain fails, it should call this function to report a failure. There\n  // is no corresponding method for a successful login; methods that can\n  // succeed at logging a user in should always be actual login methods\n  // (using either Accounts._loginMethod or Accounts.registerLoginHandler).\n  _reportLoginFailure(methodInvocation, methodName, methodArgs, result) {\n    const attempt = {\n      type: result.type || \"unknown\",\n      allowed: false,\n      error: result.error,\n      methodName: methodName,\n      methodArguments: Array.from(methodArgs)\n    };\n\n    if (result.userId) {\n      attempt.user = this.users.findOne(result.userId, {\n        fields: this._options.defaultFieldSelector\n      });\n    }\n\n    this._validateLogin(methodInvocation.connection, attempt);\n\n    this._failedLogin(methodInvocation.connection, attempt); // _validateLogin may mutate attempt to set a new error message. Return\n    // the modified version.\n\n\n    return attempt;\n  }\n\n  ///\n  /// LOGIN HANDLERS\n  ///\n  // The main entry point for auth packages to hook in to login.\n  //\n  // A login handler is a login method which can return `undefined` to\n  // indicate that the login request is not handled by this handler.\n  //\n  // @param name {String} Optional.  The service name, used by default\n  // if a specific service name isn't returned in the result.\n  //\n  // @param handler {Function} A function that receives an options object\n  // (as passed as an argument to the `login` method) and returns one of:\n  // - `undefined`, meaning don't handle;\n  // - a login method result object\n  registerLoginHandler(name, handler) {\n    if (!handler) {\n      handler = name;\n      name = null;\n    }\n\n    this._loginHandlers.push({\n      name: name,\n      handler: handler\n    });\n  }\n\n  // Checks a user's credentials against all the registered login\n  // handlers, and returns a login token if the credentials are valid. It\n  // is like the login method, except that it doesn't set the logged-in\n  // user on the connection. Throws a Meteor.Error if logging in fails,\n  // including the case where none of the login handlers handled the login\n  // request. Otherwise, returns {id: userId, token: *, tokenExpires: *}.\n  //\n  // For example, if you want to login with a plaintext password, `options` could be\n  //   { user: { username: <username> }, password: <password> }, or\n  //   { user: { email: <email> }, password: <password> }.\n  // Try all of the registered login handlers until one of them doesn't\n  // return `undefined`, meaning it handled this call to `login`. Return\n  // that return value.\n  _runLoginHandlers(methodInvocation, options) {\n    for (let handler of this._loginHandlers) {\n      const result = tryLoginMethod(handler.name, () => handler.handler.call(methodInvocation, options));\n\n      if (result) {\n        return result;\n      }\n\n      if (result !== undefined) {\n        throw new Meteor.Error(400, \"A login handler should return a result or undefined\");\n      }\n    }\n\n    return {\n      type: null,\n      error: new Meteor.Error(400, \"Unrecognized options for login request\")\n    };\n  }\n\n  // Deletes the given loginToken from the database.\n  //\n  // For new-style hashed token, this will cause all connections\n  // associated with the token to be closed.\n  //\n  // Any connections associated with old-style unhashed tokens will be\n  // in the process of becoming associated with hashed tokens and then\n  // they'll get closed.\n  destroyToken(userId, loginToken) {\n    this.users.update(userId, {\n      $pull: {\n        \"services.resume.loginTokens\": {\n          $or: [{\n            hashedToken: loginToken\n          }, {\n            token: loginToken\n          }]\n        }\n      }\n    });\n  }\n\n  _initServerMethods() {\n    // The methods created in this function need to be created here so that\n    // this variable is available in their scope.\n    const accounts = this; // This object will be populated with methods and then passed to\n    // accounts._server.methods further below.\n\n    const methods = {}; // @returns {Object|null}\n    //   If successful, returns {token: reconnectToken, id: userId}\n    //   If unsuccessful (for example, if the user closed the oauth login popup),\n    //     throws an error describing the reason\n\n    methods.login = function (options) {\n      // Login handlers should really also check whatever field they look at in\n      // options, but we don't enforce it.\n      check(options, Object);\n\n      const result = accounts._runLoginHandlers(this, options);\n\n      return accounts._attemptLogin(this, \"login\", arguments, result);\n    };\n\n    methods.logout = function () {\n      const token = accounts._getLoginToken(this.connection.id);\n\n      accounts._setLoginToken(this.userId, this.connection, null);\n\n      if (token && this.userId) {\n        accounts.destroyToken(this.userId, token);\n      }\n\n      accounts._successfulLogout(this.connection, this.userId);\n\n      this.setUserId(null);\n    }; // Generates a new login token with the same expiration as the\n    // connection's current token and saves it to the database. Associates\n    // the connection with this new token and returns it. Throws an error\n    // if called on a connection that isn't logged in.\n    //\n    // @returns Object\n    //   If successful, returns { token: <new token>, id: <user id>,\n    //   tokenExpires: <expiration date> }.\n\n\n    methods.getNewToken = function () {\n      const user = accounts.users.findOne(this.userId, {\n        fields: {\n          \"services.resume.loginTokens\": 1\n        }\n      });\n\n      if (!this.userId || !user) {\n        throw new Meteor.Error(\"You are not logged in.\");\n      } // Be careful not to generate a new token that has a later\n      // expiration than the curren token. Otherwise, a bad guy with a\n      // stolen token could use this method to stop his stolen token from\n      // ever expiring.\n\n\n      const currentHashedToken = accounts._getLoginToken(this.connection.id);\n\n      const currentStampedToken = user.services.resume.loginTokens.find(stampedToken => stampedToken.hashedToken === currentHashedToken);\n\n      if (!currentStampedToken) {\n        // safety belt: this should never happen\n        throw new Meteor.Error(\"Invalid login token\");\n      }\n\n      const newStampedToken = accounts._generateStampedLoginToken();\n\n      newStampedToken.when = currentStampedToken.when;\n\n      accounts._insertLoginToken(this.userId, newStampedToken);\n\n      return accounts._loginUser(this, this.userId, newStampedToken);\n    }; // Removes all tokens except the token associated with the current\n    // connection. Throws an error if the connection is not logged\n    // in. Returns nothing on success.\n\n\n    methods.removeOtherTokens = function () {\n      if (!this.userId) {\n        throw new Meteor.Error(\"You are not logged in.\");\n      }\n\n      const currentToken = accounts._getLoginToken(this.connection.id);\n\n      accounts.users.update(this.userId, {\n        $pull: {\n          \"services.resume.loginTokens\": {\n            hashedToken: {\n              $ne: currentToken\n            }\n          }\n        }\n      });\n    }; // Allow a one-time configuration for a login service. Modifications\n    // to this collection are also allowed in insecure mode.\n\n\n    methods.configureLoginService = options => {\n      check(options, Match.ObjectIncluding({\n        service: String\n      })); // Don't let random users configure a service we haven't added yet (so\n      // that when we do later add it, it's set up with their configuration\n      // instead of ours).\n      // XXX if service configuration is oauth-specific then this code should\n      //     be in accounts-oauth; if it's not then the registry should be\n      //     in this package\n\n      if (!(accounts.oauth && accounts.oauth.serviceNames().includes(options.service))) {\n        throw new Meteor.Error(403, \"Service unknown\");\n      }\n\n      const {\n        ServiceConfiguration\n      } = Package['service-configuration'];\n      if (ServiceConfiguration.configurations.findOne({\n        service: options.service\n      })) throw new Meteor.Error(403, \"Service \".concat(options.service, \" already configured\"));\n      if (hasOwn.call(options, 'secret') && usingOAuthEncryption()) options.secret = OAuthEncryption.seal(options.secret);\n      ServiceConfiguration.configurations.insert(options);\n    };\n\n    accounts._server.methods(methods);\n  }\n\n  _initAccountDataHooks() {\n    this._server.onConnection(connection => {\n      this._accountData[connection.id] = {\n        connection: connection\n      };\n      connection.onClose(() => {\n        this._removeTokenFromConnection(connection.id);\n\n        delete this._accountData[connection.id];\n      });\n    });\n  }\n\n  _initServerPublications() {\n    // Bring into lexical scope for publish callbacks that need `this`\n    const {\n      users,\n      _autopublishFields,\n      _defaultPublishFields\n    } = this; // Publish all login service configuration fields other than secret.\n\n    this._server.publish(\"meteor.loginServiceConfiguration\", () => {\n      const {\n        ServiceConfiguration\n      } = Package['service-configuration'];\n      return ServiceConfiguration.configurations.find({}, {\n        fields: {\n          secret: 0\n        }\n      });\n    }, {\n      is_auto: true\n    }); // not technically autopublish, but stops the warning.\n    // Use Meteor.startup to give other packages a chance to call\n    // setDefaultPublishFields.\n\n\n    Meteor.startup(() => {\n      // Publish the current user's record to the client.\n      this._server.publish(null, function () {\n        if (this.userId) {\n          return users.find({\n            _id: this.userId\n          }, {\n            fields: _defaultPublishFields.projection\n          });\n        } else {\n          return null;\n        }\n      },\n      /*suppress autopublish warning*/\n      {\n        is_auto: true\n      });\n    }); // Use Meteor.startup to give other packages a chance to call\n    // addAutopublishFields.\n\n    Package.autopublish && Meteor.startup(() => {\n      // ['profile', 'username'] -> {profile: 1, username: 1}\n      const toFieldSelector = fields => fields.reduce((prev, field) => _objectSpread(_objectSpread({}, prev), {}, {\n        [field]: 1\n      }), {});\n\n      this._server.publish(null, function () {\n        if (this.userId) {\n          return users.find({\n            _id: this.userId\n          }, {\n            fields: toFieldSelector(_autopublishFields.loggedInUser)\n          });\n        } else {\n          return null;\n        }\n      },\n      /*suppress autopublish warning*/\n      {\n        is_auto: true\n      }); // XXX this publish is neither dedup-able nor is it optimized by our special\n      // treatment of queries on a specific _id. Therefore this will have O(n^2)\n      // run-time performance every time a user document is changed (eg someone\n      // logging in). If this is a problem, we can instead write a manual publish\n      // function which filters out fields based on 'this.userId'.\n\n\n      this._server.publish(null, function () {\n        const selector = this.userId ? {\n          _id: {\n            $ne: this.userId\n          }\n        } : {};\n        return users.find(selector, {\n          fields: toFieldSelector(_autopublishFields.otherUsers)\n        });\n      },\n      /*suppress autopublish warning*/\n      {\n        is_auto: true\n      });\n    });\n  }\n\n  // Add to the list of fields or subfields to be automatically\n  // published if autopublish is on. Must be called from top-level\n  // code (ie, before Meteor.startup hooks run).\n  //\n  // @param opts {Object} with:\n  //   - forLoggedInUser {Array} Array of fields published to the logged-in user\n  //   - forOtherUsers {Array} Array of fields published to users that aren't logged in\n  addAutopublishFields(opts) {\n    this._autopublishFields.loggedInUser.push.apply(this._autopublishFields.loggedInUser, opts.forLoggedInUser);\n\n    this._autopublishFields.otherUsers.push.apply(this._autopublishFields.otherUsers, opts.forOtherUsers);\n  }\n\n  // Replaces the fields to be automatically\n  // published when the user logs in\n  //\n  // @param {MongoFieldSpecifier} fields Dictionary of fields to return or exclude.\n  setDefaultPublishFields(fields) {\n    this._defaultPublishFields.projection = fields;\n  }\n\n  ///\n  /// ACCOUNT DATA\n  ///\n  // HACK: This is used by 'meteor-accounts' to get the loginToken for a\n  // connection. Maybe there should be a public way to do that.\n  _getAccountData(connectionId, field) {\n    const data = this._accountData[connectionId];\n    return data && data[field];\n  }\n\n  _setAccountData(connectionId, field, value) {\n    const data = this._accountData[connectionId]; // safety belt. shouldn't happen. accountData is set in onConnection,\n    // we don't have a connectionId until it is set.\n\n    if (!data) return;\n    if (value === undefined) delete data[field];else data[field] = value;\n  }\n\n  ///\n  /// RECONNECT TOKENS\n  ///\n  /// support reconnecting using a meteor login token\n  _hashLoginToken(loginToken) {\n    const hash = crypto.createHash('sha256');\n    hash.update(loginToken);\n    return hash.digest('base64');\n  }\n\n  // {token, when} => {hashedToken, when}\n  _hashStampedToken(stampedToken) {\n    const {\n      token\n    } = stampedToken,\n          hashedStampedToken = _objectWithoutProperties(stampedToken, [\"token\"]);\n\n    return _objectSpread(_objectSpread({}, hashedStampedToken), {}, {\n      hashedToken: this._hashLoginToken(token)\n    });\n  }\n\n  // Using $addToSet avoids getting an index error if another client\n  // logging in simultaneously has already inserted the new hashed\n  // token.\n  _insertHashedLoginToken(userId, hashedToken, query) {\n    query = query ? _objectSpread({}, query) : {};\n    query._id = userId;\n    this.users.update(query, {\n      $addToSet: {\n        \"services.resume.loginTokens\": hashedToken\n      }\n    });\n  }\n\n  // Exported for tests.\n  _insertLoginToken(userId, stampedToken, query) {\n    this._insertHashedLoginToken(userId, this._hashStampedToken(stampedToken), query);\n  }\n\n  _clearAllLoginTokens(userId) {\n    this.users.update(userId, {\n      $set: {\n        'services.resume.loginTokens': []\n      }\n    });\n  }\n\n  // test hook\n  _getUserObserve(connectionId) {\n    return this._userObservesForConnections[connectionId];\n  }\n\n  // Clean up this connection's association with the token: that is, stop\n  // the observe that we started when we associated the connection with\n  // this token.\n  _removeTokenFromConnection(connectionId) {\n    if (hasOwn.call(this._userObservesForConnections, connectionId)) {\n      const observe = this._userObservesForConnections[connectionId];\n\n      if (typeof observe === 'number') {\n        // We're in the process of setting up an observe for this connection. We\n        // can't clean up that observe yet, but if we delete the placeholder for\n        // this connection, then the observe will get cleaned up as soon as it has\n        // been set up.\n        delete this._userObservesForConnections[connectionId];\n      } else {\n        delete this._userObservesForConnections[connectionId];\n        observe.stop();\n      }\n    }\n  }\n\n  _getLoginToken(connectionId) {\n    return this._getAccountData(connectionId, 'loginToken');\n  }\n\n  // newToken is a hashed token.\n  _setLoginToken(userId, connection, newToken) {\n    this._removeTokenFromConnection(connection.id);\n\n    this._setAccountData(connection.id, 'loginToken', newToken);\n\n    if (newToken) {\n      // Set up an observe for this token. If the token goes away, we need\n      // to close the connection.  We defer the observe because there's\n      // no need for it to be on the critical path for login; we just need\n      // to ensure that the connection will get closed at some point if\n      // the token gets deleted.\n      //\n      // Initially, we set the observe for this connection to a number; this\n      // signifies to other code (which might run while we yield) that we are in\n      // the process of setting up an observe for this connection. Once the\n      // observe is ready to go, we replace the number with the real observe\n      // handle (unless the placeholder has been deleted or replaced by a\n      // different placehold number, signifying that the connection was closed\n      // already -- in this case we just clean up the observe that we started).\n      const myObserveNumber = ++this._nextUserObserveNumber;\n      this._userObservesForConnections[connection.id] = myObserveNumber;\n      Meteor.defer(() => {\n        // If something else happened on this connection in the meantime (it got\n        // closed, or another call to _setLoginToken happened), just do\n        // nothing. We don't need to start an observe for an old connection or old\n        // token.\n        if (this._userObservesForConnections[connection.id] !== myObserveNumber) {\n          return;\n        }\n\n        let foundMatchingUser; // Because we upgrade unhashed login tokens to hashed tokens at\n        // login time, sessions will only be logged in with a hashed\n        // token. Thus we only need to observe hashed tokens here.\n\n        const observe = this.users.find({\n          _id: userId,\n          'services.resume.loginTokens.hashedToken': newToken\n        }, {\n          fields: {\n            _id: 1\n          }\n        }).observeChanges({\n          added: () => {\n            foundMatchingUser = true;\n          },\n          removed: connection.close // The onClose callback for the connection takes care of\n          // cleaning up the observe handle and any other state we have\n          // lying around.\n\n        }, {\n          nonMutatingCallbacks: true\n        }); // If the user ran another login or logout command we were waiting for the\n        // defer or added to fire (ie, another call to _setLoginToken occurred),\n        // then we let the later one win (start an observe, etc) and just stop our\n        // observe now.\n        //\n        // Similarly, if the connection was already closed, then the onClose\n        // callback would have called _removeTokenFromConnection and there won't\n        // be an entry in _userObservesForConnections. We can stop the observe.\n\n        if (this._userObservesForConnections[connection.id] !== myObserveNumber) {\n          observe.stop();\n          return;\n        }\n\n        this._userObservesForConnections[connection.id] = observe;\n\n        if (!foundMatchingUser) {\n          // We've set up an observe on the user associated with `newToken`,\n          // so if the new token is removed from the database, we'll close\n          // the connection. But the token might have already been deleted\n          // before we set up the observe, which wouldn't have closed the\n          // connection because the observe wasn't running yet.\n          connection.close();\n        }\n      });\n    }\n  }\n\n  // (Also used by Meteor Accounts server and tests).\n  //\n  _generateStampedLoginToken() {\n    return {\n      token: Random.secret(),\n      when: new Date()\n    };\n  }\n\n  ///\n  /// TOKEN EXPIRATION\n  ///\n  // Deletes expired password reset tokens from the database.\n  //\n  // Exported for tests. Also, the arguments are only used by\n  // tests. oldestValidDate is simulate expiring tokens without waiting\n  // for them to actually expire. userId is used by tests to only expire\n  // tokens for the test user.\n  _expirePasswordResetTokens(oldestValidDate, userId) {\n    const tokenLifetimeMs = this._getPasswordResetTokenLifetimeMs(); // when calling from a test with extra arguments, you must specify both!\n\n\n    if (oldestValidDate && !userId || !oldestValidDate && userId) {\n      throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n    }\n\n    oldestValidDate = oldestValidDate || new Date(new Date() - tokenLifetimeMs);\n    const tokenFilter = {\n      $or: [{\n        \"services.password.reset.reason\": \"reset\"\n      }, {\n        \"services.password.reset.reason\": {\n          $exists: false\n        }\n      }]\n    };\n    expirePasswordToken(this, oldestValidDate, tokenFilter, userId);\n  } // Deletes expired password enroll tokens from the database.\n  //\n  // Exported for tests. Also, the arguments are only used by\n  // tests. oldestValidDate is simulate expiring tokens without waiting\n  // for them to actually expire. userId is used by tests to only expire\n  // tokens for the test user.\n\n\n  _expirePasswordEnrollTokens(oldestValidDate, userId) {\n    const tokenLifetimeMs = this._getPasswordEnrollTokenLifetimeMs(); // when calling from a test with extra arguments, you must specify both!\n\n\n    if (oldestValidDate && !userId || !oldestValidDate && userId) {\n      throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n    }\n\n    oldestValidDate = oldestValidDate || new Date(new Date() - tokenLifetimeMs);\n    const tokenFilter = {\n      \"services.password.enroll.reason\": \"enroll\"\n    };\n    expirePasswordToken(this, oldestValidDate, tokenFilter, userId);\n  } // Deletes expired tokens from the database and closes all open connections\n  // associated with these tokens.\n  //\n  // Exported for tests. Also, the arguments are only used by\n  // tests. oldestValidDate is simulate expiring tokens without waiting\n  // for them to actually expire. userId is used by tests to only expire\n  // tokens for the test user.\n\n\n  _expireTokens(oldestValidDate, userId) {\n    const tokenLifetimeMs = this._getTokenLifetimeMs(); // when calling from a test with extra arguments, you must specify both!\n\n\n    if (oldestValidDate && !userId || !oldestValidDate && userId) {\n      throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n    }\n\n    oldestValidDate = oldestValidDate || new Date(new Date() - tokenLifetimeMs);\n    const userFilter = userId ? {\n      _id: userId\n    } : {}; // Backwards compatible with older versions of meteor that stored login token\n    // timestamps as numbers.\n\n    this.users.update(_objectSpread(_objectSpread({}, userFilter), {}, {\n      $or: [{\n        \"services.resume.loginTokens.when\": {\n          $lt: oldestValidDate\n        }\n      }, {\n        \"services.resume.loginTokens.when\": {\n          $lt: +oldestValidDate\n        }\n      }]\n    }), {\n      $pull: {\n        \"services.resume.loginTokens\": {\n          $or: [{\n            when: {\n              $lt: oldestValidDate\n            }\n          }, {\n            when: {\n              $lt: +oldestValidDate\n            }\n          }]\n        }\n      }\n    }, {\n      multi: true\n    }); // The observe on Meteor.users will take care of closing connections for\n    // expired tokens.\n  }\n\n  // @override from accounts_common.js\n  config(options) {\n    // Call the overridden implementation of the method.\n    const superResult = AccountsCommon.prototype.config.apply(this, arguments); // If the user set loginExpirationInDays to null, then we need to clear the\n    // timer that periodically expires tokens.\n\n    if (hasOwn.call(this._options, 'loginExpirationInDays') && this._options.loginExpirationInDays === null && this.expireTokenInterval) {\n      Meteor.clearInterval(this.expireTokenInterval);\n      this.expireTokenInterval = null;\n    }\n\n    return superResult;\n  }\n\n  // Called by accounts-password\n  insertUserDoc(options, user) {\n    // - clone user document, to protect from modification\n    // - add createdAt timestamp\n    // - prepare an _id, so that you can modify other collections (eg\n    // create a first task for every new user)\n    //\n    // XXX If the onCreateUser or validateNewUser hooks fail, we might\n    // end up having modified some other collection\n    // inappropriately. The solution is probably to have onCreateUser\n    // accept two callbacks - one that gets called before inserting\n    // the user document (in which you can modify its contents), and\n    // one that gets called after (in which you should change other\n    // collections)\n    user = _objectSpread({\n      createdAt: new Date(),\n      _id: Random.id()\n    }, user);\n\n    if (user.services) {\n      Object.keys(user.services).forEach(service => pinEncryptedFieldsToUser(user.services[service], user._id));\n    }\n\n    let fullUser;\n\n    if (this._onCreateUserHook) {\n      fullUser = this._onCreateUserHook(options, user); // This is *not* part of the API. We need this because we can't isolate\n      // the global server environment between tests, meaning we can't test\n      // both having a create user hook set and not having one set.\n\n      if (fullUser === 'TEST DEFAULT HOOK') fullUser = defaultCreateUserHook(options, user);\n    } else {\n      fullUser = defaultCreateUserHook(options, user);\n    }\n\n    this._validateNewUserHooks.forEach(hook => {\n      if (!hook(fullUser)) throw new Meteor.Error(403, \"User validation failed\");\n    });\n\n    let userId;\n\n    try {\n      userId = this.users.insert(fullUser);\n    } catch (e) {\n      // XXX string parsing sucks, maybe\n      // https://jira.mongodb.org/browse/SERVER-3069 will get fixed one day\n      // https://jira.mongodb.org/browse/SERVER-4637\n      if (!e.errmsg) throw e;\n      if (e.errmsg.includes('emails.address')) throw new Meteor.Error(403, \"Email already exists.\");\n      if (e.errmsg.includes('username')) throw new Meteor.Error(403, \"Username already exists.\");\n      throw e;\n    }\n\n    return userId;\n  }\n\n  // Helper function: returns false if email does not match company domain from\n  // the configuration.\n  _testEmailDomain(email) {\n    const domain = this._options.restrictCreationByEmailDomain;\n    return !domain || typeof domain === 'function' && domain(email) || typeof domain === 'string' && new RegExp(\"@\".concat(Meteor._escapeRegExp(domain), \"$\"), 'i').test(email);\n  }\n\n  ///\n  /// CLEAN UP FOR `logoutOtherClients`\n  ///\n  _deleteSavedTokensForUser(userId, tokensToDelete) {\n    if (tokensToDelete) {\n      this.users.update(userId, {\n        $unset: {\n          \"services.resume.haveLoginTokensToDelete\": 1,\n          \"services.resume.loginTokensToDelete\": 1\n        },\n        $pullAll: {\n          \"services.resume.loginTokens\": tokensToDelete\n        }\n      });\n    }\n  }\n\n  _deleteSavedTokensForAllUsersOnStartup() {\n    // If we find users who have saved tokens to delete on startup, delete\n    // them now. It's possible that the server could have crashed and come\n    // back up before new tokens are found in localStorage, but this\n    // shouldn't happen very often. We shouldn't put a delay here because\n    // that would give a lot of power to an attacker with a stolen login\n    // token and the ability to crash the server.\n    Meteor.startup(() => {\n      this.users.find({\n        \"services.resume.haveLoginTokensToDelete\": true\n      }, {\n        fields: {\n          \"services.resume.loginTokensToDelete\": 1\n        }\n      }).forEach(user => {\n        this._deleteSavedTokensForUser(user._id, user.services.resume.loginTokensToDelete);\n      });\n    });\n  }\n\n  ///\n  /// MANAGING USER OBJECTS\n  ///\n  // Updates or creates a user after we authenticate with a 3rd party.\n  //\n  // @param serviceName {String} Service name (eg, twitter).\n  // @param serviceData {Object} Data to store in the user's record\n  //        under services[serviceName]. Must include an \"id\" field\n  //        which is a unique identifier for the user in the service.\n  // @param options {Object, optional} Other options to pass to insertUserDoc\n  //        (eg, profile)\n  // @returns {Object} Object with token and id keys, like the result\n  //        of the \"login\" method.\n  //\n  updateOrCreateUserFromExternalService(serviceName, serviceData, options) {\n    options = _objectSpread({}, options);\n\n    if (serviceName === \"password\" || serviceName === \"resume\") {\n      throw new Error(\"Can't use updateOrCreateUserFromExternalService with internal service \" + serviceName);\n    }\n\n    if (!hasOwn.call(serviceData, 'id')) {\n      throw new Error(\"Service data for service \".concat(serviceName, \" must include id\"));\n    } // Look for a user with the appropriate service user id.\n\n\n    const selector = {};\n    const serviceIdKey = \"services.\".concat(serviceName, \".id\"); // XXX Temporary special case for Twitter. (Issue #629)\n    //   The serviceData.id will be a string representation of an integer.\n    //   We want it to match either a stored string or int representation.\n    //   This is to cater to earlier versions of Meteor storing twitter\n    //   user IDs in number form, and recent versions storing them as strings.\n    //   This can be removed once migration technology is in place, and twitter\n    //   users stored with integer IDs have been migrated to string IDs.\n\n    if (serviceName === \"twitter\" && !isNaN(serviceData.id)) {\n      selector[\"$or\"] = [{}, {}];\n      selector[\"$or\"][0][serviceIdKey] = serviceData.id;\n      selector[\"$or\"][1][serviceIdKey] = parseInt(serviceData.id, 10);\n    } else {\n      selector[serviceIdKey] = serviceData.id;\n    }\n\n    let user = this.users.findOne(selector, {\n      fields: this._options.defaultFieldSelector\n    }); // Check to see if the developer has a custom way to find the user outside\n    // of the general selectors above.\n\n    if (!user && this._additionalFindUserOnExternalLogin) {\n      user = this._additionalFindUserOnExternalLogin({\n        serviceName,\n        serviceData,\n        options\n      });\n    } // Before continuing, run user hook to see if we should continue\n\n\n    if (this._beforeExternalLoginHook && !this._beforeExternalLoginHook(serviceName, serviceData, user)) {\n      throw new Meteor.Error(403, \"Login forbidden\");\n    } // When creating a new user we pass through all options. When updating an\n    // existing user, by default we only process/pass through the serviceData\n    // (eg, so that we keep an unexpired access token and don't cache old email\n    // addresses in serviceData.email). The onExternalLogin hook can be used when\n    // creating or updating a user, to modify or pass through more options as\n    // needed.\n\n\n    let opts = user ? {} : options;\n\n    if (this._onExternalLoginHook) {\n      opts = this._onExternalLoginHook(options, user);\n    }\n\n    if (user) {\n      pinEncryptedFieldsToUser(serviceData, user._id);\n      let setAttrs = {};\n      Object.keys(serviceData).forEach(key => setAttrs[\"services.\".concat(serviceName, \".\").concat(key)] = serviceData[key]); // XXX Maybe we should re-use the selector above and notice if the update\n      //     touches nothing?\n\n      setAttrs = _objectSpread(_objectSpread({}, setAttrs), opts);\n      this.users.update(user._id, {\n        $set: setAttrs\n      });\n      return {\n        type: serviceName,\n        userId: user._id\n      };\n    } else {\n      // Create a new user with the service data.\n      user = {\n        services: {}\n      };\n      user.services[serviceName] = serviceData;\n      return {\n        type: serviceName,\n        userId: this.insertUserDoc(opts, user)\n      };\n    }\n  }\n\n  // Removes default rate limiting rule\n  removeDefaultRateLimit() {\n    const resp = DDPRateLimiter.removeRule(this.defaultRateLimiterRuleId);\n    this.defaultRateLimiterRuleId = null;\n    return resp;\n  }\n\n  // Add a default rule of limiting logins, creating new users and password reset\n  // to 5 times every 10 seconds per connection.\n  addDefaultRateLimit() {\n    if (!this.defaultRateLimiterRuleId) {\n      this.defaultRateLimiterRuleId = DDPRateLimiter.addRule({\n        userId: null,\n        clientAddress: null,\n        type: 'method',\n        name: name => ['login', 'createUser', 'resetPassword', 'forgotPassword'].includes(name),\n        connectionId: connectionId => true\n      }, 5, 10000);\n    }\n  }\n\n}\n\n// Give each login hook callback a fresh cloned copy of the attempt\n// object, but don't clone the connection.\n//\nconst cloneAttemptWithConnection = (connection, attempt) => {\n  const clonedAttempt = EJSON.clone(attempt);\n  clonedAttempt.connection = connection;\n  return clonedAttempt;\n};\n\nconst tryLoginMethod = (type, fn) => {\n  let result;\n\n  try {\n    result = fn();\n  } catch (e) {\n    result = {\n      error: e\n    };\n  }\n\n  if (result && !result.type && type) result.type = type;\n  return result;\n};\n\nconst setupDefaultLoginHandlers = accounts => {\n  accounts.registerLoginHandler(\"resume\", function (options) {\n    return defaultResumeLoginHandler.call(this, accounts, options);\n  });\n}; // Login handler for resume tokens.\n\n\nconst defaultResumeLoginHandler = (accounts, options) => {\n  if (!options.resume) return undefined;\n  check(options.resume, String);\n\n  const hashedToken = accounts._hashLoginToken(options.resume); // First look for just the new-style hashed login token, to avoid\n  // sending the unhashed token to the database in a query if we don't\n  // need to.\n\n\n  let user = accounts.users.findOne({\n    \"services.resume.loginTokens.hashedToken\": hashedToken\n  }, {\n    fields: {\n      \"services.resume.loginTokens.$\": 1\n    }\n  });\n\n  if (!user) {\n    // If we didn't find the hashed login token, try also looking for\n    // the old-style unhashed token.  But we need to look for either\n    // the old-style token OR the new-style token, because another\n    // client connection logging in simultaneously might have already\n    // converted the token.\n    user = accounts.users.findOne({\n      $or: [{\n        \"services.resume.loginTokens.hashedToken\": hashedToken\n      }, {\n        \"services.resume.loginTokens.token\": options.resume\n      }]\n    }, // Note: Cannot use ...loginTokens.$ positional operator with $or query.\n    {\n      fields: {\n        \"services.resume.loginTokens\": 1\n      }\n    });\n  }\n\n  if (!user) return {\n    error: new Meteor.Error(403, \"You've been logged out by the server. Please log in again.\")\n  }; // Find the token, which will either be an object with fields\n  // {hashedToken, when} for a hashed token or {token, when} for an\n  // unhashed token.\n\n  let oldUnhashedStyleToken;\n  let token = user.services.resume.loginTokens.find(token => token.hashedToken === hashedToken);\n\n  if (token) {\n    oldUnhashedStyleToken = false;\n  } else {\n    token = user.services.resume.loginTokens.find(token => token.token === options.resume);\n    oldUnhashedStyleToken = true;\n  }\n\n  const tokenExpires = accounts._tokenExpiration(token.when);\n\n  if (new Date() >= tokenExpires) return {\n    userId: user._id,\n    error: new Meteor.Error(403, \"Your session has expired. Please log in again.\")\n  }; // Update to a hashed token when an unhashed token is encountered.\n\n  if (oldUnhashedStyleToken) {\n    // Only add the new hashed token if the old unhashed token still\n    // exists (this avoids resurrecting the token if it was deleted\n    // after we read it).  Using $addToSet avoids getting an index\n    // error if another client logging in simultaneously has already\n    // inserted the new hashed token.\n    accounts.users.update({\n      _id: user._id,\n      \"services.resume.loginTokens.token\": options.resume\n    }, {\n      $addToSet: {\n        \"services.resume.loginTokens\": {\n          \"hashedToken\": hashedToken,\n          \"when\": token.when\n        }\n      }\n    }); // Remove the old token *after* adding the new, since otherwise\n    // another client trying to login between our removing the old and\n    // adding the new wouldn't find a token to login with.\n\n    accounts.users.update(user._id, {\n      $pull: {\n        \"services.resume.loginTokens\": {\n          \"token\": options.resume\n        }\n      }\n    });\n  }\n\n  return {\n    userId: user._id,\n    stampedLoginToken: {\n      token: options.resume,\n      when: token.when\n    }\n  };\n};\n\nconst expirePasswordToken = (accounts, oldestValidDate, tokenFilter, userId) => {\n  // boolean value used to determine if this method was called from enroll account workflow\n  let isEnroll = false;\n  const userFilter = userId ? {\n    _id: userId\n  } : {}; // check if this method was called from enroll account workflow\n\n  if (tokenFilter['services.password.enroll.reason']) {\n    isEnroll = true;\n  }\n\n  let resetRangeOr = {\n    $or: [{\n      \"services.password.reset.when\": {\n        $lt: oldestValidDate\n      }\n    }, {\n      \"services.password.reset.when\": {\n        $lt: +oldestValidDate\n      }\n    }]\n  };\n\n  if (isEnroll) {\n    resetRangeOr = {\n      $or: [{\n        \"services.password.enroll.when\": {\n          $lt: oldestValidDate\n        }\n      }, {\n        \"services.password.enroll.when\": {\n          $lt: +oldestValidDate\n        }\n      }]\n    };\n  }\n\n  const expireFilter = {\n    $and: [tokenFilter, resetRangeOr]\n  };\n\n  if (isEnroll) {\n    accounts.users.update(_objectSpread(_objectSpread({}, userFilter), expireFilter), {\n      $unset: {\n        \"services.password.enroll\": \"\"\n      }\n    }, {\n      multi: true\n    });\n  } else {\n    accounts.users.update(_objectSpread(_objectSpread({}, userFilter), expireFilter), {\n      $unset: {\n        \"services.password.reset\": \"\"\n      }\n    }, {\n      multi: true\n    });\n  }\n};\n\nconst setExpireTokensInterval = accounts => {\n  accounts.expireTokenInterval = Meteor.setInterval(() => {\n    accounts._expireTokens();\n\n    accounts._expirePasswordResetTokens();\n\n    accounts._expirePasswordEnrollTokens();\n  }, EXPIRE_TOKENS_INTERVAL_MS);\n}; ///\n/// OAuth Encryption Support\n///\n\n\nconst OAuthEncryption = Package[\"oauth-encryption\"] && Package[\"oauth-encryption\"].OAuthEncryption;\n\nconst usingOAuthEncryption = () => {\n  return OAuthEncryption && OAuthEncryption.keyIsLoaded();\n}; // OAuth service data is temporarily stored in the pending credentials\n// collection during the oauth authentication process.  Sensitive data\n// such as access tokens are encrypted without the user id because\n// we don't know the user id yet.  We re-encrypt these fields with the\n// user id included when storing the service data permanently in\n// the users collection.\n//\n\n\nconst pinEncryptedFieldsToUser = (serviceData, userId) => {\n  Object.keys(serviceData).forEach(key => {\n    let value = serviceData[key];\n    if (OAuthEncryption && OAuthEncryption.isSealed(value)) value = OAuthEncryption.seal(OAuthEncryption.open(value), userId);\n    serviceData[key] = value;\n  });\n}; // Encrypt unencrypted login service secrets when oauth-encryption is\n// added.\n//\n// XXX For the oauthSecretKey to be available here at startup, the\n// developer must call Accounts.config({oauthSecretKey: ...}) at load\n// time, instead of in a Meteor.startup block, because the startup\n// block in the app code will run after this accounts-base startup\n// block.  Perhaps we need a post-startup callback?\n\n\nMeteor.startup(() => {\n  if (!usingOAuthEncryption()) {\n    return;\n  }\n\n  const {\n    ServiceConfiguration\n  } = Package['service-configuration'];\n  ServiceConfiguration.configurations.find({\n    $and: [{\n      secret: {\n        $exists: true\n      }\n    }, {\n      \"secret.algorithm\": {\n        $exists: false\n      }\n    }]\n  }).forEach(config => {\n    ServiceConfiguration.configurations.update(config._id, {\n      $set: {\n        secret: OAuthEncryption.seal(config.secret)\n      }\n    });\n  });\n}); // XXX see comment on Accounts.createUser in passwords_server about adding a\n// second \"server options\" argument.\n\nconst defaultCreateUserHook = (options, user) => {\n  if (options.profile) user.profile = options.profile;\n  return user;\n}; // Validate new user's email or Google/Facebook/GitHub account's email\n\n\nfunction defaultValidateNewUserHook(user) {\n  const domain = this._options.restrictCreationByEmailDomain;\n\n  if (!domain) {\n    return true;\n  }\n\n  let emailIsGood = false;\n\n  if (user.emails && user.emails.length > 0) {\n    emailIsGood = user.emails.reduce((prev, email) => prev || this._testEmailDomain(email.address), false);\n  } else if (user.services && Object.values(user.services).length > 0) {\n    // Find any email of any service and check it\n    emailIsGood = Object.values(user.services).reduce((prev, service) => service.email && this._testEmailDomain(service.email), false);\n  }\n\n  if (emailIsGood) {\n    return true;\n  }\n\n  if (typeof domain === 'string') {\n    throw new Meteor.Error(403, \"@\".concat(domain, \" email required\"));\n  } else {\n    throw new Meteor.Error(403, \"Email doesn't match the criteria.\");\n  }\n}\n\nconst setupUsersCollection = users => {\n  ///\n  /// RESTRICTING WRITES TO USER OBJECTS\n  ///\n  users.allow({\n    // clients can modify the profile field of their own document, and\n    // nothing else.\n    update: (userId, user, fields, modifier) => {\n      // make sure it is our record\n      if (user._id !== userId) {\n        return false;\n      } // user can only modify the 'profile' field. sets to multiple\n      // sub-keys (eg profile.foo and profile.bar) are merged into entry\n      // in the fields list.\n\n\n      if (fields.length !== 1 || fields[0] !== 'profile') {\n        return false;\n      }\n\n      return true;\n    },\n    fetch: ['_id'] // we only look at _id.\n\n  }); /// DEFAULT INDEXES ON USERS\n\n  users._ensureIndex('username', {\n    unique: true,\n    sparse: true\n  });\n\n  users._ensureIndex('emails.address', {\n    unique: true,\n    sparse: true\n  });\n\n  users._ensureIndex('services.resume.loginTokens.hashedToken', {\n    unique: true,\n    sparse: true\n  });\n\n  users._ensureIndex('services.resume.loginTokens.token', {\n    unique: true,\n    sparse: true\n  }); // For taking care of logoutOtherClients calls that crashed before the\n  // tokens were deleted.\n\n\n  users._ensureIndex('services.resume.haveLoginTokensToDelete', {\n    sparse: true\n  }); // For expiring login tokens\n\n\n  users._ensureIndex(\"services.resume.loginTokens.when\", {\n    sparse: true\n  }); // For expiring password tokens\n\n\n  users._ensureIndex('services.password.reset.when', {\n    sparse: true\n  });\n};","map":{"version":3,"sources":["packages/accounts-base/accounts_server.js"],"names":["_objectWithoutProperties","module","link","default","v","_objectSpread","export","AccountsServer","crypto","AccountsCommon","EXPIRE_TOKENS_INTERVAL_MS","CONNECTION_CLOSE_DELAY_MS","URL","hasOwn","Object","prototype","hasOwnProperty","constructor","server","_server","Meteor","_initServerMethods","_initAccountDataHooks","_autopublishFields","loggedInUser","otherUsers","_defaultPublishFields","projection","profile","username","emails","_initServerPublications","_accountData","_userObservesForConnections","_nextUserObserveNumber","_loginHandlers","setupUsersCollection","users","setupDefaultLoginHandlers","setExpireTokensInterval","_validateLoginHook","Hook","bindEnvironment","_validateNewUserHooks","defaultValidateNewUserHook","bind","_deleteSavedTokensForAllUsersOnStartup","_skipCaseInsensitiveChecksForTest","urls","resetPassword","token","extraParams","buildEmailUrl","verifyEmail","enrollAccount","addDefaultRateLimit","path","url","absoluteUrl","params","entries","length","key","value","searchParams","append","toString","userId","currentInvocation","DDP","_CurrentMethodInvocation","get","_CurrentPublicationInvocation","Error","validateLoginAttempt","func","register","validateNewUser","push","beforeExternalLogin","_beforeExternalLoginHook","onCreateUser","_onCreateUserHook","onExternalLogin","_onExternalLoginHook","setAdditionalFindUserOnExternalLogin","_additionalFindUserOnExternalLogin","_validateLogin","connection","attempt","each","callback","ret","cloneAttemptWithConnection","e","allowed","error","_successfulLogin","_onLoginHook","_failedLogin","_onLoginFailureHook","_successfulLogout","user","_onLogoutHook","findOne","fields","_options","defaultFieldSelector","_loginUser","methodInvocation","stampedLoginToken","_generateStampedLoginToken","_insertLoginToken","_noYieldsAllowed","_setLoginToken","_hashLoginToken","setUserId","id","tokenExpires","_tokenExpiration","when","_attemptLogin","methodName","methodArgs","result","type","methodArguments","Array","from","options","_loginMethod","fn","tryLoginMethod","_reportLoginFailure","registerLoginHandler","name","handler","_runLoginHandlers","call","undefined","destroyToken","loginToken","update","$pull","$or","hashedToken","accounts","methods","login","check","arguments","logout","_getLoginToken","getNewToken","currentHashedToken","currentStampedToken","services","resume","loginTokens","find","stampedToken","newStampedToken","removeOtherTokens","currentToken","$ne","configureLoginService","Match","ObjectIncluding","service","String","oauth","serviceNames","includes","ServiceConfiguration","Package","configurations","usingOAuthEncryption","secret","OAuthEncryption","seal","insert","onConnection","onClose","_removeTokenFromConnection","publish","is_auto","startup","_id","autopublish","toFieldSelector","reduce","prev","field","selector","addAutopublishFields","opts","apply","forLoggedInUser","forOtherUsers","setDefaultPublishFields","_getAccountData","connectionId","data","_setAccountData","hash","createHash","digest","_hashStampedToken","hashedStampedToken","_insertHashedLoginToken","query","$addToSet","_clearAllLoginTokens","$set","_getUserObserve","observe","stop","newToken","myObserveNumber","defer","foundMatchingUser","observeChanges","added","removed","close","nonMutatingCallbacks","Random","Date","_expirePasswordResetTokens","oldestValidDate","tokenLifetimeMs","_getPasswordResetTokenLifetimeMs","tokenFilter","$exists","expirePasswordToken","_expirePasswordEnrollTokens","_getPasswordEnrollTokenLifetimeMs","_expireTokens","_getTokenLifetimeMs","userFilter","$lt","multi","config","superResult","loginExpirationInDays","expireTokenInterval","clearInterval","insertUserDoc","createdAt","keys","forEach","pinEncryptedFieldsToUser","fullUser","defaultCreateUserHook","hook","errmsg","_testEmailDomain","email","domain","restrictCreationByEmailDomain","RegExp","_escapeRegExp","test","_deleteSavedTokensForUser","tokensToDelete","$unset","$pullAll","loginTokensToDelete","updateOrCreateUserFromExternalService","serviceName","serviceData","serviceIdKey","isNaN","parseInt","setAttrs","removeDefaultRateLimit","resp","DDPRateLimiter","removeRule","defaultRateLimiterRuleId","addRule","clientAddress","clonedAttempt","EJSON","clone","defaultResumeLoginHandler","oldUnhashedStyleToken","isEnroll","resetRangeOr","expireFilter","$and","setInterval","keyIsLoaded","isSealed","open","emailIsGood","address","values","allow","modifier","fetch","_ensureIndex","unique","sparse"],"mappings":"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","sourcesContent":["import crypto from 'crypto';\nimport {\n  AccountsCommon,\n  EXPIRE_TOKENS_INTERVAL_MS,\n  CONNECTION_CLOSE_DELAY_MS\n} from './accounts_common.js';\nimport { URL } from 'meteor/url';\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\n/**\n * @summary Constructor for the `Accounts` namespace on the server.\n * @locus Server\n * @class AccountsServer\n * @extends AccountsCommon\n * @instancename accountsServer\n * @param {Object} server A server object such as `Meteor.server`.\n */\nexport class AccountsServer extends AccountsCommon {\n  // Note that this constructor is less likely to be instantiated multiple\n  // times than the `AccountsClient` constructor, because a single server\n  // can provide only one set of methods.\n  constructor(server) {\n    super();\n\n    this._server = server || Meteor.server;\n    // Set up the server's methods, as if by calling Meteor.methods.\n    this._initServerMethods();\n\n    this._initAccountDataHooks();\n\n    // If autopublish is on, publish these user fields. Login service\n    // packages (eg accounts-google) add to these by calling\n    // addAutopublishFields.  Notably, this isn't implemented with multiple\n    // publishes since DDP only merges only across top-level fields, not\n    // subfields (such as 'services.facebook.accessToken')\n    this._autopublishFields = {\n      loggedInUser: ['profile', 'username', 'emails'],\n      otherUsers: ['profile', 'username']\n    };\n\n    // use object to keep the reference when used in functions\n    // where _defaultPublishFields is destructured into lexical scope\n    // for publish callbacks that need `this`\n    this._defaultPublishFields = {\n      projection: {\n        profile: 1,\n        username: 1,\n        emails: 1,\n      }\n    };\n\n    this._initServerPublications();\n\n    // connectionId -> {connection, loginToken}\n    this._accountData = {};\n\n    // connection id -> observe handle for the login token that this connection is\n    // currently associated with, or a number. The number indicates that we are in\n    // the process of setting up the observe (using a number instead of a single\n    // sentinel allows multiple attempts to set up the observe to identify which\n    // one was theirs).\n    this._userObservesForConnections = {};\n    this._nextUserObserveNumber = 1;  // for the number described above.\n\n    // list of all registered handlers.\n    this._loginHandlers = [];\n\n    setupUsersCollection(this.users);\n    setupDefaultLoginHandlers(this);\n    setExpireTokensInterval(this);\n\n    this._validateLoginHook = new Hook({ bindEnvironment: false });\n    this._validateNewUserHooks = [\n      defaultValidateNewUserHook.bind(this)\n    ];\n\n    this._deleteSavedTokensForAllUsersOnStartup();\n\n    this._skipCaseInsensitiveChecksForTest = {};\n\n    this.urls = {\n      resetPassword: (token, extraParams) => this.buildEmailUrl(`#/reset-password/${token}`, extraParams),\n      verifyEmail: (token, extraParams) => this.buildEmailUrl(`#/verify-email/${token}`, extraParams),\n      enrollAccount: (token, extraParams) => this.buildEmailUrl(`#/enroll-account/${token}`, extraParams),\n    };\n\n    this.addDefaultRateLimit();\n\n    this.buildEmailUrl = (path, extraParams = {}) => {\n      const url = new URL(Meteor.absoluteUrl(path));\n      const params = Object.entries(extraParams);\n      if (params.length > 0) {\n        // Add additional parameters to the url\n        for (const [key, value] of params) {\n          url.searchParams.append(key, value);\n        }\n      }\n      return url.toString();\n    };\n  }\n\n  ///\n  /// CURRENT USER\n  ///\n\n  // @override of \"abstract\" non-implementation in accounts_common.js\n  userId() {\n    // This function only works if called inside a method or a pubication.\n    // Using any of the information from Meteor.user() in a method or\n    // publish function will always use the value from when the function first\n    // runs. This is likely not what the user expects. The way to make this work\n    // in a method or publish function is to do Meteor.find(this.userId).observe\n    // and recompute when the user record changes.\n    const currentInvocation = DDP._CurrentMethodInvocation.get() || DDP._CurrentPublicationInvocation.get();\n    if (!currentInvocation)\n      throw new Error(\"Meteor.userId can only be invoked in method calls or publications.\");\n    return currentInvocation.userId;\n  }\n\n  ///\n  /// LOGIN HOOKS\n  ///\n\n  /**\n   * @summary Validate login attempts.\n   * @locus Server\n   * @param {Function} func Called whenever a login is attempted (either successful or unsuccessful).  A login can be aborted by returning a falsy value or throwing an exception.\n   */\n  validateLoginAttempt(func) {\n    // Exceptions inside the hook callback are passed up to us.\n    return this._validateLoginHook.register(func);\n  }\n\n  /**\n   * @summary Set restrictions on new user creation.\n   * @locus Server\n   * @param {Function} func Called whenever a new user is created. Takes the new user object, and returns true to allow the creation or false to abort.\n   */\n  validateNewUser(func) {\n    this._validateNewUserHooks.push(func);\n  }\n\n  /**\n   * @summary Validate login from external service\n   * @locus Server\n   * @param {Function} func Called whenever login/user creation from external service is attempted. Login or user creation based on this login can be aborted by passing a falsy value or throwing an exception.\n   */\n  beforeExternalLogin(func) {\n    if (this._beforeExternalLoginHook) {\n      throw new Error(\"Can only call beforeExternalLogin once\");\n    }\n\n    this._beforeExternalLoginHook = func;\n  }\n\n  ///\n  /// CREATE USER HOOKS\n  ///\n\n  /**\n   * @summary Customize new user creation.\n   * @locus Server\n   * @param {Function} func Called whenever a new user is created. Return the new user object, or throw an `Error` to abort the creation.\n   */\n  onCreateUser(func) {\n    if (this._onCreateUserHook) {\n      throw new Error(\"Can only call onCreateUser once\");\n    }\n\n    this._onCreateUserHook = func;\n  }\n\n  /**\n   * @summary Customize oauth user profile updates\n   * @locus Server\n   * @param {Function} func Called whenever a user is logged in via oauth. Return the profile object to be merged, or throw an `Error` to abort the creation.\n   */\n  onExternalLogin(func) {\n    if (this._onExternalLoginHook) {\n      throw new Error(\"Can only call onExternalLogin once\");\n    }\n\n    this._onExternalLoginHook = func;\n  }\n\n  /**\n   * @summary Customize user selection on external logins\n   * @locus Server\n   * @param {Function} func Called whenever a user is logged in via oauth and a\n   * user is not found with the service id. Return the user or undefined.\n   */\n   setAdditionalFindUserOnExternalLogin(func) {\n    if (this._additionalFindUserOnExternalLogin) {\n      throw new Error(\"Can only call setAdditionalFindUserOnExternalLogin once\");\n    }\n    this._additionalFindUserOnExternalLogin = func;\n  }\n\n  _validateLogin(connection, attempt) {\n    this._validateLoginHook.each(callback => {\n      let ret;\n      try {\n        ret = callback(cloneAttemptWithConnection(connection, attempt));\n      }\n      catch (e) {\n        attempt.allowed = false;\n        // XXX this means the last thrown error overrides previous error\n        // messages. Maybe this is surprising to users and we should make\n        // overriding errors more explicit. (see\n        // https://github.com/meteor/meteor/issues/1960)\n        attempt.error = e;\n        return true;\n      }\n      if (! ret) {\n        attempt.allowed = false;\n        // don't override a specific error provided by a previous\n        // validator or the initial attempt (eg \"incorrect password\").\n        if (!attempt.error)\n          attempt.error = new Meteor.Error(403, \"Login forbidden\");\n      }\n      return true;\n    });\n  };\n\n  _successfulLogin(connection, attempt) {\n    this._onLoginHook.each(callback => {\n      callback(cloneAttemptWithConnection(connection, attempt));\n      return true;\n    });\n  };\n\n  _failedLogin(connection, attempt) {\n    this._onLoginFailureHook.each(callback => {\n      callback(cloneAttemptWithConnection(connection, attempt));\n      return true;\n    });\n  };\n\n  _successfulLogout(connection, userId) {\n    // don't fetch the user object unless there are some callbacks registered\n    let user;\n    this._onLogoutHook.each(callback => {\n      if (!user && userId) user = this.users.findOne(userId, {fields: this._options.defaultFieldSelector});\n      callback({ user, connection });\n      return true;\n    });\n  };\n\n  ///\n  /// LOGIN METHODS\n  ///\n\n  // Login methods return to the client an object containing these\n  // fields when the user was logged in successfully:\n  //\n  //   id: userId\n  //   token: *\n  //   tokenExpires: *\n  //\n  // tokenExpires is optional and intends to provide a hint to the\n  // client as to when the token will expire. If not provided, the\n  // client will call Accounts._tokenExpiration, passing it the date\n  // that it received the token.\n  //\n  // The login method will throw an error back to the client if the user\n  // failed to log in.\n  //\n  //\n  // Login handlers and service specific login methods such as\n  // `createUser` internally return a `result` object containing these\n  // fields:\n  //\n  //   type:\n  //     optional string; the service name, overrides the handler\n  //     default if present.\n  //\n  //   error:\n  //     exception; if the user is not allowed to login, the reason why.\n  //\n  //   userId:\n  //     string; the user id of the user attempting to login (if\n  //     known), required for an allowed login.\n  //\n  //   options:\n  //     optional object merged into the result returned by the login\n  //     method; used by HAMK from SRP.\n  //\n  //   stampedLoginToken:\n  //     optional object with `token` and `when` indicating the login\n  //     token is already present in the database, returned by the\n  //     \"resume\" login handler.\n  //\n  // For convenience, login methods can also throw an exception, which\n  // is converted into an {error} result.  However, if the id of the\n  // user attempting the login is known, a {userId, error} result should\n  // be returned instead since the user id is not captured when an\n  // exception is thrown.\n  //\n  // This internal `result` object is automatically converted into the\n  // public {id, token, tokenExpires} object returned to the client.\n\n  // Try a login method, converting thrown exceptions into an {error}\n  // result.  The `type` argument is a default, inserted into the result\n  // object if not explicitly returned.\n  //\n  // Log in a user on a connection.\n  //\n  // We use the method invocation to set the user id on the connection,\n  // not the connection object directly. setUserId is tied to methods to\n  // enforce clear ordering of method application (using wait methods on\n  // the client, and a no setUserId after unblock restriction on the\n  // server)\n  //\n  // The `stampedLoginToken` parameter is optional.  When present, it\n  // indicates that the login token has already been inserted into the\n  // database and doesn't need to be inserted again.  (It's used by the\n  // \"resume\" login handler).\n  _loginUser(methodInvocation, userId, stampedLoginToken) {\n    if (! stampedLoginToken) {\n      stampedLoginToken = this._generateStampedLoginToken();\n      this._insertLoginToken(userId, stampedLoginToken);\n    }\n\n    // This order (and the avoidance of yields) is important to make\n    // sure that when publish functions are rerun, they see a\n    // consistent view of the world: the userId is set and matches\n    // the login token on the connection (not that there is\n    // currently a public API for reading the login token on a\n    // connection).\n    Meteor._noYieldsAllowed(() =>\n      this._setLoginToken(\n        userId,\n        methodInvocation.connection,\n        this._hashLoginToken(stampedLoginToken.token)\n      )\n    );\n\n    methodInvocation.setUserId(userId);\n\n    return {\n      id: userId,\n      token: stampedLoginToken.token,\n      tokenExpires: this._tokenExpiration(stampedLoginToken.when)\n    };\n  };\n\n  // After a login method has completed, call the login hooks.  Note\n  // that `attemptLogin` is called for *all* login attempts, even ones\n  // which aren't successful (such as an invalid password, etc).\n  //\n  // If the login is allowed and isn't aborted by a validate login hook\n  // callback, log in the user.\n  //\n  _attemptLogin(\n    methodInvocation,\n    methodName,\n    methodArgs,\n    result\n  ) {\n    if (!result)\n      throw new Error(\"result is required\");\n\n    // XXX A programming error in a login handler can lead to this occurring, and\n    // then we don't call onLogin or onLoginFailure callbacks. Should\n    // tryLoginMethod catch this case and turn it into an error?\n    if (!result.userId && !result.error)\n      throw new Error(\"A login method must specify a userId or an error\");\n\n    let user;\n    if (result.userId)\n      user = this.users.findOne(result.userId, {fields: this._options.defaultFieldSelector});\n\n    const attempt = {\n      type: result.type || \"unknown\",\n      allowed: !! (result.userId && !result.error),\n      methodName: methodName,\n      methodArguments: Array.from(methodArgs)\n    };\n    if (result.error) {\n      attempt.error = result.error;\n    }\n    if (user) {\n      attempt.user = user;\n    }\n\n    // _validateLogin may mutate `attempt` by adding an error and changing allowed\n    // to false, but that's the only change it can make (and the user's callbacks\n    // only get a clone of `attempt`).\n    this._validateLogin(methodInvocation.connection, attempt);\n\n    if (attempt.allowed) {\n      const ret = {\n        ...this._loginUser(\n          methodInvocation,\n          result.userId,\n          result.stampedLoginToken\n        ),\n        ...result.options\n      };\n      ret.type = attempt.type;\n      this._successfulLogin(methodInvocation.connection, attempt);\n      return ret;\n    }\n    else {\n      this._failedLogin(methodInvocation.connection, attempt);\n      throw attempt.error;\n    }\n  };\n\n  // All service specific login methods should go through this function.\n  // Ensure that thrown exceptions are caught and that login hook\n  // callbacks are still called.\n  //\n  _loginMethod(\n    methodInvocation,\n    methodName,\n    methodArgs,\n    type,\n    fn\n  ) {\n    return this._attemptLogin(\n      methodInvocation,\n      methodName,\n      methodArgs,\n      tryLoginMethod(type, fn)\n    );\n  };\n\n\n  // Report a login attempt failed outside the context of a normal login\n  // method. This is for use in the case where there is a multi-step login\n  // procedure (eg SRP based password login). If a method early in the\n  // chain fails, it should call this function to report a failure. There\n  // is no corresponding method for a successful login; methods that can\n  // succeed at logging a user in should always be actual login methods\n  // (using either Accounts._loginMethod or Accounts.registerLoginHandler).\n  _reportLoginFailure(\n    methodInvocation,\n    methodName,\n    methodArgs,\n    result\n  ) {\n    const attempt = {\n      type: result.type || \"unknown\",\n      allowed: false,\n      error: result.error,\n      methodName: methodName,\n      methodArguments: Array.from(methodArgs)\n    };\n\n    if (result.userId) {\n      attempt.user = this.users.findOne(result.userId, {fields: this._options.defaultFieldSelector});\n    }\n\n    this._validateLogin(methodInvocation.connection, attempt);\n    this._failedLogin(methodInvocation.connection, attempt);\n\n    // _validateLogin may mutate attempt to set a new error message. Return\n    // the modified version.\n    return attempt;\n  };\n\n  ///\n  /// LOGIN HANDLERS\n  ///\n\n  // The main entry point for auth packages to hook in to login.\n  //\n  // A login handler is a login method which can return `undefined` to\n  // indicate that the login request is not handled by this handler.\n  //\n  // @param name {String} Optional.  The service name, used by default\n  // if a specific service name isn't returned in the result.\n  //\n  // @param handler {Function} A function that receives an options object\n  // (as passed as an argument to the `login` method) and returns one of:\n  // - `undefined`, meaning don't handle;\n  // - a login method result object\n\n  registerLoginHandler(name, handler) {\n    if (! handler) {\n      handler = name;\n      name = null;\n    }\n\n    this._loginHandlers.push({\n      name: name,\n      handler: handler\n    });\n  };\n\n\n  // Checks a user's credentials against all the registered login\n  // handlers, and returns a login token if the credentials are valid. It\n  // is like the login method, except that it doesn't set the logged-in\n  // user on the connection. Throws a Meteor.Error if logging in fails,\n  // including the case where none of the login handlers handled the login\n  // request. Otherwise, returns {id: userId, token: *, tokenExpires: *}.\n  //\n  // For example, if you want to login with a plaintext password, `options` could be\n  //   { user: { username: <username> }, password: <password> }, or\n  //   { user: { email: <email> }, password: <password> }.\n\n  // Try all of the registered login handlers until one of them doesn't\n  // return `undefined`, meaning it handled this call to `login`. Return\n  // that return value.\n  _runLoginHandlers(methodInvocation, options) {\n    for (let handler of this._loginHandlers) {\n      const result = tryLoginMethod(\n        handler.name,\n        () => handler.handler.call(methodInvocation, options)\n      );\n\n      if (result) {\n        return result;\n      }\n\n      if (result !== undefined) {\n        throw new Meteor.Error(400, \"A login handler should return a result or undefined\");\n      }\n    }\n\n    return {\n      type: null,\n      error: new Meteor.Error(400, \"Unrecognized options for login request\")\n    };\n  };\n\n  // Deletes the given loginToken from the database.\n  //\n  // For new-style hashed token, this will cause all connections\n  // associated with the token to be closed.\n  //\n  // Any connections associated with old-style unhashed tokens will be\n  // in the process of becoming associated with hashed tokens and then\n  // they'll get closed.\n  destroyToken(userId, loginToken) {\n    this.users.update(userId, {\n      $pull: {\n        \"services.resume.loginTokens\": {\n          $or: [\n            { hashedToken: loginToken },\n            { token: loginToken }\n          ]\n        }\n      }\n    });\n  };\n\n  _initServerMethods() {\n    // The methods created in this function need to be created here so that\n    // this variable is available in their scope.\n    const accounts = this;\n\n\n    // This object will be populated with methods and then passed to\n    // accounts._server.methods further below.\n    const methods = {};\n\n    // @returns {Object|null}\n    //   If successful, returns {token: reconnectToken, id: userId}\n    //   If unsuccessful (for example, if the user closed the oauth login popup),\n    //     throws an error describing the reason\n    methods.login = function (options) {\n      // Login handlers should really also check whatever field they look at in\n      // options, but we don't enforce it.\n      check(options, Object);\n\n      const result = accounts._runLoginHandlers(this, options);\n\n      return accounts._attemptLogin(this, \"login\", arguments, result);\n    };\n\n    methods.logout = function () {\n      const token = accounts._getLoginToken(this.connection.id);\n      accounts._setLoginToken(this.userId, this.connection, null);\n      if (token && this.userId) {\n        accounts.destroyToken(this.userId, token);\n      }\n      accounts._successfulLogout(this.connection, this.userId);\n      this.setUserId(null);\n    };\n\n    // Generates a new login token with the same expiration as the\n    // connection's current token and saves it to the database. Associates\n    // the connection with this new token and returns it. Throws an error\n    // if called on a connection that isn't logged in.\n    //\n    // @returns Object\n    //   If successful, returns { token: <new token>, id: <user id>,\n    //   tokenExpires: <expiration date> }.\n    methods.getNewToken = function () {\n      const user = accounts.users.findOne(this.userId, {\n        fields: { \"services.resume.loginTokens\": 1 }\n      });\n      if (! this.userId || ! user) {\n        throw new Meteor.Error(\"You are not logged in.\");\n      }\n      // Be careful not to generate a new token that has a later\n      // expiration than the curren token. Otherwise, a bad guy with a\n      // stolen token could use this method to stop his stolen token from\n      // ever expiring.\n      const currentHashedToken = accounts._getLoginToken(this.connection.id);\n      const currentStampedToken = user.services.resume.loginTokens.find(\n        stampedToken => stampedToken.hashedToken === currentHashedToken\n      );\n      if (! currentStampedToken) { // safety belt: this should never happen\n        throw new Meteor.Error(\"Invalid login token\");\n      }\n      const newStampedToken = accounts._generateStampedLoginToken();\n      newStampedToken.when = currentStampedToken.when;\n      accounts._insertLoginToken(this.userId, newStampedToken);\n      return accounts._loginUser(this, this.userId, newStampedToken);\n    };\n\n    // Removes all tokens except the token associated with the current\n    // connection. Throws an error if the connection is not logged\n    // in. Returns nothing on success.\n    methods.removeOtherTokens = function () {\n      if (! this.userId) {\n        throw new Meteor.Error(\"You are not logged in.\");\n      }\n      const currentToken = accounts._getLoginToken(this.connection.id);\n      accounts.users.update(this.userId, {\n        $pull: {\n          \"services.resume.loginTokens\": { hashedToken: { $ne: currentToken } }\n        }\n      });\n    };\n\n    // Allow a one-time configuration for a login service. Modifications\n    // to this collection are also allowed in insecure mode.\n    methods.configureLoginService = (options) => {\n      check(options, Match.ObjectIncluding({service: String}));\n      // Don't let random users configure a service we haven't added yet (so\n      // that when we do later add it, it's set up with their configuration\n      // instead of ours).\n      // XXX if service configuration is oauth-specific then this code should\n      //     be in accounts-oauth; if it's not then the registry should be\n      //     in this package\n      if (!(accounts.oauth\n        && accounts.oauth.serviceNames().includes(options.service))) {\n        throw new Meteor.Error(403, \"Service unknown\");\n      }\n\n      const { ServiceConfiguration } = Package['service-configuration'];\n      if (ServiceConfiguration.configurations.findOne({service: options.service}))\n        throw new Meteor.Error(403, `Service ${options.service} already configured`);\n\n      if (hasOwn.call(options, 'secret') && usingOAuthEncryption())\n        options.secret = OAuthEncryption.seal(options.secret);\n\n      ServiceConfiguration.configurations.insert(options);\n    };\n\n    accounts._server.methods(methods);\n  };\n\n  _initAccountDataHooks() {\n    this._server.onConnection(connection => {\n      this._accountData[connection.id] = {\n        connection: connection\n      };\n\n      connection.onClose(() => {\n        this._removeTokenFromConnection(connection.id);\n        delete this._accountData[connection.id];\n      });\n    });\n  };\n\n  _initServerPublications() {\n    // Bring into lexical scope for publish callbacks that need `this`\n    const { users, _autopublishFields, _defaultPublishFields } = this;\n\n    // Publish all login service configuration fields other than secret.\n    this._server.publish(\"meteor.loginServiceConfiguration\", () => {\n      const { ServiceConfiguration } = Package['service-configuration'];\n      return ServiceConfiguration.configurations.find({}, {fields: {secret: 0}});\n    }, {is_auto: true}); // not technically autopublish, but stops the warning.\n\n    // Use Meteor.startup to give other packages a chance to call\n    // setDefaultPublishFields.\n    Meteor.startup(() => {\n      // Publish the current user's record to the client.\n      this._server.publish(null, function () {\n        if (this.userId) {\n          return users.find({\n            _id: this.userId\n          }, {\n            fields: _defaultPublishFields.projection,\n          });\n        } else {\n          return null;\n        }\n      }, /*suppress autopublish warning*/{is_auto: true});\n    });\n\n    // Use Meteor.startup to give other packages a chance to call\n    // addAutopublishFields.\n    Package.autopublish && Meteor.startup(() => {\n      // ['profile', 'username'] -> {profile: 1, username: 1}\n      const toFieldSelector = fields => fields.reduce((prev, field) => (\n          { ...prev, [field]: 1 }),\n        {}\n      );\n      this._server.publish(null, function () {\n        if (this.userId) {\n          return users.find({ _id: this.userId }, {\n            fields: toFieldSelector(_autopublishFields.loggedInUser),\n          })\n        } else {\n          return null;\n        }\n      }, /*suppress autopublish warning*/{is_auto: true});\n\n      // XXX this publish is neither dedup-able nor is it optimized by our special\n      // treatment of queries on a specific _id. Therefore this will have O(n^2)\n      // run-time performance every time a user document is changed (eg someone\n      // logging in). If this is a problem, we can instead write a manual publish\n      // function which filters out fields based on 'this.userId'.\n      this._server.publish(null, function () {\n        const selector = this.userId ? { _id: { $ne: this.userId } } : {};\n        return users.find(selector, {\n          fields: toFieldSelector(_autopublishFields.otherUsers),\n        })\n      }, /*suppress autopublish warning*/{is_auto: true});\n    });\n  };\n\n  // Add to the list of fields or subfields to be automatically\n  // published if autopublish is on. Must be called from top-level\n  // code (ie, before Meteor.startup hooks run).\n  //\n  // @param opts {Object} with:\n  //   - forLoggedInUser {Array} Array of fields published to the logged-in user\n  //   - forOtherUsers {Array} Array of fields published to users that aren't logged in\n  addAutopublishFields(opts) {\n    this._autopublishFields.loggedInUser.push.apply(\n      this._autopublishFields.loggedInUser, opts.forLoggedInUser);\n    this._autopublishFields.otherUsers.push.apply(\n      this._autopublishFields.otherUsers, opts.forOtherUsers);\n  };\n\n  // Replaces the fields to be automatically\n  // published when the user logs in\n  //\n  // @param {MongoFieldSpecifier} fields Dictionary of fields to return or exclude.\n  setDefaultPublishFields(fields) {\n    this._defaultPublishFields.projection = fields;\n  };\n\n  ///\n  /// ACCOUNT DATA\n  ///\n\n  // HACK: This is used by 'meteor-accounts' to get the loginToken for a\n  // connection. Maybe there should be a public way to do that.\n  _getAccountData(connectionId, field) {\n    const data = this._accountData[connectionId];\n    return data && data[field];\n  };\n\n  _setAccountData(connectionId, field, value) {\n    const data = this._accountData[connectionId];\n\n    // safety belt. shouldn't happen. accountData is set in onConnection,\n    // we don't have a connectionId until it is set.\n    if (!data)\n      return;\n\n    if (value === undefined)\n      delete data[field];\n    else\n      data[field] = value;\n  };\n\n  ///\n  /// RECONNECT TOKENS\n  ///\n  /// support reconnecting using a meteor login token\n\n  _hashLoginToken(loginToken) {\n    const hash = crypto.createHash('sha256');\n    hash.update(loginToken);\n    return hash.digest('base64');\n  };\n\n  // {token, when} => {hashedToken, when}\n  _hashStampedToken(stampedToken) {\n    const { token, ...hashedStampedToken } = stampedToken;\n    return {\n      ...hashedStampedToken,\n      hashedToken: this._hashLoginToken(token)\n    };\n  };\n\n  // Using $addToSet avoids getting an index error if another client\n  // logging in simultaneously has already inserted the new hashed\n  // token.\n  _insertHashedLoginToken(userId, hashedToken, query) {\n    query = query ? { ...query } : {};\n    query._id = userId;\n    this.users.update(query, {\n      $addToSet: {\n        \"services.resume.loginTokens\": hashedToken\n      }\n    });\n  };\n\n  // Exported for tests.\n  _insertLoginToken(userId, stampedToken, query) {\n    this._insertHashedLoginToken(\n      userId,\n      this._hashStampedToken(stampedToken),\n      query\n    );\n  };\n\n  _clearAllLoginTokens(userId) {\n    this.users.update(userId, {\n      $set: {\n        'services.resume.loginTokens': []\n      }\n    });\n  };\n\n  // test hook\n  _getUserObserve(connectionId) {\n    return this._userObservesForConnections[connectionId];\n  };\n\n  // Clean up this connection's association with the token: that is, stop\n  // the observe that we started when we associated the connection with\n  // this token.\n  _removeTokenFromConnection(connectionId) {\n    if (hasOwn.call(this._userObservesForConnections, connectionId)) {\n      const observe = this._userObservesForConnections[connectionId];\n      if (typeof observe === 'number') {\n        // We're in the process of setting up an observe for this connection. We\n        // can't clean up that observe yet, but if we delete the placeholder for\n        // this connection, then the observe will get cleaned up as soon as it has\n        // been set up.\n        delete this._userObservesForConnections[connectionId];\n      } else {\n        delete this._userObservesForConnections[connectionId];\n        observe.stop();\n      }\n    }\n  };\n\n  _getLoginToken(connectionId) {\n    return this._getAccountData(connectionId, 'loginToken');\n  };\n\n  // newToken is a hashed token.\n  _setLoginToken(userId, connection, newToken) {\n    this._removeTokenFromConnection(connection.id);\n    this._setAccountData(connection.id, 'loginToken', newToken);\n\n    if (newToken) {\n      // Set up an observe for this token. If the token goes away, we need\n      // to close the connection.  We defer the observe because there's\n      // no need for it to be on the critical path for login; we just need\n      // to ensure that the connection will get closed at some point if\n      // the token gets deleted.\n      //\n      // Initially, we set the observe for this connection to a number; this\n      // signifies to other code (which might run while we yield) that we are in\n      // the process of setting up an observe for this connection. Once the\n      // observe is ready to go, we replace the number with the real observe\n      // handle (unless the placeholder has been deleted or replaced by a\n      // different placehold number, signifying that the connection was closed\n      // already -- in this case we just clean up the observe that we started).\n      const myObserveNumber = ++this._nextUserObserveNumber;\n      this._userObservesForConnections[connection.id] = myObserveNumber;\n      Meteor.defer(() => {\n        // If something else happened on this connection in the meantime (it got\n        // closed, or another call to _setLoginToken happened), just do\n        // nothing. We don't need to start an observe for an old connection or old\n        // token.\n        if (this._userObservesForConnections[connection.id] !== myObserveNumber) {\n          return;\n        }\n\n        let foundMatchingUser;\n        // Because we upgrade unhashed login tokens to hashed tokens at\n        // login time, sessions will only be logged in with a hashed\n        // token. Thus we only need to observe hashed tokens here.\n        const observe = this.users.find({\n          _id: userId,\n          'services.resume.loginTokens.hashedToken': newToken\n        }, { fields: { _id: 1 } }).observeChanges({\n          added: () => {\n            foundMatchingUser = true;\n          },\n          removed: connection.close,\n          // The onClose callback for the connection takes care of\n          // cleaning up the observe handle and any other state we have\n          // lying around.\n        }, { nonMutatingCallbacks: true });\n\n        // If the user ran another login or logout command we were waiting for the\n        // defer or added to fire (ie, another call to _setLoginToken occurred),\n        // then we let the later one win (start an observe, etc) and just stop our\n        // observe now.\n        //\n        // Similarly, if the connection was already closed, then the onClose\n        // callback would have called _removeTokenFromConnection and there won't\n        // be an entry in _userObservesForConnections. We can stop the observe.\n        if (this._userObservesForConnections[connection.id] !== myObserveNumber) {\n          observe.stop();\n          return;\n        }\n\n        this._userObservesForConnections[connection.id] = observe;\n\n        if (! foundMatchingUser) {\n          // We've set up an observe on the user associated with `newToken`,\n          // so if the new token is removed from the database, we'll close\n          // the connection. But the token might have already been deleted\n          // before we set up the observe, which wouldn't have closed the\n          // connection because the observe wasn't running yet.\n          connection.close();\n        }\n      });\n    }\n  };\n\n  // (Also used by Meteor Accounts server and tests).\n  //\n  _generateStampedLoginToken() {\n    return {\n      token: Random.secret(),\n      when: new Date\n    };\n  };\n\n  ///\n  /// TOKEN EXPIRATION\n  ///\n\n  // Deletes expired password reset tokens from the database.\n  //\n  // Exported for tests. Also, the arguments are only used by\n  // tests. oldestValidDate is simulate expiring tokens without waiting\n  // for them to actually expire. userId is used by tests to only expire\n  // tokens for the test user.\n  _expirePasswordResetTokens(oldestValidDate, userId) {\n    const tokenLifetimeMs = this._getPasswordResetTokenLifetimeMs();\n\n    // when calling from a test with extra arguments, you must specify both!\n    if ((oldestValidDate && !userId) || (!oldestValidDate && userId)) {\n      throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n    }\n\n    oldestValidDate = oldestValidDate ||\n      (new Date(new Date() - tokenLifetimeMs));\n\n    const tokenFilter = {\n      $or: [\n        { \"services.password.reset.reason\": \"reset\"},\n        { \"services.password.reset.reason\": {$exists: false}}\n      ]\n    };\n\n    expirePasswordToken(this, oldestValidDate, tokenFilter, userId);\n  }\n\n  // Deletes expired password enroll tokens from the database.\n  //\n  // Exported for tests. Also, the arguments are only used by\n  // tests. oldestValidDate is simulate expiring tokens without waiting\n  // for them to actually expire. userId is used by tests to only expire\n  // tokens for the test user.\n  _expirePasswordEnrollTokens(oldestValidDate, userId) {\n    const tokenLifetimeMs = this._getPasswordEnrollTokenLifetimeMs();\n\n    // when calling from a test with extra arguments, you must specify both!\n    if ((oldestValidDate && !userId) || (!oldestValidDate && userId)) {\n      throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n    }\n\n    oldestValidDate = oldestValidDate ||\n      (new Date(new Date() - tokenLifetimeMs));\n\n    const tokenFilter = {\n      \"services.password.enroll.reason\": \"enroll\"\n    };\n\n    expirePasswordToken(this, oldestValidDate, tokenFilter, userId);\n  }\n\n  // Deletes expired tokens from the database and closes all open connections\n  // associated with these tokens.\n  //\n  // Exported for tests. Also, the arguments are only used by\n  // tests. oldestValidDate is simulate expiring tokens without waiting\n  // for them to actually expire. userId is used by tests to only expire\n  // tokens for the test user.\n  _expireTokens(oldestValidDate, userId) {\n    const tokenLifetimeMs = this._getTokenLifetimeMs();\n\n    // when calling from a test with extra arguments, you must specify both!\n    if ((oldestValidDate && !userId) || (!oldestValidDate && userId)) {\n      throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n    }\n\n    oldestValidDate = oldestValidDate ||\n      (new Date(new Date() - tokenLifetimeMs));\n    const userFilter = userId ? {_id: userId} : {};\n\n\n    // Backwards compatible with older versions of meteor that stored login token\n    // timestamps as numbers.\n    this.users.update({ ...userFilter,\n      $or: [\n        { \"services.resume.loginTokens.when\": { $lt: oldestValidDate } },\n        { \"services.resume.loginTokens.when\": { $lt: +oldestValidDate } }\n      ]\n    }, {\n      $pull: {\n        \"services.resume.loginTokens\": {\n          $or: [\n            { when: { $lt: oldestValidDate } },\n            { when: { $lt: +oldestValidDate } }\n          ]\n        }\n      }\n    }, { multi: true });\n    // The observe on Meteor.users will take care of closing connections for\n    // expired tokens.\n  };\n\n  // @override from accounts_common.js\n  config(options) {\n    // Call the overridden implementation of the method.\n    const superResult = AccountsCommon.prototype.config.apply(this, arguments);\n\n    // If the user set loginExpirationInDays to null, then we need to clear the\n    // timer that periodically expires tokens.\n    if (hasOwn.call(this._options, 'loginExpirationInDays') &&\n      this._options.loginExpirationInDays === null &&\n      this.expireTokenInterval) {\n      Meteor.clearInterval(this.expireTokenInterval);\n      this.expireTokenInterval = null;\n    }\n\n    return superResult;\n  };\n\n  // Called by accounts-password\n  insertUserDoc(options, user) {\n    // - clone user document, to protect from modification\n    // - add createdAt timestamp\n    // - prepare an _id, so that you can modify other collections (eg\n    // create a first task for every new user)\n    //\n    // XXX If the onCreateUser or validateNewUser hooks fail, we might\n    // end up having modified some other collection\n    // inappropriately. The solution is probably to have onCreateUser\n    // accept two callbacks - one that gets called before inserting\n    // the user document (in which you can modify its contents), and\n    // one that gets called after (in which you should change other\n    // collections)\n    user = {\n      createdAt: new Date(),\n      _id: Random.id(),\n      ...user,\n    };\n\n    if (user.services) {\n      Object.keys(user.services).forEach(service =>\n        pinEncryptedFieldsToUser(user.services[service], user._id)\n      );\n    }\n\n    let fullUser;\n    if (this._onCreateUserHook) {\n      fullUser = this._onCreateUserHook(options, user);\n\n      // This is *not* part of the API. We need this because we can't isolate\n      // the global server environment between tests, meaning we can't test\n      // both having a create user hook set and not having one set.\n      if (fullUser === 'TEST DEFAULT HOOK')\n        fullUser = defaultCreateUserHook(options, user);\n    } else {\n      fullUser = defaultCreateUserHook(options, user);\n    }\n\n    this._validateNewUserHooks.forEach(hook => {\n      if (! hook(fullUser))\n        throw new Meteor.Error(403, \"User validation failed\");\n    });\n\n    let userId;\n    try {\n      userId = this.users.insert(fullUser);\n    } catch (e) {\n      // XXX string parsing sucks, maybe\n      // https://jira.mongodb.org/browse/SERVER-3069 will get fixed one day\n      // https://jira.mongodb.org/browse/SERVER-4637\n      if (!e.errmsg) throw e;\n      if (e.errmsg.includes('emails.address'))\n        throw new Meteor.Error(403, \"Email already exists.\");\n      if (e.errmsg.includes('username'))\n        throw new Meteor.Error(403, \"Username already exists.\");\n      throw e;\n    }\n    return userId;\n  };\n\n  // Helper function: returns false if email does not match company domain from\n  // the configuration.\n  _testEmailDomain(email) {\n    const domain = this._options.restrictCreationByEmailDomain;\n\n    return !domain ||\n      (typeof domain === 'function' && domain(email)) ||\n      (typeof domain === 'string' &&\n        (new RegExp(`@${Meteor._escapeRegExp(domain)}$`, 'i')).test(email));\n  };\n\n  ///\n  /// CLEAN UP FOR `logoutOtherClients`\n  ///\n\n  _deleteSavedTokensForUser(userId, tokensToDelete) {\n    if (tokensToDelete) {\n      this.users.update(userId, {\n        $unset: {\n          \"services.resume.haveLoginTokensToDelete\": 1,\n          \"services.resume.loginTokensToDelete\": 1\n        },\n        $pullAll: {\n          \"services.resume.loginTokens\": tokensToDelete\n        }\n      });\n    }\n  };\n\n  _deleteSavedTokensForAllUsersOnStartup() {\n    // If we find users who have saved tokens to delete on startup, delete\n    // them now. It's possible that the server could have crashed and come\n    // back up before new tokens are found in localStorage, but this\n    // shouldn't happen very often. We shouldn't put a delay here because\n    // that would give a lot of power to an attacker with a stolen login\n    // token and the ability to crash the server.\n    Meteor.startup(() => {\n      this.users.find({\n        \"services.resume.haveLoginTokensToDelete\": true\n      }, {fields: {\n        \"services.resume.loginTokensToDelete\": 1\n      }}).forEach(user => {\n        this._deleteSavedTokensForUser(\n          user._id,\n          user.services.resume.loginTokensToDelete\n        );\n      });\n    });\n  };\n\n  ///\n  /// MANAGING USER OBJECTS\n  ///\n\n  // Updates or creates a user after we authenticate with a 3rd party.\n  //\n  // @param serviceName {String} Service name (eg, twitter).\n  // @param serviceData {Object} Data to store in the user's record\n  //        under services[serviceName]. Must include an \"id\" field\n  //        which is a unique identifier for the user in the service.\n  // @param options {Object, optional} Other options to pass to insertUserDoc\n  //        (eg, profile)\n  // @returns {Object} Object with token and id keys, like the result\n  //        of the \"login\" method.\n  //\n  updateOrCreateUserFromExternalService(\n    serviceName,\n    serviceData,\n    options\n  ) {\n    options = { ...options };\n\n    if (serviceName === \"password\" || serviceName === \"resume\") {\n      throw new Error(\n        \"Can't use updateOrCreateUserFromExternalService with internal service \"\n        + serviceName);\n    }\n    if (!hasOwn.call(serviceData, 'id')) {\n      throw new Error(\n        `Service data for service ${serviceName} must include id`);\n    }\n\n    // Look for a user with the appropriate service user id.\n    const selector = {};\n    const serviceIdKey = `services.${serviceName}.id`;\n\n    // XXX Temporary special case for Twitter. (Issue #629)\n    //   The serviceData.id will be a string representation of an integer.\n    //   We want it to match either a stored string or int representation.\n    //   This is to cater to earlier versions of Meteor storing twitter\n    //   user IDs in number form, and recent versions storing them as strings.\n    //   This can be removed once migration technology is in place, and twitter\n    //   users stored with integer IDs have been migrated to string IDs.\n    if (serviceName === \"twitter\" && !isNaN(serviceData.id)) {\n      selector[\"$or\"] = [{},{}];\n      selector[\"$or\"][0][serviceIdKey] = serviceData.id;\n      selector[\"$or\"][1][serviceIdKey] = parseInt(serviceData.id, 10);\n    } else {\n      selector[serviceIdKey] = serviceData.id;\n    }\n\n    let user = this.users.findOne(selector, {fields: this._options.defaultFieldSelector});\n\n    // Check to see if the developer has a custom way to find the user outside\n    // of the general selectors above.\n    if (!user && this._additionalFindUserOnExternalLogin) {\n      user = this._additionalFindUserOnExternalLogin({serviceName, serviceData, options})\n    }\n\n    // Before continuing, run user hook to see if we should continue\n    if (this._beforeExternalLoginHook && !this._beforeExternalLoginHook(serviceName, serviceData, user)) {\n      throw new Meteor.Error(403, \"Login forbidden\");\n    }\n\n    // When creating a new user we pass through all options. When updating an\n    // existing user, by default we only process/pass through the serviceData\n    // (eg, so that we keep an unexpired access token and don't cache old email\n    // addresses in serviceData.email). The onExternalLogin hook can be used when\n    // creating or updating a user, to modify or pass through more options as\n    // needed.\n    let opts = user ? {} : options;\n    if (this._onExternalLoginHook) {\n      opts = this._onExternalLoginHook(options, user);\n    }\n\n    if (user) {\n      pinEncryptedFieldsToUser(serviceData, user._id);\n\n      let setAttrs = {};\n      Object.keys(serviceData).forEach(key =>\n        setAttrs[`services.${serviceName}.${key}`] = serviceData[key]\n      );\n\n      // XXX Maybe we should re-use the selector above and notice if the update\n      //     touches nothing?\n      setAttrs = { ...setAttrs, ...opts };\n      this.users.update(user._id, {\n        $set: setAttrs\n      });\n\n      return {\n        type: serviceName,\n        userId: user._id\n      };\n    } else {\n      // Create a new user with the service data.\n      user = {services: {}};\n      user.services[serviceName] = serviceData;\n      return {\n        type: serviceName,\n        userId: this.insertUserDoc(opts, user)\n      };\n    }\n  };\n\n  // Removes default rate limiting rule\n  removeDefaultRateLimit() {\n    const resp = DDPRateLimiter.removeRule(this.defaultRateLimiterRuleId);\n    this.defaultRateLimiterRuleId = null;\n    return resp;\n  };\n\n  // Add a default rule of limiting logins, creating new users and password reset\n  // to 5 times every 10 seconds per connection.\n  addDefaultRateLimit() {\n    if (!this.defaultRateLimiterRuleId) {\n      this.defaultRateLimiterRuleId = DDPRateLimiter.addRule({\n        userId: null,\n        clientAddress: null,\n        type: 'method',\n        name: name => ['login', 'createUser', 'resetPassword', 'forgotPassword']\n          .includes(name),\n        connectionId: (connectionId) => true,\n      }, 5, 10000);\n    }\n  };\n\n}\n\n// Give each login hook callback a fresh cloned copy of the attempt\n// object, but don't clone the connection.\n//\nconst cloneAttemptWithConnection = (connection, attempt) => {\n  const clonedAttempt = EJSON.clone(attempt);\n  clonedAttempt.connection = connection;\n  return clonedAttempt;\n};\n\nconst tryLoginMethod = (type, fn) => {\n  let result;\n  try {\n    result = fn();\n  }\n  catch (e) {\n    result = {error: e};\n  }\n\n  if (result && !result.type && type)\n    result.type = type;\n\n  return result;\n};\n\nconst setupDefaultLoginHandlers = accounts => {\n  accounts.registerLoginHandler(\"resume\", function (options) {\n    return defaultResumeLoginHandler.call(this, accounts, options);\n  });\n};\n\n// Login handler for resume tokens.\nconst defaultResumeLoginHandler = (accounts, options) => {\n  if (!options.resume)\n    return undefined;\n\n  check(options.resume, String);\n\n  const hashedToken = accounts._hashLoginToken(options.resume);\n\n  // First look for just the new-style hashed login token, to avoid\n  // sending the unhashed token to the database in a query if we don't\n  // need to.\n  let user = accounts.users.findOne(\n    {\"services.resume.loginTokens.hashedToken\": hashedToken},\n    {fields: {\"services.resume.loginTokens.$\": 1}});\n\n  if (! user) {\n    // If we didn't find the hashed login token, try also looking for\n    // the old-style unhashed token.  But we need to look for either\n    // the old-style token OR the new-style token, because another\n    // client connection logging in simultaneously might have already\n    // converted the token.\n    user = accounts.users.findOne({\n      $or: [\n        {\"services.resume.loginTokens.hashedToken\": hashedToken},\n        {\"services.resume.loginTokens.token\": options.resume}\n      ]\n    },\n    // Note: Cannot use ...loginTokens.$ positional operator with $or query.\n    {fields: {\"services.resume.loginTokens\": 1}});\n  }\n\n  if (! user)\n    return {\n      error: new Meteor.Error(403, \"You've been logged out by the server. Please log in again.\")\n    };\n\n  // Find the token, which will either be an object with fields\n  // {hashedToken, when} for a hashed token or {token, when} for an\n  // unhashed token.\n  let oldUnhashedStyleToken;\n  let token = user.services.resume.loginTokens.find(token =>\n    token.hashedToken === hashedToken\n  );\n  if (token) {\n    oldUnhashedStyleToken = false;\n  } else {\n    token = user.services.resume.loginTokens.find(token =>\n      token.token === options.resume\n    );\n    oldUnhashedStyleToken = true;\n  }\n\n  const tokenExpires = accounts._tokenExpiration(token.when);\n  if (new Date() >= tokenExpires)\n    return {\n      userId: user._id,\n      error: new Meteor.Error(403, \"Your session has expired. Please log in again.\")\n    };\n\n  // Update to a hashed token when an unhashed token is encountered.\n  if (oldUnhashedStyleToken) {\n    // Only add the new hashed token if the old unhashed token still\n    // exists (this avoids resurrecting the token if it was deleted\n    // after we read it).  Using $addToSet avoids getting an index\n    // error if another client logging in simultaneously has already\n    // inserted the new hashed token.\n    accounts.users.update(\n      {\n        _id: user._id,\n        \"services.resume.loginTokens.token\": options.resume\n      },\n      {$addToSet: {\n          \"services.resume.loginTokens\": {\n            \"hashedToken\": hashedToken,\n            \"when\": token.when\n          }\n        }}\n    );\n\n    // Remove the old token *after* adding the new, since otherwise\n    // another client trying to login between our removing the old and\n    // adding the new wouldn't find a token to login with.\n    accounts.users.update(user._id, {\n      $pull: {\n        \"services.resume.loginTokens\": { \"token\": options.resume }\n      }\n    });\n  }\n\n  return {\n    userId: user._id,\n    stampedLoginToken: {\n      token: options.resume,\n      when: token.when\n    }\n  };\n};\n\nconst expirePasswordToken = (\n  accounts,\n  oldestValidDate,\n  tokenFilter,\n  userId\n) => {\n  // boolean value used to determine if this method was called from enroll account workflow\n  let isEnroll = false;\n  const userFilter = userId ? {_id: userId} : {};\n  // check if this method was called from enroll account workflow\n  if(tokenFilter['services.password.enroll.reason']) {\n    isEnroll = true;\n  }\n  let resetRangeOr = {\n    $or: [\n      { \"services.password.reset.when\": { $lt: oldestValidDate } },\n      { \"services.password.reset.when\": { $lt: +oldestValidDate } }\n    ]\n  };\n  if(isEnroll) {\n    resetRangeOr = {\n      $or: [\n        { \"services.password.enroll.when\": { $lt: oldestValidDate } },\n        { \"services.password.enroll.when\": { $lt: +oldestValidDate } }\n      ]\n    };\n  }\n  const expireFilter = { $and: [tokenFilter, resetRangeOr] };\n  if(isEnroll) {\n    accounts.users.update({...userFilter, ...expireFilter}, {\n      $unset: {\n        \"services.password.enroll\": \"\"\n      }\n    }, { multi: true });\n  } else {\n    accounts.users.update({...userFilter, ...expireFilter}, {\n      $unset: {\n        \"services.password.reset\": \"\"\n      }\n    }, { multi: true });\n  }\n\n};\n\nconst setExpireTokensInterval = accounts => {\n  accounts.expireTokenInterval = Meteor.setInterval(() => {\n    accounts._expireTokens();\n    accounts._expirePasswordResetTokens();\n    accounts._expirePasswordEnrollTokens();\n  }, EXPIRE_TOKENS_INTERVAL_MS);\n};\n\n///\n/// OAuth Encryption Support\n///\n\nconst OAuthEncryption =\n  Package[\"oauth-encryption\"] &&\n  Package[\"oauth-encryption\"].OAuthEncryption;\n\nconst usingOAuthEncryption = () => {\n  return OAuthEncryption && OAuthEncryption.keyIsLoaded();\n};\n\n// OAuth service data is temporarily stored in the pending credentials\n// collection during the oauth authentication process.  Sensitive data\n// such as access tokens are encrypted without the user id because\n// we don't know the user id yet.  We re-encrypt these fields with the\n// user id included when storing the service data permanently in\n// the users collection.\n//\nconst pinEncryptedFieldsToUser = (serviceData, userId) => {\n  Object.keys(serviceData).forEach(key => {\n    let value = serviceData[key];\n    if (OAuthEncryption && OAuthEncryption.isSealed(value))\n      value = OAuthEncryption.seal(OAuthEncryption.open(value), userId);\n    serviceData[key] = value;\n  });\n};\n\n\n// Encrypt unencrypted login service secrets when oauth-encryption is\n// added.\n//\n// XXX For the oauthSecretKey to be available here at startup, the\n// developer must call Accounts.config({oauthSecretKey: ...}) at load\n// time, instead of in a Meteor.startup block, because the startup\n// block in the app code will run after this accounts-base startup\n// block.  Perhaps we need a post-startup callback?\n\nMeteor.startup(() => {\n  if (! usingOAuthEncryption()) {\n    return;\n  }\n\n  const { ServiceConfiguration } = Package['service-configuration'];\n\n  ServiceConfiguration.configurations.find({\n    $and: [{\n      secret: { $exists: true }\n    }, {\n      \"secret.algorithm\": { $exists: false }\n    }]\n  }).forEach(config => {\n    ServiceConfiguration.configurations.update(config._id, {\n      $set: {\n        secret: OAuthEncryption.seal(config.secret)\n      }\n    });\n  });\n});\n\n// XXX see comment on Accounts.createUser in passwords_server about adding a\n// second \"server options\" argument.\nconst defaultCreateUserHook = (options, user) => {\n  if (options.profile)\n    user.profile = options.profile;\n  return user;\n};\n\n// Validate new user's email or Google/Facebook/GitHub account's email\nfunction defaultValidateNewUserHook(user) {\n  const domain = this._options.restrictCreationByEmailDomain;\n  if (!domain) {\n    return true;\n  }\n\n  let emailIsGood = false;\n  if (user.emails && user.emails.length > 0) {\n    emailIsGood = user.emails.reduce(\n      (prev, email) => prev || this._testEmailDomain(email.address), false\n    );\n  } else if (user.services && Object.values(user.services).length > 0) {\n    // Find any email of any service and check it\n    emailIsGood = Object.values(user.services).reduce(\n      (prev, service) => service.email && this._testEmailDomain(service.email),\n      false,\n    );\n  }\n\n  if (emailIsGood) {\n    return true;\n  }\n\n  if (typeof domain === 'string') {\n    throw new Meteor.Error(403, `@${domain} email required`);\n  } else {\n    throw new Meteor.Error(403, \"Email doesn't match the criteria.\");\n  }\n}\n\nconst setupUsersCollection = users => {\n  ///\n  /// RESTRICTING WRITES TO USER OBJECTS\n  ///\n  users.allow({\n    // clients can modify the profile field of their own document, and\n    // nothing else.\n    update: (userId, user, fields, modifier) => {\n      // make sure it is our record\n      if (user._id !== userId) {\n        return false;\n      }\n\n      // user can only modify the 'profile' field. sets to multiple\n      // sub-keys (eg profile.foo and profile.bar) are merged into entry\n      // in the fields list.\n      if (fields.length !== 1 || fields[0] !== 'profile') {\n        return false;\n      }\n\n      return true;\n    },\n    fetch: ['_id'] // we only look at _id.\n  });\n\n  /// DEFAULT INDEXES ON USERS\n  users._ensureIndex('username', { unique: true, sparse: true });\n  users._ensureIndex('emails.address', { unique: true, sparse: true });\n  users._ensureIndex('services.resume.loginTokens.hashedToken',\n    { unique: true, sparse: true });\n  users._ensureIndex('services.resume.loginTokens.token',\n    { unique: true, sparse: true });\n  // For taking care of logoutOtherClients calls that crashed before the\n  // tokens were deleted.\n  users._ensureIndex('services.resume.haveLoginTokensToDelete',\n    { sparse: true });\n  // For expiring login tokens\n  users._ensureIndex(\"services.resume.loginTokens.when\", { sparse: true });\n  // For expiring password tokens\n  users._ensureIndex('services.password.reset.when', { sparse: true });\n};\n"]},"sourceType":"module","hash":"23eb917800252011ee0c84317a1ce7cf6e047b86"}
