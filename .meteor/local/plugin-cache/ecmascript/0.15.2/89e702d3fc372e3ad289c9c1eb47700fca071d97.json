{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\RUBEN\\Desktop\\meteor-vue\\packages\\accounts-password\\password_server.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.windows.x86_64"},"sourceFileName":"packages/accounts-password/password_server.js","filename":"C:\\Users\\RUBEN\\Desktop\\meteor-vue\\packages\\accounts-password\\password_server.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"C:\\Users\\RUBEN\\Desktop\\meteor-vue","root":"C:\\Users\\RUBEN\\Desktop\\meteor-vue","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.14.0","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"C:\\Users\\RUBEN\\Desktop\\meteor-vue\\packages\\accounts-password\\password_server.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/accounts-password/password_server.js"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nlet bcrypt;\nmodule.link(\"bcrypt\", {\n  default(v) {\n    bcrypt = v;\n  }\n\n}, 0);\nconst bcryptHash = Meteor.wrapAsync(bcrypt.hash);\nconst bcryptCompare = Meteor.wrapAsync(bcrypt.compare); // Utility for grabbing user\n\nconst getUserById = (id, options) => Meteor.users.findOne(id, Accounts._addDefaultFieldSelector(options)); // User records have a 'services.password.bcrypt' field on them to hold\n// their hashed passwords.\n//\n// When the client sends a password to the server, it can either be a\n// string (the plaintext password) or an object with keys 'digest' and\n// 'algorithm' (must be \"sha-256\" for now). The Meteor client always sends\n// password objects { digest: *, algorithm: \"sha-256\" }, but DDP clients\n// that don't have access to SHA can just send plaintext passwords as\n// strings.\n//\n// When the server receives a plaintext password as a string, it always\n// hashes it with SHA256 before passing it into bcrypt. When the server\n// receives a password as an object, it asserts that the algorithm is\n// \"sha-256\" and then passes the digest to bcrypt.\n\n\nAccounts._bcryptRounds = () => Accounts._options.bcryptRounds || 10; // Given a 'password' from the client, extract the string that we should\n// bcrypt. 'password' can be one of:\n//  - String (the plaintext password)\n//  - Object with 'digest' and 'algorithm' keys. 'algorithm' must be \"sha-256\".\n//\n\n\nconst getPasswordString = password => {\n  if (typeof password === \"string\") {\n    password = SHA256(password);\n  } else {\n    // 'password' is an object\n    if (password.algorithm !== \"sha-256\") {\n      throw new Error(\"Invalid password hash algorithm. \" + \"Only 'sha-256' is allowed.\");\n    }\n\n    password = password.digest;\n  }\n\n  return password;\n}; // Use bcrypt to hash the password for storage in the database.\n// `password` can be a string (in which case it will be run through\n// SHA256 before bcrypt) or an object with properties `digest` and\n// `algorithm` (in which case we bcrypt `password.digest`).\n//\n\n\nconst hashPassword = password => {\n  password = getPasswordString(password);\n  return bcryptHash(password, Accounts._bcryptRounds());\n}; // Extract the number of rounds used in the specified bcrypt hash.\n\n\nconst getRoundsFromBcryptHash = hash => {\n  let rounds;\n\n  if (hash) {\n    const hashSegments = hash.split('$');\n\n    if (hashSegments.length > 2) {\n      rounds = parseInt(hashSegments[2], 10);\n    }\n  }\n\n  return rounds;\n}; // Check whether the provided password matches the bcrypt'ed password in\n// the database user record. `password` can be a string (in which case\n// it will be run through SHA256 before bcrypt) or an object with\n// properties `digest` and `algorithm` (in which case we bcrypt\n// `password.digest`).\n//\n// The user parameter needs at least user._id and user.services\n\n\nAccounts._checkPasswordUserFields = {\n  _id: 1,\n  services: 1\n}; //\n\nAccounts._checkPassword = (user, password) => {\n  const result = {\n    userId: user._id\n  };\n  const formattedPassword = getPasswordString(password);\n  const hash = user.services.password.bcrypt;\n  const hashRounds = getRoundsFromBcryptHash(hash);\n\n  if (!bcryptCompare(formattedPassword, hash)) {\n    result.error = handleError(\"Incorrect password\", false);\n  } else if (hash && Accounts._bcryptRounds() != hashRounds) {\n    // The password checks out, but the user's bcrypt hash needs to be updated.\n    Meteor.defer(() => {\n      Meteor.users.update({\n        _id: user._id\n      }, {\n        $set: {\n          'services.password.bcrypt': bcryptHash(formattedPassword, Accounts._bcryptRounds())\n        }\n      });\n    });\n  }\n\n  return result;\n};\n\nconst checkPassword = Accounts._checkPassword; ///\n/// ERROR HANDLER\n///\n\nconst handleError = function (msg) {\n  let throwError = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  const error = new Meteor.Error(403, Accounts._options.ambiguousErrorMessages ? \"Something went wrong. Please check your credentials.\" : msg);\n\n  if (throwError) {\n    throw error;\n  }\n\n  return error;\n}; ///\n/// LOGIN\n///\n\n\nAccounts._findUserByQuery = (query, options) => {\n  let user = null;\n\n  if (query.id) {\n    // default field selector is added within getUserById()\n    user = getUserById(query.id, options);\n  } else {\n    options = Accounts._addDefaultFieldSelector(options);\n    let fieldName;\n    let fieldValue;\n\n    if (query.username) {\n      fieldName = 'username';\n      fieldValue = query.username;\n    } else if (query.email) {\n      fieldName = 'emails.address';\n      fieldValue = query.email;\n    } else {\n      throw new Error(\"shouldn't happen (validation missed something)\");\n    }\n\n    let selector = {};\n    selector[fieldName] = fieldValue;\n    user = Meteor.users.findOne(selector, options); // If user is not found, try a case insensitive lookup\n\n    if (!user) {\n      selector = selectorForFastCaseInsensitiveLookup(fieldName, fieldValue);\n      const candidateUsers = Meteor.users.find(selector, options).fetch(); // No match if multiple candidates are found\n\n      if (candidateUsers.length === 1) {\n        user = candidateUsers[0];\n      }\n    }\n  }\n\n  return user;\n};\n/**\n * @summary Finds the user with the specified username.\n * First tries to match username case sensitively; if that fails, it\n * tries case insensitively; but if more than one user matches the case\n * insensitive search, it returns null.\n * @locus Server\n * @param {String} username The username to look for\n * @param {Object} [options]\n * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n * @returns {Object} A user if found, else null\n * @importFromPackage accounts-base\n */\n\n\nAccounts.findUserByUsername = (username, options) => Accounts._findUserByQuery({\n  username\n}, options);\n/**\n * @summary Finds the user with the specified email.\n * First tries to match email case sensitively; if that fails, it\n * tries case insensitively; but if more than one user matches the case\n * insensitive search, it returns null.\n * @locus Server\n * @param {String} email The email address to look for\n * @param {Object} [options]\n * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n * @returns {Object} A user if found, else null\n * @importFromPackage accounts-base\n */\n\n\nAccounts.findUserByEmail = (email, options) => Accounts._findUserByQuery({\n  email\n}, options); // Generates a MongoDB selector that can be used to perform a fast case\n// insensitive lookup for the given fieldName and string. Since MongoDB does\n// not support case insensitive indexes, and case insensitive regex queries\n// are slow, we construct a set of prefix selectors for all permutations of\n// the first 4 characters ourselves. We first attempt to matching against\n// these, and because 'prefix expression' regex queries do use indexes (see\n// http://docs.mongodb.org/v2.6/reference/operator/query/regex/#index-use),\n// this has been found to greatly improve performance (from 1200ms to 5ms in a\n// test with 1.000.000 users).\n\n\nconst selectorForFastCaseInsensitiveLookup = (fieldName, string) => {\n  // Performance seems to improve up to 4 prefix characters\n  const prefix = string.substring(0, Math.min(string.length, 4));\n  const orClause = generateCasePermutationsForString(prefix).map(prefixPermutation => {\n    const selector = {};\n    selector[fieldName] = new RegExp(\"^\".concat(Meteor._escapeRegExp(prefixPermutation)));\n    return selector;\n  });\n  const caseInsensitiveClause = {};\n  caseInsensitiveClause[fieldName] = new RegExp(\"^\".concat(Meteor._escapeRegExp(string), \"$\"), 'i');\n  return {\n    $and: [{\n      $or: orClause\n    }, caseInsensitiveClause]\n  };\n}; // Generates permutations of all case variations of a given string.\n\n\nconst generateCasePermutationsForString = string => {\n  let permutations = [''];\n\n  for (let i = 0; i < string.length; i++) {\n    const ch = string.charAt(i);\n    permutations = [].concat(...permutations.map(prefix => {\n      const lowerCaseChar = ch.toLowerCase();\n      const upperCaseChar = ch.toUpperCase(); // Don't add unnecessary permutations when ch is not a letter\n\n      if (lowerCaseChar === upperCaseChar) {\n        return [prefix + ch];\n      } else {\n        return [prefix + lowerCaseChar, prefix + upperCaseChar];\n      }\n    }));\n  }\n\n  return permutations;\n};\n\nconst checkForCaseInsensitiveDuplicates = (fieldName, displayName, fieldValue, ownUserId) => {\n  // Some tests need the ability to add users with the same case insensitive\n  // value, hence the _skipCaseInsensitiveChecksForTest check\n  const skipCheck = Object.prototype.hasOwnProperty.call(Accounts._skipCaseInsensitiveChecksForTest, fieldValue);\n\n  if (fieldValue && !skipCheck) {\n    const matchedUsers = Meteor.users.find(selectorForFastCaseInsensitiveLookup(fieldName, fieldValue), {\n      fields: {\n        _id: 1\n      },\n      // we only need a maximum of 2 users for the logic below to work\n      limit: 2\n    }).fetch();\n\n    if (matchedUsers.length > 0 && ( // If we don't have a userId yet, any match we find is a duplicate\n    !ownUserId || // Otherwise, check to see if there are multiple matches or a match\n    // that is not us\n    matchedUsers.length > 1 || matchedUsers[0]._id !== ownUserId)) {\n      handleError(\"\".concat(displayName, \" already exists.\"));\n    }\n  }\n}; // XXX maybe this belongs in the check package\n\n\nconst NonEmptyString = Match.Where(x => {\n  check(x, String);\n  return x.length > 0;\n});\nconst userQueryValidator = Match.Where(user => {\n  check(user, {\n    id: Match.Optional(NonEmptyString),\n    username: Match.Optional(NonEmptyString),\n    email: Match.Optional(NonEmptyString)\n  });\n  if (Object.keys(user).length !== 1) throw new Match.Error(\"User property must have exactly one field\");\n  return true;\n});\nconst passwordValidator = Match.OneOf(Match.Where(str => {\n  var _Meteor$settings, _Meteor$settings$pack, _Meteor$settings$pack2;\n\n  return Match.test(str, String) && str.length <= ((_Meteor$settings = Meteor.settings) === null || _Meteor$settings === void 0 ? void 0 : (_Meteor$settings$pack = _Meteor$settings.packages) === null || _Meteor$settings$pack === void 0 ? void 0 : (_Meteor$settings$pack2 = _Meteor$settings$pack.accounts) === null || _Meteor$settings$pack2 === void 0 ? void 0 : _Meteor$settings$pack2.passwordMaxLength) || 256;\n}), {\n  digest: Match.Where(str => Match.test(str, String) && str.length === 64),\n  algorithm: Match.OneOf('sha-256')\n}); // Handler to login with a password.\n//\n// The Meteor client sets options.password to an object with keys\n// 'digest' (set to SHA256(password)) and 'algorithm' (\"sha-256\").\n//\n// For other DDP clients which don't have access to SHA, the handler\n// also accepts the plaintext password in options.password as a string.\n//\n// (It might be nice if servers could turn the plaintext password\n// option off. Or maybe it should be opt-in, not opt-out?\n// Accounts.config option?)\n//\n// Note that neither password option is secure without SSL.\n//\n\nAccounts.registerLoginHandler(\"password\", options => {\n  if (!options.password) return undefined; // don't handle\n\n  check(options, {\n    user: userQueryValidator,\n    password: passwordValidator\n  });\n\n  const user = Accounts._findUserByQuery(options.user, {\n    fields: _objectSpread({\n      services: 1\n    }, Accounts._checkPasswordUserFields)\n  });\n\n  if (!user) {\n    handleError(\"User not found\");\n  }\n\n  if (!user.services || !user.services.password || !user.services.password.bcrypt) {\n    handleError(\"User has no password set\");\n  }\n\n  return checkPassword(user, options.password);\n}); ///\n/// CHANGING\n///\n\n/**\n * @summary Change a user's username. Use this instead of updating the\n * database directly. The operation will fail if there is an existing user\n * with a username only differing in case.\n * @locus Server\n * @param {String} userId The ID of the user to update.\n * @param {String} newUsername A new username for the user.\n * @importFromPackage accounts-base\n */\n\nAccounts.setUsername = (userId, newUsername) => {\n  check(userId, NonEmptyString);\n  check(newUsername, NonEmptyString);\n  const user = getUserById(userId, {\n    fields: {\n      username: 1\n    }\n  });\n\n  if (!user) {\n    handleError(\"User not found\");\n  }\n\n  const oldUsername = user.username; // Perform a case insensitive check for duplicates before update\n\n  checkForCaseInsensitiveDuplicates('username', 'Username', newUsername, user._id);\n  Meteor.users.update({\n    _id: user._id\n  }, {\n    $set: {\n      username: newUsername\n    }\n  }); // Perform another check after update, in case a matching user has been\n  // inserted in the meantime\n\n  try {\n    checkForCaseInsensitiveDuplicates('username', 'Username', newUsername, user._id);\n  } catch (ex) {\n    // Undo update if the check fails\n    Meteor.users.update({\n      _id: user._id\n    }, {\n      $set: {\n        username: oldUsername\n      }\n    });\n    throw ex;\n  }\n}; // Let the user change their own password if they know the old\n// password. `oldPassword` and `newPassword` should be objects with keys\n// `digest` and `algorithm` (representing the SHA256 of the password).\n\n\nMeteor.methods({\n  changePassword: function (oldPassword, newPassword) {\n    check(oldPassword, passwordValidator);\n    check(newPassword, passwordValidator);\n\n    if (!this.userId) {\n      throw new Meteor.Error(401, \"Must be logged in\");\n    }\n\n    const user = getUserById(this.userId, {\n      fields: _objectSpread({\n        services: 1\n      }, Accounts._checkPasswordUserFields)\n    });\n\n    if (!user) {\n      handleError(\"User not found\");\n    }\n\n    if (!user.services || !user.services.password || !user.services.password.bcrypt) {\n      handleError(\"User has no password set\");\n    }\n\n    const result = checkPassword(user, oldPassword);\n\n    if (result.error) {\n      throw result.error;\n    }\n\n    const hashed = hashPassword(newPassword); // It would be better if this removed ALL existing tokens and replaced\n    // the token for the current connection with a new one, but that would\n    // be tricky, so we'll settle for just replacing all tokens other than\n    // the one for the current connection.\n\n    const currentToken = Accounts._getLoginToken(this.connection.id);\n\n    Meteor.users.update({\n      _id: this.userId\n    }, {\n      $set: {\n        'services.password.bcrypt': hashed\n      },\n      $pull: {\n        'services.resume.loginTokens': {\n          hashedToken: {\n            $ne: currentToken\n          }\n        }\n      },\n      $unset: {\n        'services.password.reset': 1\n      }\n    });\n    return {\n      passwordChanged: true\n    };\n  }\n}); // Force change the users password.\n\n/**\n * @summary Forcibly change the password for a user.\n * @locus Server\n * @param {String} userId The id of the user to update.\n * @param {String} newPassword A new password for the user.\n * @param {Object} [options]\n * @param {Object} options.logout Logout all current connections with this userId (default: true)\n * @importFromPackage accounts-base\n */\n\nAccounts.setPassword = (userId, newPlaintextPassword, options) => {\n  check(userId, String);\n  check(newPlaintextPassword, Match.Where(str => {\n    var _Meteor$settings2, _Meteor$settings2$pac, _Meteor$settings2$pac2;\n\n    return Match.test(str, String) && str.length <= ((_Meteor$settings2 = Meteor.settings) === null || _Meteor$settings2 === void 0 ? void 0 : (_Meteor$settings2$pac = _Meteor$settings2.packages) === null || _Meteor$settings2$pac === void 0 ? void 0 : (_Meteor$settings2$pac2 = _Meteor$settings2$pac.accounts) === null || _Meteor$settings2$pac2 === void 0 ? void 0 : _Meteor$settings2$pac2.passwordMaxLength) || 256;\n  }));\n  check(options, Match.Maybe({\n    logout: Boolean\n  }));\n  options = _objectSpread({\n    logout: true\n  }, options);\n  const user = getUserById(userId, {\n    fields: {\n      _id: 1\n    }\n  });\n\n  if (!user) {\n    throw new Meteor.Error(403, \"User not found\");\n  }\n\n  const update = {\n    $unset: {\n      'services.password.reset': 1\n    },\n    $set: {\n      'services.password.bcrypt': hashPassword(newPlaintextPassword)\n    }\n  };\n\n  if (options.logout) {\n    update.$unset['services.resume.loginTokens'] = 1;\n  }\n\n  Meteor.users.update({\n    _id: user._id\n  }, update);\n}; ///\n/// RESETTING VIA EMAIL\n///\n// Utility for plucking addresses from emails\n\n\nconst pluckAddresses = function () {\n  let emails = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  return emails.map(email => email.address);\n}; // Method called by a user to request a password reset email. This is\n// the start of the reset process.\n\n\nMeteor.methods({\n  forgotPassword: options => {\n    check(options, {\n      email: String\n    });\n    const user = Accounts.findUserByEmail(options.email, {\n      fields: {\n        emails: 1\n      }\n    });\n\n    if (!user) {\n      handleError(\"User not found\");\n    }\n\n    const emails = pluckAddresses(user.emails);\n    const caseSensitiveEmail = emails.find(email => email.toLowerCase() === options.email.toLowerCase());\n    Accounts.sendResetPasswordEmail(user._id, caseSensitiveEmail);\n  }\n});\n/**\n * @summary Generates a reset token and saves it into the database.\n * @locus Server\n * @param {String} userId The id of the user to generate the reset token for.\n * @param {String} email Which address of the user to generate the reset token for. This address must be in the user's `emails` list. If `null`, defaults to the first email in the list.\n * @param {String} reason `resetPassword` or `enrollAccount`.\n * @param {Object} [extraTokenData] Optional additional data to be added into the token record.\n * @returns {Object} Object with {email, user, token} values.\n * @importFromPackage accounts-base\n */\n\nAccounts.generateResetToken = (userId, email, reason, extraTokenData) => {\n  // Make sure the user exists, and email is one of their addresses.\n  // Don't limit the fields in the user object since the user is returned\n  // by the function and some other fields might be used elsewhere.\n  const user = getUserById(userId);\n\n  if (!user) {\n    handleError(\"Can't find user\");\n  } // pick the first email if we weren't passed an email.\n\n\n  if (!email && user.emails && user.emails[0]) {\n    email = user.emails[0].address;\n  } // make sure we have a valid email\n\n\n  if (!email || !pluckAddresses(user.emails).includes(email)) {\n    handleError(\"No such email for user.\");\n  }\n\n  const token = Random.secret();\n  const tokenRecord = {\n    token,\n    email,\n    when: new Date()\n  };\n\n  if (reason === 'resetPassword') {\n    tokenRecord.reason = 'reset';\n  } else if (reason === 'enrollAccount') {\n    tokenRecord.reason = 'enroll';\n  } else if (reason) {\n    // fallback so that this function can be used for unknown reasons as well\n    tokenRecord.reason = reason;\n  }\n\n  if (extraTokenData) {\n    Object.assign(tokenRecord, extraTokenData);\n  } // if this method is called from the enroll account work-flow then\n  // store the token record in 'services.password.enroll' db field\n  // else store the token record in in 'services.password.reset' db field\n\n\n  if (reason === 'enrollAccount') {\n    Meteor.users.update({\n      _id: user._id\n    }, {\n      $set: {\n        'services.password.enroll': tokenRecord\n      }\n    });\n  } else {\n    Meteor.users.update({\n      _id: user._id\n    }, {\n      $set: {\n        'services.password.reset': tokenRecord\n      }\n    });\n  } // before passing to template, update user object with new token\n\n\n  Meteor._ensure(user, 'services', 'password').reset = tokenRecord;\n  Meteor._ensure(user, 'services', 'password').enroll = tokenRecord;\n  return {\n    email,\n    user,\n    token\n  };\n};\n/**\n * @summary Generates an e-mail verification token and saves it into the database.\n * @locus Server\n * @param {String} userId The id of the user to generate the  e-mail verification token for.\n * @param {String} email Which address of the user to generate the e-mail verification token for. This address must be in the user's `emails` list. If `null`, defaults to the first unverified email in the list.\n * @param {Object} [extraTokenData] Optional additional data to be added into the token record.\n * @returns {Object} Object with {email, user, token} values.\n * @importFromPackage accounts-base\n */\n\n\nAccounts.generateVerificationToken = (userId, email, extraTokenData) => {\n  // Make sure the user exists, and email is one of their addresses.\n  // Don't limit the fields in the user object since the user is returned\n  // by the function and some other fields might be used elsewhere.\n  const user = getUserById(userId);\n\n  if (!user) {\n    handleError(\"Can't find user\");\n  } // pick the first unverified email if we weren't passed an email.\n\n\n  if (!email) {\n    const emailRecord = (user.emails || []).find(e => !e.verified);\n    email = (emailRecord || {}).address;\n\n    if (!email) {\n      handleError(\"That user has no unverified email addresses.\");\n    }\n  } // make sure we have a valid email\n\n\n  if (!email || !pluckAddresses(user.emails).includes(email)) {\n    handleError(\"No such email for user.\");\n  }\n\n  const token = Random.secret();\n  const tokenRecord = {\n    token,\n    // TODO: This should probably be renamed to \"email\" to match reset token record.\n    address: email,\n    when: new Date()\n  };\n\n  if (extraTokenData) {\n    Object.assign(tokenRecord, extraTokenData);\n  }\n\n  Meteor.users.update({\n    _id: user._id\n  }, {\n    $push: {\n      'services.email.verificationTokens': tokenRecord\n    }\n  }); // before passing to template, update user object with new token\n\n  Meteor._ensure(user, 'services', 'email');\n\n  if (!user.services.email.verificationTokens) {\n    user.services.email.verificationTokens = [];\n  }\n\n  user.services.email.verificationTokens.push(tokenRecord);\n  return {\n    email,\n    user,\n    token\n  };\n};\n/**\n * @summary Creates options for email sending for reset password and enroll account emails.\n * You can use this function when customizing a reset password or enroll account email sending.\n * @locus Server\n * @param {Object} email Which address of the user's to send the email to.\n * @param {Object} user The user object to generate options for.\n * @param {String} url URL to which user is directed to confirm the email.\n * @param {String} reason `resetPassword` or `enrollAccount`.\n * @returns {Object} Options which can be passed to `Email.send`.\n * @importFromPackage accounts-base\n */\n\n\nAccounts.generateOptionsForEmail = (email, user, url, reason) => {\n  const options = {\n    to: email,\n    from: Accounts.emailTemplates[reason].from ? Accounts.emailTemplates[reason].from(user) : Accounts.emailTemplates.from,\n    subject: Accounts.emailTemplates[reason].subject(user)\n  };\n\n  if (typeof Accounts.emailTemplates[reason].text === 'function') {\n    options.text = Accounts.emailTemplates[reason].text(user, url);\n  }\n\n  if (typeof Accounts.emailTemplates[reason].html === 'function') {\n    options.html = Accounts.emailTemplates[reason].html(user, url);\n  }\n\n  if (typeof Accounts.emailTemplates.headers === 'object') {\n    options.headers = Accounts.emailTemplates.headers;\n  }\n\n  return options;\n}; // send the user an email with a link that when opened allows the user\n// to set a new password, without the old password.\n\n/**\n * @summary Send an email with a link the user can use to reset their password.\n * @locus Server\n * @param {String} userId The id of the user to send email to.\n * @param {String} [email] Optional. Which address of the user's to send the email to. This address must be in the user's `emails` list. Defaults to the first email in the list.\n * @param {Object} [extraTokenData] Optional additional data to be added into the token record.\n * @param {Object} [extraParams] Optional additional params to be added to the reset url.\n * @returns {Object} Object with {email, user, token, url, options} values.\n * @importFromPackage accounts-base\n */\n\n\nAccounts.sendResetPasswordEmail = (userId, email, extraTokenData, extraParams) => {\n  const {\n    email: realEmail,\n    user,\n    token\n  } = Accounts.generateResetToken(userId, email, 'resetPassword', extraTokenData);\n  const url = Accounts.urls.resetPassword(token, extraParams);\n  const options = Accounts.generateOptionsForEmail(realEmail, user, url, 'resetPassword');\n  Email.send(options);\n\n  if (Meteor.isDevelopment) {\n    console.log(\"\\nReset password URL: \".concat(url));\n  }\n\n  return {\n    email: realEmail,\n    user,\n    token,\n    url,\n    options\n  };\n}; // send the user an email informing them that their account was created, with\n// a link that when opened both marks their email as verified and forces them\n// to choose their password. The email must be one of the addresses in the\n// user's emails field, or undefined to pick the first email automatically.\n//\n// This is not called automatically. It must be called manually if you\n// want to use enrollment emails.\n\n/**\n * @summary Send an email with a link the user can use to set their initial password.\n * @locus Server\n * @param {String} userId The id of the user to send email to.\n * @param {String} [email] Optional. Which address of the user's to send the email to. This address must be in the user's `emails` list. Defaults to the first email in the list.\n * @param {Object} [extraTokenData] Optional additional data to be added into the token record.\n * @param {Object} [extraParams] Optional additional params to be added to the enrollment url.\n * @returns {Object} Object with {email, user, token, url, options} values.\n * @importFromPackage accounts-base\n */\n\n\nAccounts.sendEnrollmentEmail = (userId, email, extraTokenData, extraParams) => {\n  const {\n    email: realEmail,\n    user,\n    token\n  } = Accounts.generateResetToken(userId, email, 'enrollAccount', extraTokenData);\n  const url = Accounts.urls.enrollAccount(token, extraParams);\n  const options = Accounts.generateOptionsForEmail(realEmail, user, url, 'enrollAccount');\n  Email.send(options);\n\n  if (Meteor.isDevelopment) {\n    console.log(\"\\nEnrollment email URL: \".concat(url));\n  }\n\n  return {\n    email: realEmail,\n    user,\n    token,\n    url,\n    options\n  };\n}; // Take token from sendResetPasswordEmail or sendEnrollmentEmail, change\n// the users password, and log them in.\n\n\nMeteor.methods({\n  resetPassword: function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    const token = args[0];\n    const newPassword = args[1];\n    return Accounts._loginMethod(this, \"resetPassword\", args, \"password\", () => {\n      check(token, String);\n      check(newPassword, passwordValidator);\n      let user = Meteor.users.findOne({\n        \"services.password.reset.token\": token\n      }, {\n        fields: {\n          services: 1,\n          emails: 1\n        }\n      });\n      let isEnroll = false; // if token is in services.password.reset db field implies\n      // this method is was not called from enroll account workflow\n      // else this method is called from enroll account workflow\n\n      if (!user) {\n        user = Meteor.users.findOne({\n          \"services.password.enroll.token\": token\n        }, {\n          fields: {\n            services: 1,\n            emails: 1\n          }\n        });\n        isEnroll = true;\n      }\n\n      if (!user) {\n        throw new Meteor.Error(403, \"Token expired\");\n      }\n\n      let tokenRecord = {};\n\n      if (isEnroll) {\n        tokenRecord = user.services.password.enroll;\n      } else {\n        tokenRecord = user.services.password.reset;\n      }\n\n      const {\n        when,\n        reason,\n        email\n      } = tokenRecord;\n\n      let tokenLifetimeMs = Accounts._getPasswordResetTokenLifetimeMs();\n\n      if (reason === \"enroll\") {\n        tokenLifetimeMs = Accounts._getPasswordEnrollTokenLifetimeMs();\n      }\n\n      const currentTimeMs = Date.now();\n      if (currentTimeMs - when > tokenLifetimeMs) throw new Meteor.Error(403, \"Token expired\");\n      if (!pluckAddresses(user.emails).includes(email)) return {\n        userId: user._id,\n        error: new Meteor.Error(403, \"Token has invalid email address\")\n      };\n      const hashed = hashPassword(newPassword); // NOTE: We're about to invalidate tokens on the user, who we might be\n      // logged in as. Make sure to avoid logging ourselves out if this\n      // happens. But also make sure not to leave the connection in a state\n      // of having a bad token set if things fail.\n\n      const oldToken = Accounts._getLoginToken(this.connection.id);\n\n      Accounts._setLoginToken(user._id, this.connection, null);\n\n      const resetToOldToken = () => Accounts._setLoginToken(user._id, this.connection, oldToken);\n\n      try {\n        // Update the user record by:\n        // - Changing the password to the new one\n        // - Forgetting about the reset token or enroll token that was just used\n        // - Verifying their email, since they got the password reset via email.\n        let affectedRecords = {}; // if reason is enroll then check services.password.enroll.token field for affected records\n\n        if (reason === 'enroll') {\n          affectedRecords = Meteor.users.update({\n            _id: user._id,\n            'emails.address': email,\n            'services.password.enroll.token': token\n          }, {\n            $set: {\n              'services.password.bcrypt': hashed,\n              'emails.$.verified': true\n            },\n            $unset: {\n              'services.password.enroll': 1\n            }\n          });\n        } else {\n          affectedRecords = Meteor.users.update({\n            _id: user._id,\n            'emails.address': email,\n            'services.password.reset.token': token\n          }, {\n            $set: {\n              'services.password.bcrypt': hashed,\n              'emails.$.verified': true\n            },\n            $unset: {\n              'services.password.reset': 1\n            }\n          });\n        }\n\n        if (affectedRecords !== 1) return {\n          userId: user._id,\n          error: new Meteor.Error(403, \"Invalid email\")\n        };\n      } catch (err) {\n        resetToOldToken();\n        throw err;\n      } // Replace all valid login tokens with new ones (changing\n      // password should invalidate existing sessions).\n\n\n      Accounts._clearAllLoginTokens(user._id);\n\n      return {\n        userId: user._id\n      };\n    });\n  }\n}); ///\n/// EMAIL VERIFICATION\n///\n// send the user an email with a link that when opened marks that\n// address as verified\n\n/**\n * @summary Send an email with a link the user can use verify their email address.\n * @locus Server\n * @param {String} userId The id of the user to send email to.\n * @param {String} [email] Optional. Which address of the user's to send the email to. This address must be in the user's `emails` list. Defaults to the first unverified email in the list.\n * @param {Object} [extraTokenData] Optional additional data to be added into the token record.\n * @param {Object} [extraParams] Optional additional params to be added to the verification url.\n *\n * @returns {Object} Object with {email, user, token, url, options} values.\n * @importFromPackage accounts-base\n */\n\nAccounts.sendVerificationEmail = (userId, email, extraTokenData, extraParams) => {\n  // XXX Also generate a link using which someone can delete this\n  // account if they own said address but weren't those who created\n  // this account.\n  const {\n    email: realEmail,\n    user,\n    token\n  } = Accounts.generateVerificationToken(userId, email, extraTokenData);\n  const url = Accounts.urls.verifyEmail(token, extraParams);\n  const options = Accounts.generateOptionsForEmail(realEmail, user, url, 'verifyEmail');\n  Email.send(options);\n\n  if (Meteor.isDevelopment) {\n    console.log(\"\\nVerification email URL: \".concat(url));\n  }\n\n  return {\n    email: realEmail,\n    user,\n    token,\n    url,\n    options\n  };\n}; // Take token from sendVerificationEmail, mark the email as verified,\n// and log them in.\n\n\nMeteor.methods({\n  verifyEmail: function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    const token = args[0];\n    return Accounts._loginMethod(this, \"verifyEmail\", args, \"password\", () => {\n      check(token, String);\n      const user = Meteor.users.findOne({\n        'services.email.verificationTokens.token': token\n      }, {\n        fields: {\n          services: 1,\n          emails: 1\n        }\n      });\n      if (!user) throw new Meteor.Error(403, \"Verify email link expired\");\n      const tokenRecord = user.services.email.verificationTokens.find(t => t.token == token);\n      if (!tokenRecord) return {\n        userId: user._id,\n        error: new Meteor.Error(403, \"Verify email link expired\")\n      };\n      const emailsRecord = user.emails.find(e => e.address == tokenRecord.address);\n      if (!emailsRecord) return {\n        userId: user._id,\n        error: new Meteor.Error(403, \"Verify email link is for unknown address\")\n      }; // By including the address in the query, we can use 'emails.$' in the\n      // modifier to get a reference to the specific object in the emails\n      // array. See\n      // http://www.mongodb.org/display/DOCS/Updating/#Updating-The%24positionaloperator)\n      // http://www.mongodb.org/display/DOCS/Updating#Updating-%24pull\n\n      Meteor.users.update({\n        _id: user._id,\n        'emails.address': tokenRecord.address\n      }, {\n        $set: {\n          'emails.$.verified': true\n        },\n        $pull: {\n          'services.email.verificationTokens': {\n            address: tokenRecord.address\n          }\n        }\n      });\n      return {\n        userId: user._id\n      };\n    });\n  }\n});\n/**\n * @summary Add an email address for a user. Use this instead of directly\n * updating the database. The operation will fail if there is a different user\n * with an email only differing in case. If the specified user has an existing\n * email only differing in case however, we replace it.\n * @locus Server\n * @param {String} userId The ID of the user to update.\n * @param {String} newEmail A new email address for the user.\n * @param {Boolean} [verified] Optional - whether the new email address should\n * be marked as verified. Defaults to false.\n * @importFromPackage accounts-base\n */\n\nAccounts.addEmail = (userId, newEmail, verified) => {\n  check(userId, NonEmptyString);\n  check(newEmail, NonEmptyString);\n  check(verified, Match.Optional(Boolean));\n\n  if (verified === void 0) {\n    verified = false;\n  }\n\n  const user = getUserById(userId, {\n    fields: {\n      emails: 1\n    }\n  });\n  if (!user) throw new Meteor.Error(403, \"User not found\"); // Allow users to change their own email to a version with a different case\n  // We don't have to call checkForCaseInsensitiveDuplicates to do a case\n  // insensitive check across all emails in the database here because: (1) if\n  // there is no case-insensitive duplicate between this user and other users,\n  // then we are OK and (2) if this would create a conflict with other users\n  // then there would already be a case-insensitive duplicate and we can't fix\n  // that in this code anyway.\n\n  const caseInsensitiveRegExp = new RegExp(\"^\".concat(Meteor._escapeRegExp(newEmail), \"$\"), 'i');\n  const didUpdateOwnEmail = (user.emails || []).reduce((prev, email) => {\n    if (caseInsensitiveRegExp.test(email.address)) {\n      Meteor.users.update({\n        _id: user._id,\n        'emails.address': email.address\n      }, {\n        $set: {\n          'emails.$.address': newEmail,\n          'emails.$.verified': verified\n        }\n      });\n      return true;\n    } else {\n      return prev;\n    }\n  }, false); // In the other updates below, we have to do another call to\n  // checkForCaseInsensitiveDuplicates to make sure that no conflicting values\n  // were added to the database in the meantime. We don't have to do this for\n  // the case where the user is updating their email address to one that is the\n  // same as before, but only different because of capitalization. Read the\n  // big comment above to understand why.\n\n  if (didUpdateOwnEmail) {\n    return;\n  } // Perform a case insensitive check for duplicates before update\n\n\n  checkForCaseInsensitiveDuplicates('emails.address', 'Email', newEmail, user._id);\n  Meteor.users.update({\n    _id: user._id\n  }, {\n    $addToSet: {\n      emails: {\n        address: newEmail,\n        verified: verified\n      }\n    }\n  }); // Perform another check after update, in case a matching user has been\n  // inserted in the meantime\n\n  try {\n    checkForCaseInsensitiveDuplicates('emails.address', 'Email', newEmail, user._id);\n  } catch (ex) {\n    // Undo update if the check fails\n    Meteor.users.update({\n      _id: user._id\n    }, {\n      $pull: {\n        emails: {\n          address: newEmail\n        }\n      }\n    });\n    throw ex;\n  }\n};\n/**\n * @summary Remove an email address for a user. Use this instead of updating\n * the database directly.\n * @locus Server\n * @param {String} userId The ID of the user to update.\n * @param {String} email The email address to remove.\n * @importFromPackage accounts-base\n */\n\n\nAccounts.removeEmail = (userId, email) => {\n  check(userId, NonEmptyString);\n  check(email, NonEmptyString);\n  const user = getUserById(userId, {\n    fields: {\n      _id: 1\n    }\n  });\n  if (!user) throw new Meteor.Error(403, \"User not found\");\n  Meteor.users.update({\n    _id: user._id\n  }, {\n    $pull: {\n      emails: {\n        address: email\n      }\n    }\n  });\n}; ///\n/// CREATING USERS\n///\n// Shared createUser function called from the createUser method, both\n// if originates in client or server code. Calls user provided hooks,\n// does the actual user insertion.\n//\n// returns the user id\n\n\nconst createUser = options => {\n  // Unknown keys allowed, because a onCreateUserHook can take arbitrary\n  // options.\n  check(options, Match.ObjectIncluding({\n    username: Match.Optional(String),\n    email: Match.Optional(String),\n    password: Match.Optional(passwordValidator)\n  }));\n  const {\n    username,\n    email,\n    password\n  } = options;\n  if (!username && !email) throw new Meteor.Error(400, \"Need to set a username or email\");\n  const user = {\n    services: {}\n  };\n\n  if (password) {\n    const hashed = hashPassword(password);\n    user.services.password = {\n      bcrypt: hashed\n    };\n  }\n\n  if (username) user.username = username;\n  if (email) user.emails = [{\n    address: email,\n    verified: false\n  }]; // Perform a case insensitive check before insert\n\n  checkForCaseInsensitiveDuplicates('username', 'Username', username);\n  checkForCaseInsensitiveDuplicates('emails.address', 'Email', email);\n  const userId = Accounts.insertUserDoc(options, user); // Perform another check after insert, in case a matching user has been\n  // inserted in the meantime\n\n  try {\n    checkForCaseInsensitiveDuplicates('username', 'Username', username, userId);\n    checkForCaseInsensitiveDuplicates('emails.address', 'Email', email, userId);\n  } catch (ex) {\n    // Remove inserted user if the check fails\n    Meteor.users.remove(userId);\n    throw ex;\n  }\n\n  return userId;\n}; // method for create user. Requests come from the client.\n\n\nMeteor.methods({\n  createUser: function () {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    const options = args[0];\n    return Accounts._loginMethod(this, \"createUser\", args, \"password\", () => {\n      // createUser() above does more checking.\n      check(options, Object);\n      if (Accounts._options.forbidClientAccountCreation) return {\n        error: new Meteor.Error(403, \"Signups forbidden\")\n      };\n      const userId = Accounts.createUserVerifyingEmail(options); // client gets logged in as the new user afterwards.\n\n      return {\n        userId: userId\n      };\n    });\n  }\n});\n/**\n * @summary Creates an user and sends an email if `options.email` is informed.\n * Then if the `sendVerificationEmail` option from the `Accounts` package is\n * enabled, you'll send a verification email if `options.password` is informed,\n * otherwise you'll send an enrollment email.\n * @locus Server\n * @param {Object} options The options object to be passed down when creating\n * the user\n * @param {String} options.username A unique name for this user.\n * @param {String} options.email The user's email address.\n * @param {String} options.password The user's password. This is __not__ sent in plain text over the wire.\n * @param {Object} options.profile The user's profile, typically including the `name` field.\n * @importFromPackage accounts-base\n * */\n\nAccounts.createUserVerifyingEmail = options => {\n  options = _objectSpread({}, options); // Create user. result contains id and token.\n\n  const userId = createUser(options); // safety belt. createUser is supposed to throw on error. send 500 error\n  // instead of sending a verification email with empty userid.\n\n  if (!userId) throw new Error(\"createUser failed to insert new user\"); // If `Accounts._options.sendVerificationEmail` is set, register\n  // a token to verify the user's primary email, and send it to\n  // that address.\n\n  if (options.email && Accounts._options.sendVerificationEmail) {\n    if (options.password) {\n      Accounts.sendVerificationEmail(userId, options.email);\n    } else {\n      Accounts.sendEnrollmentEmail(userId, options.email);\n    }\n  }\n\n  return userId;\n}; // Create user directly on the server.\n//\n// Unlike the client version, this does not log you in as this user\n// after creation.\n//\n// returns userId or throws an error if it can't create\n//\n// XXX add another argument (\"server options\") that gets sent to onCreateUser,\n// which is always empty when called from the createUser method? eg, \"admin:\n// true\", which we want to prevent the client from setting, but which a custom\n// method calling Accounts.createUser could set?\n//\n\n\nAccounts.createUser = (options, callback) => {\n  options = _objectSpread({}, options); // XXX allow an optional callback?\n\n  if (callback) {\n    throw new Error(\"Accounts.createUser with callback not supported on the server yet.\");\n  }\n\n  return createUser(options);\n}; ///\n/// PASSWORD-SPECIFIC INDEXES ON USERS\n///\n\n\nMeteor.users._ensureIndex('services.email.verificationTokens.token', {\n  unique: true,\n  sparse: true\n});\n\nMeteor.users._ensureIndex('services.password.reset.token', {\n  unique: true,\n  sparse: true\n});\n\nMeteor.users._ensureIndex('services.password.enroll.token', {\n  unique: true,\n  sparse: true\n});","map":{"version":3,"sources":["packages/accounts-password/password_server.js"],"names":["_objectSpread","module","link","default","v","bcrypt","bcryptHash","Meteor","wrapAsync","hash","bcryptCompare","compare","getUserById","id","options","users","findOne","Accounts","_addDefaultFieldSelector","_bcryptRounds","_options","bcryptRounds","getPasswordString","password","SHA256","algorithm","Error","digest","hashPassword","getRoundsFromBcryptHash","rounds","hashSegments","split","length","parseInt","_checkPasswordUserFields","_id","services","_checkPassword","user","result","userId","formattedPassword","hashRounds","error","handleError","defer","update","$set","checkPassword","msg","throwError","ambiguousErrorMessages","_findUserByQuery","query","fieldName","fieldValue","username","email","selector","selectorForFastCaseInsensitiveLookup","candidateUsers","find","fetch","findUserByUsername","findUserByEmail","string","prefix","substring","Math","min","orClause","generateCasePermutationsForString","map","prefixPermutation","RegExp","_escapeRegExp","caseInsensitiveClause","$and","$or","permutations","i","ch","charAt","concat","lowerCaseChar","toLowerCase","upperCaseChar","toUpperCase","checkForCaseInsensitiveDuplicates","displayName","ownUserId","skipCheck","Object","prototype","hasOwnProperty","call","_skipCaseInsensitiveChecksForTest","matchedUsers","fields","limit","NonEmptyString","Match","Where","x","check","String","userQueryValidator","Optional","keys","passwordValidator","OneOf","str","test","settings","packages","accounts","passwordMaxLength","registerLoginHandler","undefined","setUsername","newUsername","oldUsername","ex","methods","changePassword","oldPassword","newPassword","hashed","currentToken","_getLoginToken","connection","$pull","hashedToken","$ne","$unset","passwordChanged","setPassword","newPlaintextPassword","Maybe","logout","Boolean","pluckAddresses","emails","address","forgotPassword","caseSensitiveEmail","sendResetPasswordEmail","generateResetToken","reason","extraTokenData","includes","token","Random","secret","tokenRecord","when","Date","assign","_ensure","reset","enroll","generateVerificationToken","emailRecord","e","verified","$push","verificationTokens","push","generateOptionsForEmail","url","to","from","emailTemplates","subject","text","html","headers","extraParams","realEmail","urls","resetPassword","Email","send","isDevelopment","console","log","sendEnrollmentEmail","enrollAccount","args","_loginMethod","isEnroll","tokenLifetimeMs","_getPasswordResetTokenLifetimeMs","_getPasswordEnrollTokenLifetimeMs","currentTimeMs","now","oldToken","_setLoginToken","resetToOldToken","affectedRecords","err","_clearAllLoginTokens","sendVerificationEmail","verifyEmail","t","emailsRecord","addEmail","newEmail","caseInsensitiveRegExp","didUpdateOwnEmail","reduce","prev","$addToSet","removeEmail","createUser","ObjectIncluding","insertUserDoc","remove","forbidClientAccountCreation","createUserVerifyingEmail","callback","_ensureIndex","unique","sparse"],"mappings":"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","sourcesContent":["import bcrypt from 'bcrypt'\n\nconst bcryptHash = Meteor.wrapAsync(bcrypt.hash);\nconst bcryptCompare = Meteor.wrapAsync(bcrypt.compare);\n\n// Utility for grabbing user\nconst getUserById = (id, options) => Meteor.users.findOne(id, Accounts._addDefaultFieldSelector(options));\n\n// User records have a 'services.password.bcrypt' field on them to hold\n// their hashed passwords.\n//\n// When the client sends a password to the server, it can either be a\n// string (the plaintext password) or an object with keys 'digest' and\n// 'algorithm' (must be \"sha-256\" for now). The Meteor client always sends\n// password objects { digest: *, algorithm: \"sha-256\" }, but DDP clients\n// that don't have access to SHA can just send plaintext passwords as\n// strings.\n//\n// When the server receives a plaintext password as a string, it always\n// hashes it with SHA256 before passing it into bcrypt. When the server\n// receives a password as an object, it asserts that the algorithm is\n// \"sha-256\" and then passes the digest to bcrypt.\n\n\nAccounts._bcryptRounds = () => Accounts._options.bcryptRounds || 10;\n\n// Given a 'password' from the client, extract the string that we should\n// bcrypt. 'password' can be one of:\n//  - String (the plaintext password)\n//  - Object with 'digest' and 'algorithm' keys. 'algorithm' must be \"sha-256\".\n//\nconst getPasswordString = password => {\n  if (typeof password === \"string\") {\n    password = SHA256(password);\n  } else { // 'password' is an object\n    if (password.algorithm !== \"sha-256\") {\n      throw new Error(\"Invalid password hash algorithm. \" +\n                      \"Only 'sha-256' is allowed.\");\n    }\n    password = password.digest;\n  }\n  return password;\n};\n\n// Use bcrypt to hash the password for storage in the database.\n// `password` can be a string (in which case it will be run through\n// SHA256 before bcrypt) or an object with properties `digest` and\n// `algorithm` (in which case we bcrypt `password.digest`).\n//\nconst hashPassword = password => {\n  password = getPasswordString(password);\n  return bcryptHash(password, Accounts._bcryptRounds());\n};\n\n// Extract the number of rounds used in the specified bcrypt hash.\nconst getRoundsFromBcryptHash = hash => {\n  let rounds;\n  if (hash) {\n    const hashSegments = hash.split('$');\n    if (hashSegments.length > 2) {\n      rounds = parseInt(hashSegments[2], 10);\n    }\n  }\n  return rounds;\n};\n\n// Check whether the provided password matches the bcrypt'ed password in\n// the database user record. `password` can be a string (in which case\n// it will be run through SHA256 before bcrypt) or an object with\n// properties `digest` and `algorithm` (in which case we bcrypt\n// `password.digest`).\n//\n// The user parameter needs at least user._id and user.services\nAccounts._checkPasswordUserFields = {_id: 1, services: 1};\n//\nAccounts._checkPassword = (user, password) => {\n  const result = {\n    userId: user._id\n  };\n\n  const formattedPassword = getPasswordString(password);\n  const hash = user.services.password.bcrypt;\n  const hashRounds = getRoundsFromBcryptHash(hash);\n\n  if (! bcryptCompare(formattedPassword, hash)) {\n    result.error = handleError(\"Incorrect password\", false);\n  } else if (hash && Accounts._bcryptRounds() != hashRounds) {\n    // The password checks out, but the user's bcrypt hash needs to be updated.\n    Meteor.defer(() => {\n      Meteor.users.update({ _id: user._id }, {\n        $set: {\n          'services.password.bcrypt':\n            bcryptHash(formattedPassword, Accounts._bcryptRounds())\n        }\n      });\n    });\n  }\n\n  return result;\n};\nconst checkPassword = Accounts._checkPassword;\n\n///\n/// ERROR HANDLER\n///\nconst handleError = (msg, throwError = true) => {\n  const error = new Meteor.Error(\n    403,\n    Accounts._options.ambiguousErrorMessages\n      ? \"Something went wrong. Please check your credentials.\"\n      : msg\n  );\n  if (throwError) {\n    throw error;\n  }\n  return error;\n};\n\n///\n/// LOGIN\n///\n\nAccounts._findUserByQuery = (query, options) => {\n  let user = null;\n\n  if (query.id) {\n    // default field selector is added within getUserById()\n    user = getUserById(query.id, options);\n  } else {\n    options = Accounts._addDefaultFieldSelector(options);\n    let fieldName;\n    let fieldValue;\n    if (query.username) {\n      fieldName = 'username';\n      fieldValue = query.username;\n    } else if (query.email) {\n      fieldName = 'emails.address';\n      fieldValue = query.email;\n    } else {\n      throw new Error(\"shouldn't happen (validation missed something)\");\n    }\n    let selector = {};\n    selector[fieldName] = fieldValue;\n    user = Meteor.users.findOne(selector, options);\n    // If user is not found, try a case insensitive lookup\n    if (!user) {\n      selector = selectorForFastCaseInsensitiveLookup(fieldName, fieldValue);\n      const candidateUsers = Meteor.users.find(selector, options).fetch();\n      // No match if multiple candidates are found\n      if (candidateUsers.length === 1) {\n        user = candidateUsers[0];\n      }\n    }\n  }\n\n  return user;\n};\n\n/**\n * @summary Finds the user with the specified username.\n * First tries to match username case sensitively; if that fails, it\n * tries case insensitively; but if more than one user matches the case\n * insensitive search, it returns null.\n * @locus Server\n * @param {String} username The username to look for\n * @param {Object} [options]\n * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n * @returns {Object} A user if found, else null\n * @importFromPackage accounts-base\n */\nAccounts.findUserByUsername =\n  (username, options) => Accounts._findUserByQuery({ username }, options);\n\n/**\n * @summary Finds the user with the specified email.\n * First tries to match email case sensitively; if that fails, it\n * tries case insensitively; but if more than one user matches the case\n * insensitive search, it returns null.\n * @locus Server\n * @param {String} email The email address to look for\n * @param {Object} [options]\n * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n * @returns {Object} A user if found, else null\n * @importFromPackage accounts-base\n */\nAccounts.findUserByEmail =\n  (email, options) => Accounts._findUserByQuery({ email }, options);\n\n// Generates a MongoDB selector that can be used to perform a fast case\n// insensitive lookup for the given fieldName and string. Since MongoDB does\n// not support case insensitive indexes, and case insensitive regex queries\n// are slow, we construct a set of prefix selectors for all permutations of\n// the first 4 characters ourselves. We first attempt to matching against\n// these, and because 'prefix expression' regex queries do use indexes (see\n// http://docs.mongodb.org/v2.6/reference/operator/query/regex/#index-use),\n// this has been found to greatly improve performance (from 1200ms to 5ms in a\n// test with 1.000.000 users).\nconst selectorForFastCaseInsensitiveLookup = (fieldName, string) => {\n  // Performance seems to improve up to 4 prefix characters\n  const prefix = string.substring(0, Math.min(string.length, 4));\n  const orClause = generateCasePermutationsForString(prefix).map(\n    prefixPermutation => {\n      const selector = {};\n      selector[fieldName] =\n        new RegExp(`^${Meteor._escapeRegExp(prefixPermutation)}`);\n      return selector;\n    });\n  const caseInsensitiveClause = {};\n  caseInsensitiveClause[fieldName] =\n    new RegExp(`^${Meteor._escapeRegExp(string)}$`, 'i')\n  return {$and: [{$or: orClause}, caseInsensitiveClause]};\n}\n\n// Generates permutations of all case variations of a given string.\nconst generateCasePermutationsForString = string => {\n  let permutations = [''];\n  for (let i = 0; i < string.length; i++) {\n    const ch = string.charAt(i);\n    permutations = [].concat(...(permutations.map(prefix => {\n      const lowerCaseChar = ch.toLowerCase();\n      const upperCaseChar = ch.toUpperCase();\n      // Don't add unnecessary permutations when ch is not a letter\n      if (lowerCaseChar === upperCaseChar) {\n        return [prefix + ch];\n      } else {\n        return [prefix + lowerCaseChar, prefix + upperCaseChar];\n      }\n    })));\n  }\n  return permutations;\n}\n\nconst checkForCaseInsensitiveDuplicates = (fieldName, displayName, fieldValue, ownUserId) => {\n  // Some tests need the ability to add users with the same case insensitive\n  // value, hence the _skipCaseInsensitiveChecksForTest check\n  const skipCheck = Object.prototype.hasOwnProperty.call(Accounts._skipCaseInsensitiveChecksForTest, fieldValue);\n\n  if (fieldValue && !skipCheck) {\n    const matchedUsers = Meteor.users.find(\n      selectorForFastCaseInsensitiveLookup(fieldName, fieldValue),\n      {\n        fields: {_id: 1},\n        // we only need a maximum of 2 users for the logic below to work\n        limit: 2,\n      }\n    ).fetch();\n\n    if (matchedUsers.length > 0 &&\n        // If we don't have a userId yet, any match we find is a duplicate\n        (!ownUserId ||\n        // Otherwise, check to see if there are multiple matches or a match\n        // that is not us\n        (matchedUsers.length > 1 || matchedUsers[0]._id !== ownUserId))) {\n      handleError(`${displayName} already exists.`);\n    }\n  }\n};\n\n// XXX maybe this belongs in the check package\nconst NonEmptyString = Match.Where(x => {\n  check(x, String);\n  return x.length > 0;\n});\n\nconst userQueryValidator = Match.Where(user => {\n  check(user, {\n    id: Match.Optional(NonEmptyString),\n    username: Match.Optional(NonEmptyString),\n    email: Match.Optional(NonEmptyString)\n  });\n  if (Object.keys(user).length !== 1)\n    throw new Match.Error(\"User property must have exactly one field\");\n  return true;\n});\n\nconst passwordValidator = Match.OneOf(\n  Match.Where(str => Match.test(str, String) && str.length <= Meteor.settings?.packages?.accounts?.passwordMaxLength || 256), {\n    digest: Match.Where(str => Match.test(str, String) && str.length === 64),\n    algorithm: Match.OneOf('sha-256')\n  }\n);\n\n// Handler to login with a password.\n//\n// The Meteor client sets options.password to an object with keys\n// 'digest' (set to SHA256(password)) and 'algorithm' (\"sha-256\").\n//\n// For other DDP clients which don't have access to SHA, the handler\n// also accepts the plaintext password in options.password as a string.\n//\n// (It might be nice if servers could turn the plaintext password\n// option off. Or maybe it should be opt-in, not opt-out?\n// Accounts.config option?)\n//\n// Note that neither password option is secure without SSL.\n//\nAccounts.registerLoginHandler(\"password\", options => {\n  if (!options.password)\n    return undefined; // don't handle\n\n  check(options, {\n    user: userQueryValidator,\n    password: passwordValidator\n  });\n\n\n  const user = Accounts._findUserByQuery(options.user, {fields: {\n    services: 1,\n    ...Accounts._checkPasswordUserFields,\n  }});\n  if (!user) {\n    handleError(\"User not found\");\n  }\n\n  if (!user.services || !user.services.password ||\n      !user.services.password.bcrypt) {\n    handleError(\"User has no password set\");\n  }\n\n  return checkPassword(\n    user,\n    options.password\n  );\n});\n\n///\n/// CHANGING\n///\n\n/**\n * @summary Change a user's username. Use this instead of updating the\n * database directly. The operation will fail if there is an existing user\n * with a username only differing in case.\n * @locus Server\n * @param {String} userId The ID of the user to update.\n * @param {String} newUsername A new username for the user.\n * @importFromPackage accounts-base\n */\nAccounts.setUsername = (userId, newUsername) => {\n  check(userId, NonEmptyString);\n  check(newUsername, NonEmptyString);\n\n  const user = getUserById(userId, {fields: {\n    username: 1,\n  }});\n  if (!user) {\n    handleError(\"User not found\");\n  }\n\n  const oldUsername = user.username;\n\n  // Perform a case insensitive check for duplicates before update\n  checkForCaseInsensitiveDuplicates('username', 'Username', newUsername, user._id);\n\n  Meteor.users.update({_id: user._id}, {$set: {username: newUsername}});\n\n  // Perform another check after update, in case a matching user has been\n  // inserted in the meantime\n  try {\n    checkForCaseInsensitiveDuplicates('username', 'Username', newUsername, user._id);\n  } catch (ex) {\n    // Undo update if the check fails\n    Meteor.users.update({_id: user._id}, {$set: {username: oldUsername}});\n    throw ex;\n  }\n};\n\n// Let the user change their own password if they know the old\n// password. `oldPassword` and `newPassword` should be objects with keys\n// `digest` and `algorithm` (representing the SHA256 of the password).\nMeteor.methods({changePassword: function (oldPassword, newPassword) {\n  check(oldPassword, passwordValidator);\n  check(newPassword, passwordValidator);\n\n  if (!this.userId) {\n    throw new Meteor.Error(401, \"Must be logged in\");\n  }\n\n  const user = getUserById(this.userId, {fields: {\n    services: 1,\n    ...Accounts._checkPasswordUserFields,\n  }});\n  if (!user) {\n    handleError(\"User not found\");\n  }\n\n  if (!user.services || !user.services.password || !user.services.password.bcrypt) {\n    handleError(\"User has no password set\");\n  }\n\n  const result = checkPassword(user, oldPassword);\n  if (result.error) {\n    throw result.error;\n  }\n\n  const hashed = hashPassword(newPassword);\n\n  // It would be better if this removed ALL existing tokens and replaced\n  // the token for the current connection with a new one, but that would\n  // be tricky, so we'll settle for just replacing all tokens other than\n  // the one for the current connection.\n  const currentToken = Accounts._getLoginToken(this.connection.id);\n  Meteor.users.update(\n    { _id: this.userId },\n    {\n      $set: { 'services.password.bcrypt': hashed },\n      $pull: {\n        'services.resume.loginTokens': { hashedToken: { $ne: currentToken } }\n      },\n      $unset: { 'services.password.reset': 1 }\n    }\n  );\n\n  return {passwordChanged: true};\n}});\n\n\n// Force change the users password.\n\n/**\n * @summary Forcibly change the password for a user.\n * @locus Server\n * @param {String} userId The id of the user to update.\n * @param {String} newPassword A new password for the user.\n * @param {Object} [options]\n * @param {Object} options.logout Logout all current connections with this userId (default: true)\n * @importFromPackage accounts-base\n */\nAccounts.setPassword = (userId, newPlaintextPassword, options) => {\n  check(userId, String)\n  check(newPlaintextPassword, Match.Where(str => Match.test(str, String) && str.length <= Meteor.settings?.packages?.accounts?.passwordMaxLength || 256))\n  check(options, Match.Maybe({ logout: Boolean }))\n  options = { logout: true , ...options };\n\n  const user = getUserById(userId, {fields: {_id: 1}});\n  if (!user) {\n    throw new Meteor.Error(403, \"User not found\");\n  }\n\n  const update = {\n    $unset: {\n      'services.password.reset': 1\n    },\n    $set: {'services.password.bcrypt': hashPassword(newPlaintextPassword)}\n  };\n\n  if (options.logout) {\n    update.$unset['services.resume.loginTokens'] = 1;\n  }\n\n  Meteor.users.update({_id: user._id}, update);\n};\n\n\n///\n/// RESETTING VIA EMAIL\n///\n\n// Utility for plucking addresses from emails\nconst pluckAddresses = (emails = []) => emails.map(email => email.address);\n\n// Method called by a user to request a password reset email. This is\n// the start of the reset process.\nMeteor.methods({forgotPassword: options => {\n  check(options, {email: String})\n\n  const user = Accounts.findUserByEmail(options.email, { fields: { emails: 1 } });\n\n  if (!user) {\n    handleError(\"User not found\");\n  }\n\n  const emails = pluckAddresses(user.emails);\n  const caseSensitiveEmail = emails.find(\n    email => email.toLowerCase() === options.email.toLowerCase()\n  );\n\n  Accounts.sendResetPasswordEmail(user._id, caseSensitiveEmail);\n}});\n\n/**\n * @summary Generates a reset token and saves it into the database.\n * @locus Server\n * @param {String} userId The id of the user to generate the reset token for.\n * @param {String} email Which address of the user to generate the reset token for. This address must be in the user's `emails` list. If `null`, defaults to the first email in the list.\n * @param {String} reason `resetPassword` or `enrollAccount`.\n * @param {Object} [extraTokenData] Optional additional data to be added into the token record.\n * @returns {Object} Object with {email, user, token} values.\n * @importFromPackage accounts-base\n */\nAccounts.generateResetToken = (userId, email, reason, extraTokenData) => {\n  // Make sure the user exists, and email is one of their addresses.\n  // Don't limit the fields in the user object since the user is returned\n  // by the function and some other fields might be used elsewhere.\n  const user = getUserById(userId);\n  if (!user) {\n    handleError(\"Can't find user\");\n  }\n\n  // pick the first email if we weren't passed an email.\n  if (!email && user.emails && user.emails[0]) {\n    email = user.emails[0].address;\n  }\n\n  // make sure we have a valid email\n  if (!email ||\n    !(pluckAddresses(user.emails).includes(email))) {\n    handleError(\"No such email for user.\");\n  }\n\n  const token = Random.secret();\n  const tokenRecord = {\n    token,\n    email,\n    when: new Date()\n  };\n\n  if (reason === 'resetPassword') {\n    tokenRecord.reason = 'reset';\n  } else if (reason === 'enrollAccount') {\n    tokenRecord.reason = 'enroll';\n  } else if (reason) {\n    // fallback so that this function can be used for unknown reasons as well\n    tokenRecord.reason = reason;\n  }\n\n  if (extraTokenData) {\n    Object.assign(tokenRecord, extraTokenData);\n  } \n  // if this method is called from the enroll account work-flow then\n  // store the token record in 'services.password.enroll' db field\n  // else store the token record in in 'services.password.reset' db field\n  if(reason === 'enrollAccount') {\n    Meteor.users.update({_id: user._id}, {\n      $set : {\n        'services.password.enroll': tokenRecord\n      }\n    });\n  } else {\n    Meteor.users.update({_id: user._id}, {\n      $set : {\n        'services.password.reset': tokenRecord\n      }\n    });\n  }\n\n  // before passing to template, update user object with new token\n  Meteor._ensure(user, 'services', 'password').reset = tokenRecord;\n  Meteor._ensure(user, 'services', 'password').enroll = tokenRecord;\n  return {email, user, token};\n};\n\n/**\n * @summary Generates an e-mail verification token and saves it into the database.\n * @locus Server\n * @param {String} userId The id of the user to generate the  e-mail verification token for.\n * @param {String} email Which address of the user to generate the e-mail verification token for. This address must be in the user's `emails` list. If `null`, defaults to the first unverified email in the list.\n * @param {Object} [extraTokenData] Optional additional data to be added into the token record.\n * @returns {Object} Object with {email, user, token} values.\n * @importFromPackage accounts-base\n */\nAccounts.generateVerificationToken = (userId, email, extraTokenData) => {\n  // Make sure the user exists, and email is one of their addresses.\n  // Don't limit the fields in the user object since the user is returned\n  // by the function and some other fields might be used elsewhere.\n  const user = getUserById(userId);\n  if (!user) {\n    handleError(\"Can't find user\");\n  }\n\n  // pick the first unverified email if we weren't passed an email.\n  if (!email) {\n    const emailRecord = (user.emails || []).find(e => !e.verified);\n    email = (emailRecord || {}).address;\n\n    if (!email) {\n      handleError(\"That user has no unverified email addresses.\");\n    }\n  }\n\n  // make sure we have a valid email\n  if (!email ||\n    !(pluckAddresses(user.emails).includes(email))) {\n    handleError(\"No such email for user.\");\n  }\n\n  const token = Random.secret();\n  const tokenRecord = {\n    token,\n    // TODO: This should probably be renamed to \"email\" to match reset token record.\n    address: email,\n    when: new Date()\n  };\n\n  if (extraTokenData) {\n    Object.assign(tokenRecord, extraTokenData);\n  }\n\n  Meteor.users.update({_id: user._id}, {$push: {\n    'services.email.verificationTokens': tokenRecord\n  }});\n\n  // before passing to template, update user object with new token\n  Meteor._ensure(user, 'services', 'email');\n  if (!user.services.email.verificationTokens) {\n    user.services.email.verificationTokens = [];\n  }\n  user.services.email.verificationTokens.push(tokenRecord);\n\n  return {email, user, token};\n};\n\n/**\n * @summary Creates options for email sending for reset password and enroll account emails.\n * You can use this function when customizing a reset password or enroll account email sending.\n * @locus Server\n * @param {Object} email Which address of the user's to send the email to.\n * @param {Object} user The user object to generate options for.\n * @param {String} url URL to which user is directed to confirm the email.\n * @param {String} reason `resetPassword` or `enrollAccount`.\n * @returns {Object} Options which can be passed to `Email.send`.\n * @importFromPackage accounts-base\n */\nAccounts.generateOptionsForEmail = (email, user, url, reason) => {\n  const options = {\n    to: email,\n    from: Accounts.emailTemplates[reason].from\n      ? Accounts.emailTemplates[reason].from(user)\n      : Accounts.emailTemplates.from,\n    subject: Accounts.emailTemplates[reason].subject(user)\n  };\n\n  if (typeof Accounts.emailTemplates[reason].text === 'function') {\n    options.text = Accounts.emailTemplates[reason].text(user, url);\n  }\n\n  if (typeof Accounts.emailTemplates[reason].html === 'function') {\n    options.html = Accounts.emailTemplates[reason].html(user, url);\n  }\n\n  if (typeof Accounts.emailTemplates.headers === 'object') {\n    options.headers = Accounts.emailTemplates.headers;\n  }\n\n  return options;\n};\n\n// send the user an email with a link that when opened allows the user\n// to set a new password, without the old password.\n\n/**\n * @summary Send an email with a link the user can use to reset their password.\n * @locus Server\n * @param {String} userId The id of the user to send email to.\n * @param {String} [email] Optional. Which address of the user's to send the email to. This address must be in the user's `emails` list. Defaults to the first email in the list.\n * @param {Object} [extraTokenData] Optional additional data to be added into the token record.\n * @param {Object} [extraParams] Optional additional params to be added to the reset url.\n * @returns {Object} Object with {email, user, token, url, options} values.\n * @importFromPackage accounts-base\n */\nAccounts.sendResetPasswordEmail = (userId, email, extraTokenData, extraParams) => {\n  const {email: realEmail, user, token} =\n    Accounts.generateResetToken(userId, email, 'resetPassword', extraTokenData);\n  const url = Accounts.urls.resetPassword(token, extraParams);\n  const options = Accounts.generateOptionsForEmail(realEmail, user, url, 'resetPassword');\n  Email.send(options);\n  if (Meteor.isDevelopment) {\n    console.log(`\\nReset password URL: ${url}`);\n  }\n  return {email: realEmail, user, token, url, options};\n};\n\n// send the user an email informing them that their account was created, with\n// a link that when opened both marks their email as verified and forces them\n// to choose their password. The email must be one of the addresses in the\n// user's emails field, or undefined to pick the first email automatically.\n//\n// This is not called automatically. It must be called manually if you\n// want to use enrollment emails.\n\n/**\n * @summary Send an email with a link the user can use to set their initial password.\n * @locus Server\n * @param {String} userId The id of the user to send email to.\n * @param {String} [email] Optional. Which address of the user's to send the email to. This address must be in the user's `emails` list. Defaults to the first email in the list.\n * @param {Object} [extraTokenData] Optional additional data to be added into the token record.\n * @param {Object} [extraParams] Optional additional params to be added to the enrollment url.\n * @returns {Object} Object with {email, user, token, url, options} values.\n * @importFromPackage accounts-base\n */\nAccounts.sendEnrollmentEmail = (userId, email, extraTokenData, extraParams) => {\n  const {email: realEmail, user, token} =\n    Accounts.generateResetToken(userId, email, 'enrollAccount', extraTokenData);\n  const url = Accounts.urls.enrollAccount(token, extraParams);\n  const options = Accounts.generateOptionsForEmail(realEmail, user, url, 'enrollAccount');\n  Email.send(options);\n  if (Meteor.isDevelopment) {\n    console.log(`\\nEnrollment email URL: ${url}`);\n  }\n  return {email: realEmail, user, token, url, options};\n};\n\n\n// Take token from sendResetPasswordEmail or sendEnrollmentEmail, change\n// the users password, and log them in.\nMeteor.methods({resetPassword: function (...args) {\n  const token = args[0];\n  const newPassword = args[1];\n  return Accounts._loginMethod(\n    this,\n    \"resetPassword\",\n    args,\n    \"password\",\n    () => {\n      check(token, String);\n      check(newPassword, passwordValidator);\n\n      let user = Meteor.users.findOne(\n        {\"services.password.reset.token\": token},\n        {fields: {\n          services: 1,\n          emails: 1,\n        }}\n      );\n     \n      let isEnroll = false;\n      // if token is in services.password.reset db field implies\n      // this method is was not called from enroll account workflow\n      // else this method is called from enroll account workflow\n      if(!user) {\n        user = Meteor.users.findOne(\n          {\"services.password.enroll.token\": token},\n          {fields: {\n            services: 1,\n            emails: 1,\n          }}\n        );\n        isEnroll = true;\n      }\n      if (!user) {\n        throw new Meteor.Error(403, \"Token expired\");\n      }\n      let tokenRecord = {};\n      if(isEnroll) {\n        tokenRecord = user.services.password.enroll;\n      } else {\n        tokenRecord = user.services.password.reset;\n      }\n      const { when, reason, email } = tokenRecord;\n      let tokenLifetimeMs = Accounts._getPasswordResetTokenLifetimeMs();\n      if (reason === \"enroll\") {\n        tokenLifetimeMs = Accounts._getPasswordEnrollTokenLifetimeMs();\n      }\n      const currentTimeMs = Date.now();\n      if ((currentTimeMs - when) > tokenLifetimeMs)\n        throw new Meteor.Error(403, \"Token expired\");\n      if (!(pluckAddresses(user.emails).includes(email)))\n        return {\n          userId: user._id,\n          error: new Meteor.Error(403, \"Token has invalid email address\")\n        };\n\n      const hashed = hashPassword(newPassword);     \n\n      // NOTE: We're about to invalidate tokens on the user, who we might be\n      // logged in as. Make sure to avoid logging ourselves out if this\n      // happens. But also make sure not to leave the connection in a state\n      // of having a bad token set if things fail.\n      const oldToken = Accounts._getLoginToken(this.connection.id);\n      Accounts._setLoginToken(user._id, this.connection, null);\n      const resetToOldToken = () =>\n        Accounts._setLoginToken(user._id, this.connection, oldToken);\n\n      try {\n        // Update the user record by:\n        // - Changing the password to the new one\n        // - Forgetting about the reset token or enroll token that was just used\n        // - Verifying their email, since they got the password reset via email.\n        let affectedRecords = {};\n        // if reason is enroll then check services.password.enroll.token field for affected records\n        if(reason === 'enroll') {\n          affectedRecords = Meteor.users.update(\n            {\n              _id: user._id,\n              'emails.address': email,\n              'services.password.enroll.token': token\n            },\n            {$set: {'services.password.bcrypt': hashed,\n                    'emails.$.verified': true},\n              $unset: {'services.password.enroll': 1 }});\n        } else {\n          affectedRecords = Meteor.users.update(\n            {\n              _id: user._id,\n              'emails.address': email,\n              'services.password.reset.token': token\n            },\n            {$set: {'services.password.bcrypt': hashed,\n                    'emails.$.verified': true},\n              $unset: {'services.password.reset': 1 }});\n        }\n        if (affectedRecords !== 1)\n          return {\n            userId: user._id,\n            error: new Meteor.Error(403, \"Invalid email\")\n          };\n      } catch (err) {\n        resetToOldToken();\n        throw err;\n      }\n\n      // Replace all valid login tokens with new ones (changing\n      // password should invalidate existing sessions).\n      Accounts._clearAllLoginTokens(user._id);\n\n      return {userId: user._id};\n    }\n  );\n}});\n\n///\n/// EMAIL VERIFICATION\n///\n\n\n// send the user an email with a link that when opened marks that\n// address as verified\n\n/**\n * @summary Send an email with a link the user can use verify their email address.\n * @locus Server\n * @param {String} userId The id of the user to send email to.\n * @param {String} [email] Optional. Which address of the user's to send the email to. This address must be in the user's `emails` list. Defaults to the first unverified email in the list.\n * @param {Object} [extraTokenData] Optional additional data to be added into the token record.\n * @param {Object} [extraParams] Optional additional params to be added to the verification url.\n *\n * @returns {Object} Object with {email, user, token, url, options} values.\n * @importFromPackage accounts-base\n */\nAccounts.sendVerificationEmail = (userId, email, extraTokenData, extraParams) => {\n  // XXX Also generate a link using which someone can delete this\n  // account if they own said address but weren't those who created\n  // this account.\n\n  const {email: realEmail, user, token} =\n    Accounts.generateVerificationToken(userId, email, extraTokenData);\n  const url = Accounts.urls.verifyEmail(token, extraParams);\n  const options = Accounts.generateOptionsForEmail(realEmail, user, url, 'verifyEmail');\n  Email.send(options);\n  if (Meteor.isDevelopment) {\n    console.log(`\\nVerification email URL: ${url}`);\n  }\n  return {email: realEmail, user, token, url, options};\n};\n\n// Take token from sendVerificationEmail, mark the email as verified,\n// and log them in.\nMeteor.methods({verifyEmail: function (...args) {\n  const token = args[0];\n  return Accounts._loginMethod(\n    this,\n    \"verifyEmail\",\n    args,\n    \"password\",\n    () => {\n      check(token, String);\n\n      const user = Meteor.users.findOne(\n        {'services.email.verificationTokens.token': token},\n        {fields: {\n          services: 1,\n          emails: 1,\n        }}\n      );\n      if (!user)\n        throw new Meteor.Error(403, \"Verify email link expired\");\n\n        const tokenRecord = user.services.email.verificationTokens.find(\n          t => t.token == token\n        );\n      if (!tokenRecord)\n        return {\n          userId: user._id,\n          error: new Meteor.Error(403, \"Verify email link expired\")\n        };\n\n      const emailsRecord = user.emails.find(\n        e => e.address == tokenRecord.address\n      );\n      if (!emailsRecord)\n        return {\n          userId: user._id,\n          error: new Meteor.Error(403, \"Verify email link is for unknown address\")\n        };\n\n      // By including the address in the query, we can use 'emails.$' in the\n      // modifier to get a reference to the specific object in the emails\n      // array. See\n      // http://www.mongodb.org/display/DOCS/Updating/#Updating-The%24positionaloperator)\n      // http://www.mongodb.org/display/DOCS/Updating#Updating-%24pull\n      Meteor.users.update(\n        {_id: user._id,\n         'emails.address': tokenRecord.address},\n        {$set: {'emails.$.verified': true},\n         $pull: {'services.email.verificationTokens': {address: tokenRecord.address}}});\n\n      return {userId: user._id};\n    }\n  );\n}});\n\n/**\n * @summary Add an email address for a user. Use this instead of directly\n * updating the database. The operation will fail if there is a different user\n * with an email only differing in case. If the specified user has an existing\n * email only differing in case however, we replace it.\n * @locus Server\n * @param {String} userId The ID of the user to update.\n * @param {String} newEmail A new email address for the user.\n * @param {Boolean} [verified] Optional - whether the new email address should\n * be marked as verified. Defaults to false.\n * @importFromPackage accounts-base\n */\nAccounts.addEmail = (userId, newEmail, verified) => {\n  check(userId, NonEmptyString);\n  check(newEmail, NonEmptyString);\n  check(verified, Match.Optional(Boolean));\n\n  if (verified === void 0) {\n    verified = false;\n  }\n\n  const user = getUserById(userId, {fields: {emails: 1}});\n  if (!user)\n    throw new Meteor.Error(403, \"User not found\");\n\n  // Allow users to change their own email to a version with a different case\n\n  // We don't have to call checkForCaseInsensitiveDuplicates to do a case\n  // insensitive check across all emails in the database here because: (1) if\n  // there is no case-insensitive duplicate between this user and other users,\n  // then we are OK and (2) if this would create a conflict with other users\n  // then there would already be a case-insensitive duplicate and we can't fix\n  // that in this code anyway.\n  const caseInsensitiveRegExp =\n    new RegExp(`^${Meteor._escapeRegExp(newEmail)}$`, 'i');\n\n  const didUpdateOwnEmail = (user.emails || []).reduce(\n    (prev, email) => {\n      if (caseInsensitiveRegExp.test(email.address)) {\n        Meteor.users.update({\n          _id: user._id,\n          'emails.address': email.address\n        }, {$set: {\n          'emails.$.address': newEmail,\n          'emails.$.verified': verified\n        }});\n        return true;\n      } else {\n        return prev;\n      }\n    },\n    false\n  );\n\n  // In the other updates below, we have to do another call to\n  // checkForCaseInsensitiveDuplicates to make sure that no conflicting values\n  // were added to the database in the meantime. We don't have to do this for\n  // the case where the user is updating their email address to one that is the\n  // same as before, but only different because of capitalization. Read the\n  // big comment above to understand why.\n\n  if (didUpdateOwnEmail) {\n    return;\n  }\n\n  // Perform a case insensitive check for duplicates before update\n  checkForCaseInsensitiveDuplicates('emails.address', 'Email', newEmail, user._id);\n\n  Meteor.users.update({\n    _id: user._id\n  }, {\n    $addToSet: {\n      emails: {\n        address: newEmail,\n        verified: verified\n      }\n    }\n  });\n\n  // Perform another check after update, in case a matching user has been\n  // inserted in the meantime\n  try {\n    checkForCaseInsensitiveDuplicates('emails.address', 'Email', newEmail, user._id);\n  } catch (ex) {\n    // Undo update if the check fails\n    Meteor.users.update({_id: user._id},\n      {$pull: {emails: {address: newEmail}}});\n    throw ex;\n  }\n}\n\n/**\n * @summary Remove an email address for a user. Use this instead of updating\n * the database directly.\n * @locus Server\n * @param {String} userId The ID of the user to update.\n * @param {String} email The email address to remove.\n * @importFromPackage accounts-base\n */\nAccounts.removeEmail = (userId, email) => {\n  check(userId, NonEmptyString);\n  check(email, NonEmptyString);\n\n  const user = getUserById(userId, {fields: {_id: 1}});\n  if (!user)\n    throw new Meteor.Error(403, \"User not found\");\n\n  Meteor.users.update({_id: user._id},\n    {$pull: {emails: {address: email}}});\n}\n\n///\n/// CREATING USERS\n///\n\n// Shared createUser function called from the createUser method, both\n// if originates in client or server code. Calls user provided hooks,\n// does the actual user insertion.\n//\n// returns the user id\nconst createUser = options => {\n  // Unknown keys allowed, because a onCreateUserHook can take arbitrary\n  // options.\n  check(options, Match.ObjectIncluding({\n    username: Match.Optional(String),\n    email: Match.Optional(String),\n    password: Match.Optional(passwordValidator)\n  }));\n\n  const { username, email, password } = options;\n  if (!username && !email)\n    throw new Meteor.Error(400, \"Need to set a username or email\");\n\n  const user = {services: {}};\n  if (password) {\n    const hashed = hashPassword(password);\n    user.services.password = { bcrypt: hashed };\n  }\n\n  if (username)\n    user.username = username;\n  if (email)\n    user.emails = [{address: email, verified: false}];\n\n  // Perform a case insensitive check before insert\n  checkForCaseInsensitiveDuplicates('username', 'Username', username);\n  checkForCaseInsensitiveDuplicates('emails.address', 'Email', email);\n\n  const userId = Accounts.insertUserDoc(options, user);\n  // Perform another check after insert, in case a matching user has been\n  // inserted in the meantime\n  try {\n    checkForCaseInsensitiveDuplicates('username', 'Username', username, userId);\n    checkForCaseInsensitiveDuplicates('emails.address', 'Email', email, userId);\n  } catch (ex) {\n    // Remove inserted user if the check fails\n    Meteor.users.remove(userId);\n    throw ex;\n  }\n  return userId;\n};\n\n// method for create user. Requests come from the client.\nMeteor.methods({createUser: function (...args) {\n  const options = args[0];\n  return Accounts._loginMethod(\n    this,\n    \"createUser\",\n    args,\n    \"password\",\n    () => {\n      // createUser() above does more checking.\n      check(options, Object);\n      if (Accounts._options.forbidClientAccountCreation)\n        return {\n          error: new Meteor.Error(403, \"Signups forbidden\")\n        };\n\n      const userId = Accounts.createUserVerifyingEmail(options);\n\n      // client gets logged in as the new user afterwards.\n      return {userId: userId};\n    }\n  );\n}});\n\n/**\n * @summary Creates an user and sends an email if `options.email` is informed.\n * Then if the `sendVerificationEmail` option from the `Accounts` package is\n * enabled, you'll send a verification email if `options.password` is informed,\n * otherwise you'll send an enrollment email.\n * @locus Server\n * @param {Object} options The options object to be passed down when creating\n * the user\n * @param {String} options.username A unique name for this user.\n * @param {String} options.email The user's email address.\n * @param {String} options.password The user's password. This is __not__ sent in plain text over the wire.\n * @param {Object} options.profile The user's profile, typically including the `name` field.\n * @importFromPackage accounts-base\n * */\nAccounts.createUserVerifyingEmail = (options) => {\n  options = { ...options };\n  // Create user. result contains id and token.\n  const userId = createUser(options);\n  // safety belt. createUser is supposed to throw on error. send 500 error\n  // instead of sending a verification email with empty userid.\n  if (! userId)\n    throw new Error(\"createUser failed to insert new user\");\n\n  // If `Accounts._options.sendVerificationEmail` is set, register\n  // a token to verify the user's primary email, and send it to\n  // that address.\n  if (options.email && Accounts._options.sendVerificationEmail) {\n    if (options.password) {\n      Accounts.sendVerificationEmail(userId, options.email);\n    } else {\n      Accounts.sendEnrollmentEmail(userId, options.email);\n    }\n  }\n\n  return userId;\n};\n\n// Create user directly on the server.\n//\n// Unlike the client version, this does not log you in as this user\n// after creation.\n//\n// returns userId or throws an error if it can't create\n//\n// XXX add another argument (\"server options\") that gets sent to onCreateUser,\n// which is always empty when called from the createUser method? eg, \"admin:\n// true\", which we want to prevent the client from setting, but which a custom\n// method calling Accounts.createUser could set?\n//\nAccounts.createUser = (options, callback) => {\n  options = { ...options };\n\n  // XXX allow an optional callback?\n  if (callback) {\n    throw new Error(\"Accounts.createUser with callback not supported on the server yet.\");\n  }\n\n  return createUser(options);\n};\n\n///\n/// PASSWORD-SPECIFIC INDEXES ON USERS\n///\nMeteor.users._ensureIndex('services.email.verificationTokens.token',\n                          { unique: true, sparse: true });\nMeteor.users._ensureIndex('services.password.reset.token',\n                          { unique: true, sparse: true });\nMeteor.users._ensureIndex('services.password.enroll.token',\n                          { unique: true, sparse: true });\n"]},"sourceType":"module","hash":"89e702d3fc372e3ad289c9c1eb47700fca071d97"}
