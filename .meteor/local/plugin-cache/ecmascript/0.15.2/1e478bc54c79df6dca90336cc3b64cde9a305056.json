{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\RUBEN\\Desktop\\meteor-vue\\packages\\aldeed:collection2\\collection2.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/aldeed:collection2/collection2.js","filename":"C:\\Users\\RUBEN\\Desktop\\meteor-vue\\packages\\aldeed:collection2\\collection2.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"C:\\Users\\RUBEN\\Desktop\\meteor-vue","root":"C:\\Users\\RUBEN\\Desktop\\meteor-vue","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.14.0","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"C:\\Users\\RUBEN\\Desktop\\meteor-vue\\packages\\aldeed:collection2\\collection2.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/aldeed:collection2/collection2.js"}},"code":"let _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n\n}, 0);\nlet EventEmitter;\nmodule.link(\"meteor/raix:eventemitter\", {\n  EventEmitter(v) {\n    EventEmitter = v;\n  }\n\n}, 0);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 1);\nlet Mongo;\nmodule.link(\"meteor/mongo\", {\n  Mongo(v) {\n    Mongo = v;\n  }\n\n}, 2);\nlet checkNpmVersions;\nmodule.link(\"meteor/tmeasday:check-npm-versions\", {\n  checkNpmVersions(v) {\n    checkNpmVersions = v;\n  }\n\n}, 3);\nlet EJSON;\nmodule.link(\"meteor/ejson\", {\n  EJSON(v) {\n    EJSON = v;\n  }\n\n}, 4);\nlet isEmpty;\nmodule.link(\"lodash.isempty\", {\n  default(v) {\n    isEmpty = v;\n  }\n\n}, 5);\nlet isEqual;\nmodule.link(\"lodash.isequal\", {\n  default(v) {\n    isEqual = v;\n  }\n\n}, 6);\nlet isObject;\nmodule.link(\"lodash.isobject\", {\n  default(v) {\n    isObject = v;\n  }\n\n}, 7);\nlet flattenSelector;\nmodule.link(\"./lib\", {\n  flattenSelector(v) {\n    flattenSelector = v;\n  }\n\n}, 8);\ncheckNpmVersions({\n  'simpl-schema': '>=0.0.0'\n}, 'aldeed:collection2');\n\nconst SimpleSchema = require('simpl-schema').default; // Exported only for listening to events\n\n\nconst Collection2 = new EventEmitter();\nconst defaultCleanOptions = {\n  filter: true,\n  autoConvert: true,\n  removeEmptyStrings: true,\n  trimStrings: true,\n  removeNullsFromArrays: false\n};\n/**\n * Mongo.Collection.prototype.attachSchema\n * @param {SimpleSchema|Object} ss - SimpleSchema instance or a schema definition object\n *    from which to create a new SimpleSchema instance\n * @param {Object} [options]\n * @param {Boolean} [options.transform=false] Set to `true` if your document must be passed\n *    through the collection's transform to properly validate.\n * @param {Boolean} [options.replace=false] Set to `true` to replace any existing schema instead of combining\n * @return {undefined}\n *\n * Use this method to attach a schema to a collection created by another package,\n * such as Meteor.users. It is most likely unsafe to call this method more than\n * once for a single collection, or to call this for a collection that had a\n * schema object passed to its constructor.\n */\n\nMongo.Collection.prototype.attachSchema = function c2AttachSchema(ss, options) {\n  options = options || {}; // Allow passing just the schema object\n\n  if (!SimpleSchema.isSimpleSchema(ss)) {\n    ss = new SimpleSchema(ss);\n  }\n\n  function attachTo(obj) {\n    // we need an array to hold multiple schemas\n    // position 0 is reserved for the \"base\" schema\n    obj._c2 = obj._c2 || {};\n    obj._c2._simpleSchemas = obj._c2._simpleSchemas || [null];\n\n    if (typeof options.selector === \"object\") {\n      // Selector Schemas\n      // Extend selector schema with base schema\n      const baseSchema = obj._c2._simpleSchemas[0];\n\n      if (baseSchema) {\n        ss = extendSchema(baseSchema.schema, ss);\n      } // Index of existing schema with identical selector\n\n\n      let schemaIndex; // Loop through existing schemas with selectors,\n\n      for (schemaIndex = obj._c2._simpleSchemas.length - 1; 0 < schemaIndex; schemaIndex--) {\n        const schema = obj._c2._simpleSchemas[schemaIndex];\n        if (schema && isEqual(schema.selector, options.selector)) break;\n      }\n\n      if (schemaIndex <= 0) {\n        // We didn't find the schema in our array - push it into the array\n        obj._c2._simpleSchemas.push({\n          schema: ss,\n          selector: options.selector\n        });\n      } else {\n        // We found a schema with an identical selector in our array,\n        if (options.replace === true) {\n          // Replace existing selector schema with new selector schema\n          obj._c2._simpleSchemas[schemaIndex].schema = ss;\n        } else {\n          // Extend existing selector schema with new selector schema.\n          obj._c2._simpleSchemas[schemaIndex].schema = extendSchema(obj._c2._simpleSchemas[schemaIndex].schema, ss);\n        }\n      }\n    } else {\n      // Base Schema\n      if (options.replace === true) {\n        // Replace base schema and delete all other schemas\n        obj._c2._simpleSchemas = [{\n          schema: ss,\n          selector: options.selector\n        }];\n      } else {\n        // Set base schema if not yet set\n        if (!obj._c2._simpleSchemas[0]) {\n          return obj._c2._simpleSchemas[0] = {\n            schema: ss,\n            selector: undefined\n          };\n        } // Extend base schema and therefore extend all schemas\n\n\n        obj._c2._simpleSchemas.forEach((schema, index) => {\n          if (obj._c2._simpleSchemas[index]) {\n            obj._c2._simpleSchemas[index].schema = extendSchema(obj._c2._simpleSchemas[index].schema, ss);\n          }\n        });\n      }\n    }\n  }\n\n  attachTo(this); // Attach the schema to the underlying LocalCollection, too\n\n  if (this._collection instanceof LocalCollection) {\n    this._collection._c2 = this._collection._c2 || {};\n    attachTo(this._collection);\n  }\n\n  defineDeny(this, options);\n  keepInsecure(this);\n  Collection2.emit('schema.attached', this, ss, options);\n};\n\n[Mongo.Collection, LocalCollection].forEach(obj => {\n  /**\n   * simpleSchema\n   * @description function detect the correct schema by given params. If it\n   * detect multi-schema presence in the collection, then it made an attempt to find a\n   * `selector` in args\n   * @param {Object} doc - It could be <update> on update/upsert or document\n   * itself on insert/remove\n   * @param {Object} [options] - It could be <update> on update/upsert etc\n   * @param {Object} [query] - it could be <query> on update/upsert\n   * @return {Object} Schema\n   */\n  obj.prototype.simpleSchema = function (doc, options, query) {\n    if (!this._c2) return null;\n    if (this._c2._simpleSchema) return this._c2._simpleSchema;\n    const schemas = this._c2._simpleSchemas;\n\n    if (schemas && schemas.length > 0) {\n      let schema, selector, target; // Position 0 reserved for base schema\n\n      for (var i = 1; i < schemas.length; i++) {\n        schema = schemas[i];\n        selector = Object.keys(schema.selector)[0]; // We will set this to undefined because in theory you might want to select\n        // on a null value.\n\n        target = undefined; // here we are looking for selector in different places\n        // $set should have more priority here\n\n        if (doc.$set && typeof doc.$set[selector] !== 'undefined') {\n          target = doc.$set[selector];\n        } else if (typeof doc[selector] !== 'undefined') {\n          target = doc[selector];\n        } else if (options && options.selector) {\n          target = options.selector[selector];\n        } else if (query && query[selector]) {\n          // on upsert/update operations\n          target = query[selector];\n        } // we need to compare given selector with doc property or option to\n        // find right schema\n\n\n        if (target !== undefined && target === schema.selector[selector]) {\n          return schema.schema;\n        }\n      }\n\n      if (schemas[0]) {\n        return schemas[0].schema;\n      } else {\n        throw new Error(\"No default schema\");\n      }\n    }\n\n    return null;\n  };\n}); // Wrap DB write operation methods\n\n['insert', 'update'].forEach(methodName => {\n  const _super = Mongo.Collection.prototype[methodName];\n\n  Mongo.Collection.prototype[methodName] = function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    let options = methodName === \"insert\" ? args[1] : args[2]; // Support missing options arg\n\n    if (!options || typeof options === \"function\") {\n      options = {};\n    }\n\n    if (this._c2 && options.bypassCollection2 !== true) {\n      let userId = null;\n\n      try {\n        // https://github.com/aldeed/meteor-collection2/issues/175\n        userId = Meteor.userId();\n      } catch (err) {}\n\n      args = doValidate(this, methodName, args, Meteor.isServer || this._connection === null, // getAutoValues\n      userId, Meteor.isServer // isFromTrustedCode\n      );\n\n      if (!args) {\n        // doValidate already called the callback or threw the error so we're done.\n        // But insert should always return an ID to match core behavior.\n        return methodName === \"insert\" ? this._makeNewID() : undefined;\n      }\n    } else {\n      // We still need to adjust args because insert does not take options\n      if (methodName === \"insert\" && typeof args[1] !== 'function') args.splice(1, 1);\n    }\n\n    return _super.apply(this, args);\n  };\n});\n/*\n * Private\n */\n\nfunction doValidate(collection, type, args, getAutoValues, userId, isFromTrustedCode) {\n  let doc, callback, error, options, isUpsert, selector, last, hasCallback;\n\n  if (!args.length) {\n    throw new Error(type + \" requires an argument\");\n  } // Gather arguments and cache the selector\n\n\n  if (type === \"insert\") {\n    doc = args[0];\n    options = args[1];\n    callback = args[2]; // The real insert doesn't take options\n\n    if (typeof options === \"function\") {\n      args = [doc, options];\n    } else if (typeof callback === \"function\") {\n      args = [doc, callback];\n    } else {\n      args = [doc];\n    }\n  } else if (type === \"update\") {\n    selector = args[0];\n    doc = args[1];\n    options = args[2];\n    callback = args[3];\n  } else {\n    throw new Error(\"invalid type argument\");\n  }\n\n  const validatedObjectWasInitiallyEmpty = isEmpty(doc); // Support missing options arg\n\n  if (!callback && typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n\n  options = options || {};\n  last = args.length - 1;\n  hasCallback = typeof args[last] === 'function'; // If update was called with upsert:true, flag as an upsert\n\n  isUpsert = type === \"update\" && options.upsert === true; // we need to pass `doc` and `options` to `simpleSchema` method, that's why\n  // schema declaration moved here\n\n  let schema = collection.simpleSchema(doc, options, selector);\n  const isLocalCollection = collection._connection === null; // On the server and for local collections, we allow passing `getAutoValues: false` to disable autoValue functions\n\n  if ((Meteor.isServer || isLocalCollection) && options.getAutoValues === false) {\n    getAutoValues = false;\n  } // Process pick/omit options if they are present\n\n\n  const picks = Array.isArray(options.pick) ? options.pick : null;\n  const omits = Array.isArray(options.omit) ? options.omit : null;\n\n  if (picks && omits) {\n    // Pick and omit cannot both be present in the options\n    throw new Error('pick and omit options are mutually exclusive');\n  } else if (picks) {\n    schema = schema.pick(...picks);\n  } else if (omits) {\n    schema = schema.omit(...omits);\n  } // Determine validation context\n\n\n  let validationContext = options.validationContext;\n\n  if (validationContext) {\n    if (typeof validationContext === 'string') {\n      validationContext = schema.namedContext(validationContext);\n    }\n  } else {\n    validationContext = schema.namedContext();\n  } // Add a default callback function if we're on the client and no callback was given\n\n\n  if (Meteor.isClient && !callback) {\n    // Client can't block, so it can't report errors by exception,\n    // only by callback. If they forget the callback, give them a\n    // default one that logs the error, so they aren't totally\n    // baffled if their writes don't work because their database is\n    // down.\n    callback = function (err) {\n      if (err) {\n        Meteor._debug(type + \" failed: \" + (err.reason || err.stack));\n      }\n    };\n  } // If client validation is fine or is skipped but then something\n  // is found to be invalid on the server, we get that error back\n  // as a special Meteor.Error that we need to parse.\n\n\n  if (Meteor.isClient && hasCallback) {\n    callback = args[last] = wrapCallbackForParsingServerErrors(validationContext, callback);\n  }\n\n  const schemaAllowsId = schema.allowsKey(\"_id\");\n\n  if (type === \"insert\" && !doc._id && schemaAllowsId) {\n    doc._id = collection._makeNewID();\n  } // Get the docId for passing in the autoValue/custom context\n\n\n  let docId;\n\n  if (type === 'insert') {\n    docId = doc._id; // might be undefined\n  } else if (type === \"update\" && selector) {\n    docId = typeof selector === 'string' || selector instanceof Mongo.ObjectID ? selector : selector._id;\n  } // If _id has already been added, remove it temporarily if it's\n  // not explicitly defined in the schema.\n\n\n  let cachedId;\n\n  if (doc._id && !schemaAllowsId) {\n    cachedId = doc._id;\n    delete doc._id;\n  }\n\n  const autoValueContext = {\n    isInsert: type === \"insert\",\n    isUpdate: type === \"update\" && options.upsert !== true,\n    isUpsert,\n    userId,\n    isFromTrustedCode,\n    docId,\n    isLocalCollection\n  };\n\n  const extendAutoValueContext = _objectSpread(_objectSpread(_objectSpread({}, (schema._cleanOptions || {}).extendAutoValueContext || {}), autoValueContext), options.extendAutoValueContext);\n\n  const cleanOptionsForThisOperation = {};\n  [\"autoConvert\", \"filter\", \"removeEmptyStrings\", \"removeNullsFromArrays\", \"trimStrings\"].forEach(prop => {\n    if (typeof options[prop] === \"boolean\") {\n      cleanOptionsForThisOperation[prop] = options[prop];\n    }\n  }); // Preliminary cleaning on both client and server. On the server and for local\n  // collections, automatic values will also be set at this point.\n\n  schema.clean(doc, _objectSpread(_objectSpread(_objectSpread(_objectSpread({\n    mutate: true,\n    // Clean the doc/modifier in place\n    isModifier: type !== \"insert\"\n  }, defaultCleanOptions), schema._cleanOptions || {}), cleanOptionsForThisOperation), {}, {\n    extendAutoValueContext,\n    // This was extended separately above\n    getAutoValues // Force this override\n\n  })); // We clone before validating because in some cases we need to adjust the\n  // object a bit before validating it. If we adjusted `doc` itself, our\n  // changes would persist into the database.\n\n  let docToValidate = {};\n\n  for (var prop in doc) {\n    // We omit prototype properties when cloning because they will not be valid\n    // and mongo omits them when saving to the database anyway.\n    if (Object.prototype.hasOwnProperty.call(doc, prop)) {\n      docToValidate[prop] = doc[prop];\n    }\n  } // On the server, upserts are possible; SimpleSchema handles upserts pretty\n  // well by default, but it will not know about the fields in the selector,\n  // which are also stored in the database if an insert is performed. So we\n  // will allow these fields to be considered for validation by adding them\n  // to the $set in the modifier, while stripping out query selectors as these\n  // don't make it into the upserted document and break validation.\n  // This is no doubt prone to errors, but there probably isn't any better way\n  // right now.\n\n\n  if (Meteor.isServer && isUpsert && isObject(selector)) {\n    const set = docToValidate.$set || {};\n    docToValidate.$set = flattenSelector(selector);\n    if (!schemaAllowsId) delete docToValidate.$set._id;\n    Object.assign(docToValidate.$set, set);\n  } // Set automatic values for validation on the client.\n  // On the server, we already updated doc with auto values, but on the client,\n  // we will add them to docToValidate for validation purposes only.\n  // This is because we want all actual values generated on the server.\n\n\n  if (Meteor.isClient && !isLocalCollection) {\n    schema.clean(docToValidate, {\n      autoConvert: false,\n      extendAutoValueContext,\n      filter: false,\n      getAutoValues: true,\n      isModifier: type !== \"insert\",\n      mutate: true,\n      // Clean the doc/modifier in place\n      removeEmptyStrings: false,\n      removeNullsFromArrays: false,\n      trimStrings: false\n    });\n  } // XXX Maybe move this into SimpleSchema\n\n\n  if (!validatedObjectWasInitiallyEmpty && isEmpty(docToValidate)) {\n    throw new Error('After filtering out keys not in the schema, your ' + (type === 'update' ? 'modifier' : 'object') + ' is now empty');\n  } // Validate doc\n\n\n  let isValid;\n\n  if (options.validate === false) {\n    isValid = true;\n  } else {\n    isValid = validationContext.validate(docToValidate, {\n      modifier: type === \"update\" || type === \"upsert\",\n      upsert: isUpsert,\n      extendedCustomContext: _objectSpread({\n        isInsert: type === \"insert\",\n        isUpdate: type === \"update\" && options.upsert !== true,\n        isUpsert,\n        userId,\n        isFromTrustedCode,\n        docId,\n        isLocalCollection\n      }, options.extendedCustomContext || {})\n    });\n  }\n\n  if (isValid) {\n    // Add the ID back\n    if (cachedId) {\n      doc._id = cachedId;\n    } // Update the args to reflect the cleaned doc\n    // XXX not sure this is necessary since we mutate\n\n\n    if (type === \"insert\") {\n      args[0] = doc;\n    } else {\n      args[1] = doc;\n    } // If callback, set invalidKey when we get a mongo unique error\n\n\n    if (Meteor.isServer && hasCallback) {\n      args[last] = wrapCallbackForParsingMongoValidationErrors(validationContext, args[last]);\n    }\n\n    return args;\n  } else {\n    var _Meteor$settings, _Meteor$settings$pack, _Meteor$settings$pack2;\n\n    error = getErrorObject(validationContext, (_Meteor$settings = Meteor.settings) !== null && _Meteor$settings !== void 0 && (_Meteor$settings$pack = _Meteor$settings.packages) !== null && _Meteor$settings$pack !== void 0 && (_Meteor$settings$pack2 = _Meteor$settings$pack.collection2) !== null && _Meteor$settings$pack2 !== void 0 && _Meteor$settings$pack2.disableCollectionNamesInValidation ? '' : \"in \".concat(collection._name, \" \").concat(type));\n\n    if (callback) {\n      // insert/update/upsert pass `false` when there's an error, so we do that\n      callback(error, false);\n    } else {\n      throw error;\n    }\n  }\n}\n\nfunction getErrorObject(context) {\n  let appendToMessage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  let message;\n  const invalidKeys = typeof context.validationErrors === 'function' ? context.validationErrors() : context.invalidKeys();\n\n  if (invalidKeys.length) {\n    const firstErrorKey = invalidKeys[0].name;\n    const firstErrorMessage = context.keyErrorMessage(firstErrorKey); // If the error is in a nested key, add the full key to the error message\n    // to be more helpful.\n\n    if (firstErrorKey.indexOf('.') === -1) {\n      message = firstErrorMessage;\n    } else {\n      message = \"\".concat(firstErrorMessage, \" (\").concat(firstErrorKey, \")\");\n    }\n  } else {\n    message = \"Failed validation\";\n  }\n\n  message = \"\".concat(message, \" \").concat(appendToMessage).trim();\n  const error = new Error(message);\n  error.invalidKeys = invalidKeys;\n  error.validationContext = context; // If on the server, we add a sanitized error, too, in case we're\n  // called from a method.\n\n  if (Meteor.isServer) {\n    error.sanitizedError = new Meteor.Error(400, message, EJSON.stringify(error.invalidKeys));\n  }\n\n  return error;\n}\n\nfunction addUniqueError(context, errorMessage) {\n  const name = errorMessage.split('c2_')[1].split(' ')[0];\n  const val = errorMessage.split('dup key:')[1].split('\"')[1];\n  const addValidationErrorsPropName = typeof context.addValidationErrors === 'function' ? 'addValidationErrors' : 'addInvalidKeys';\n  context[addValidationErrorsPropName]([{\n    name: name,\n    type: 'notUnique',\n    value: val\n  }]);\n}\n\nfunction wrapCallbackForParsingMongoValidationErrors(validationContext, cb) {\n  return function wrappedCallbackForParsingMongoValidationErrors() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    const error = args[0];\n\n    if (error && (error.name === \"MongoError\" && error.code === 11001 || error.message.indexOf('MongoError: E11000') !== -1) && error.message.indexOf('c2_') !== -1) {\n      addUniqueError(validationContext, error.message);\n      args[0] = getErrorObject(validationContext);\n    }\n\n    return cb.apply(this, args);\n  };\n}\n\nfunction wrapCallbackForParsingServerErrors(validationContext, cb) {\n  const addValidationErrorsPropName = typeof validationContext.addValidationErrors === 'function' ? 'addValidationErrors' : 'addInvalidKeys';\n  return function wrappedCallbackForParsingServerErrors() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    const error = args[0]; // Handle our own validation errors\n\n    if (error instanceof Meteor.Error && error.error === 400 && error.reason === \"INVALID\" && typeof error.details === \"string\") {\n      const invalidKeysFromServer = EJSON.parse(error.details);\n      validationContext[addValidationErrorsPropName](invalidKeysFromServer);\n      args[0] = getErrorObject(validationContext);\n    } // Handle Mongo unique index errors, which are forwarded to the client as 409 errors\n    else if (error instanceof Meteor.Error && error.error === 409 && error.reason && error.reason.indexOf('E11000') !== -1 && error.reason.indexOf('c2_') !== -1) {\n        addUniqueError(validationContext, error.reason);\n        args[0] = getErrorObject(validationContext);\n      }\n\n    return cb.apply(this, args);\n  };\n}\n\nlet alreadyInsecure = {};\n\nfunction keepInsecure(c) {\n  // If insecure package is in use, we need to add allow rules that return\n  // true. Otherwise, it would seemingly turn off insecure mode.\n  if (Package && Package.insecure && !alreadyInsecure[c._name]) {\n    c.allow({\n      insert: function () {\n        return true;\n      },\n      update: function () {\n        return true;\n      },\n      remove: function () {\n        return true;\n      },\n      fetch: [],\n      transform: null\n    });\n    alreadyInsecure[c._name] = true;\n  } // If insecure package is NOT in use, then adding the two deny functions\n  // does not have any effect on the main app's security paradigm. The\n  // user will still be required to add at least one allow function of her\n  // own for each operation for this collection. And the user may still add\n  // additional deny functions, but does not have to.\n\n}\n\nlet alreadyDefined = {};\n\nfunction defineDeny(c, options) {\n  if (!alreadyDefined[c._name]) {\n    const isLocalCollection = c._connection === null; // First define deny functions to extend doc with the results of clean\n    // and auto-values. This must be done with \"transform: null\" or we would be\n    // extending a clone of doc and therefore have no effect.\n\n    c.deny({\n      insert: function (userId, doc) {\n        // Referenced doc is cleaned in place\n        c.simpleSchema(doc).clean(doc, {\n          mutate: true,\n          isModifier: false,\n          // We don't do these here because they are done on the client if desired\n          filter: false,\n          autoConvert: false,\n          removeEmptyStrings: false,\n          trimStrings: false,\n          extendAutoValueContext: {\n            isInsert: true,\n            isUpdate: false,\n            isUpsert: false,\n            userId: userId,\n            isFromTrustedCode: false,\n            docId: doc._id,\n            isLocalCollection: isLocalCollection\n          }\n        });\n        return false;\n      },\n      update: function (userId, doc, fields, modifier) {\n        // Referenced modifier is cleaned in place\n        c.simpleSchema(modifier).clean(modifier, {\n          mutate: true,\n          isModifier: true,\n          // We don't do these here because they are done on the client if desired\n          filter: false,\n          autoConvert: false,\n          removeEmptyStrings: false,\n          trimStrings: false,\n          extendAutoValueContext: {\n            isInsert: false,\n            isUpdate: true,\n            isUpsert: false,\n            userId: userId,\n            isFromTrustedCode: false,\n            docId: doc && doc._id,\n            isLocalCollection: isLocalCollection\n          }\n        });\n        return false;\n      },\n      fetch: ['_id'],\n      transform: null\n    }); // Second define deny functions to validate again on the server\n    // for client-initiated inserts and updates. These should be\n    // called after the clean/auto-value functions since we're adding\n    // them after. These must *not* have \"transform: null\" if options.transform is true because\n    // we need to pass the doc through any transforms to be sure\n    // that custom types are properly recognized for type validation.\n\n    c.deny(_objectSpread({\n      insert: function (userId, doc) {\n        // We pass the false options because we will have done them on client if desired\n        doValidate(c, \"insert\", [doc, {\n          trimStrings: false,\n          removeEmptyStrings: false,\n          filter: false,\n          autoConvert: false\n        }, function (error) {\n          if (error) {\n            throw new Meteor.Error(400, 'INVALID', EJSON.stringify(error.invalidKeys));\n          }\n        }], false, // getAutoValues\n        userId, false // isFromTrustedCode\n        );\n        return false;\n      },\n      update: function (userId, doc, fields, modifier) {\n        // NOTE: This will never be an upsert because client-side upserts\n        // are not allowed once you define allow/deny functions.\n        // We pass the false options because we will have done them on client if desired\n        doValidate(c, \"update\", [{\n          _id: doc && doc._id\n        }, modifier, {\n          trimStrings: false,\n          removeEmptyStrings: false,\n          filter: false,\n          autoConvert: false\n        }, function (error) {\n          if (error) {\n            throw new Meteor.Error(400, 'INVALID', EJSON.stringify(error.invalidKeys));\n          }\n        }], false, // getAutoValues\n        userId, false // isFromTrustedCode\n        );\n        return false;\n      },\n      fetch: ['_id']\n    }, options.transform === true ? {} : {\n      transform: null\n    })); // note that we've already done this collection so that we don't do it again\n    // if attachSchema is called again\n\n    alreadyDefined[c._name] = true;\n  }\n}\n\nfunction extendSchema(s1, s2) {\n  if (s2.version >= 2) {\n    const ss = new SimpleSchema(s1);\n    ss.extend(s2);\n    return ss;\n  } else {\n    return new SimpleSchema([s1, s2]);\n  }\n}\n\nmodule.exportDefault(Collection2);","map":{"version":3,"sources":["packages/aldeed:collection2/collection2.js"],"names":["_objectSpread","module","link","default","v","EventEmitter","Meteor","Mongo","checkNpmVersions","EJSON","isEmpty","isEqual","isObject","flattenSelector","SimpleSchema","require","Collection2","defaultCleanOptions","filter","autoConvert","removeEmptyStrings","trimStrings","removeNullsFromArrays","Collection","prototype","attachSchema","c2AttachSchema","ss","options","isSimpleSchema","attachTo","obj","_c2","_simpleSchemas","selector","baseSchema","extendSchema","schema","schemaIndex","length","push","replace","undefined","forEach","index","_collection","LocalCollection","defineDeny","keepInsecure","emit","simpleSchema","doc","query","_simpleSchema","schemas","target","i","Object","keys","$set","Error","methodName","_super","args","bypassCollection2","userId","err","doValidate","isServer","_connection","_makeNewID","splice","apply","collection","type","getAutoValues","isFromTrustedCode","callback","error","isUpsert","last","hasCallback","validatedObjectWasInitiallyEmpty","upsert","isLocalCollection","picks","Array","isArray","pick","omits","omit","validationContext","namedContext","isClient","_debug","reason","stack","wrapCallbackForParsingServerErrors","schemaAllowsId","allowsKey","_id","docId","ObjectID","cachedId","autoValueContext","isInsert","isUpdate","extendAutoValueContext","_cleanOptions","cleanOptionsForThisOperation","prop","clean","mutate","isModifier","docToValidate","hasOwnProperty","call","set","assign","isValid","validate","modifier","extendedCustomContext","wrapCallbackForParsingMongoValidationErrors","getErrorObject","settings","packages","collection2","disableCollectionNamesInValidation","_name","context","appendToMessage","message","invalidKeys","validationErrors","firstErrorKey","name","firstErrorMessage","keyErrorMessage","indexOf","trim","sanitizedError","stringify","addUniqueError","errorMessage","split","val","addValidationErrorsPropName","addValidationErrors","value","cb","wrappedCallbackForParsingMongoValidationErrors","code","wrappedCallbackForParsingServerErrors","details","invalidKeysFromServer","parse","alreadyInsecure","c","Package","insecure","allow","insert","update","remove","fetch","transform","alreadyDefined","deny","fields","s1","s2","version","extend","exportDefault"],"mappings":"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","sourcesContent":["import { EventEmitter } from 'meteor/raix:eventemitter';\nimport { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { checkNpmVersions } from 'meteor/tmeasday:check-npm-versions';\nimport { EJSON } from 'meteor/ejson';\nimport isEmpty from 'lodash.isempty';\nimport isEqual from 'lodash.isequal';\nimport isObject from 'lodash.isobject';\nimport { flattenSelector } from './lib';\n\ncheckNpmVersions({ 'simpl-schema': '>=0.0.0' }, 'aldeed:collection2');\n\nconst SimpleSchema = require('simpl-schema').default;\n\n// Exported only for listening to events\nconst Collection2 = new EventEmitter();\n\nconst defaultCleanOptions = {\n  filter: true,\n  autoConvert: true,\n  removeEmptyStrings: true,\n  trimStrings: true,\n  removeNullsFromArrays: false,\n};\n\n/**\n * Mongo.Collection.prototype.attachSchema\n * @param {SimpleSchema|Object} ss - SimpleSchema instance or a schema definition object\n *    from which to create a new SimpleSchema instance\n * @param {Object} [options]\n * @param {Boolean} [options.transform=false] Set to `true` if your document must be passed\n *    through the collection's transform to properly validate.\n * @param {Boolean} [options.replace=false] Set to `true` to replace any existing schema instead of combining\n * @return {undefined}\n *\n * Use this method to attach a schema to a collection created by another package,\n * such as Meteor.users. It is most likely unsafe to call this method more than\n * once for a single collection, or to call this for a collection that had a\n * schema object passed to its constructor.\n */\nMongo.Collection.prototype.attachSchema = function c2AttachSchema(ss, options) {\n  options = options || {};\n\n  // Allow passing just the schema object\n  if (!SimpleSchema.isSimpleSchema(ss)) {\n    ss = new SimpleSchema(ss);\n  }\n\n  function attachTo(obj) {\n    // we need an array to hold multiple schemas\n    // position 0 is reserved for the \"base\" schema\n    obj._c2 = obj._c2 || {};\n    obj._c2._simpleSchemas = obj._c2._simpleSchemas || [ null ];\n\n    if (typeof options.selector === \"object\") {\n      // Selector Schemas\n\n      // Extend selector schema with base schema\n      const baseSchema = obj._c2._simpleSchemas[0];\n      if (baseSchema) {\n        ss = extendSchema(baseSchema.schema, ss);\n      }\n\n      // Index of existing schema with identical selector\n      let schemaIndex;\n\n      // Loop through existing schemas with selectors,\n      for (schemaIndex = obj._c2._simpleSchemas.length - 1; 0 < schemaIndex; schemaIndex--) {\n        const schema = obj._c2._simpleSchemas[schemaIndex];\n        if (schema && isEqual(schema.selector, options.selector)) break;\n      }\n\n      if (schemaIndex <= 0) {\n        // We didn't find the schema in our array - push it into the array\n        obj._c2._simpleSchemas.push({\n          schema: ss,\n          selector: options.selector,\n        });\n      } else {\n        // We found a schema with an identical selector in our array,\n        if (options.replace === true) {\n          // Replace existing selector schema with new selector schema\n          obj._c2._simpleSchemas[schemaIndex].schema = ss;\n        } else {\n          // Extend existing selector schema with new selector schema.\n          obj._c2._simpleSchemas[schemaIndex].schema = extendSchema(obj._c2._simpleSchemas[schemaIndex].schema, ss);\n        }\n      }\n    } else {\n      // Base Schema\n      if (options.replace === true) {\n        // Replace base schema and delete all other schemas\n        obj._c2._simpleSchemas = [{\n          schema: ss,\n          selector: options.selector,\n        }];\n      } else {\n        // Set base schema if not yet set\n        if (!obj._c2._simpleSchemas[0]) {\n          return obj._c2._simpleSchemas[0] = { schema: ss, selector: undefined };\n        }\n        // Extend base schema and therefore extend all schemas\n        obj._c2._simpleSchemas.forEach((schema, index) => {\n          if (obj._c2._simpleSchemas[index]) {\n            obj._c2._simpleSchemas[index].schema = extendSchema(obj._c2._simpleSchemas[index].schema, ss);\n          }\n        });\n      }\n    }\n  }\n\n  attachTo(this);\n  // Attach the schema to the underlying LocalCollection, too\n  if (this._collection instanceof LocalCollection) {\n    this._collection._c2 = this._collection._c2 || {};\n    attachTo(this._collection);\n  }\n\n  defineDeny(this, options);\n  keepInsecure(this);\n\n  Collection2.emit('schema.attached', this, ss, options);\n};\n\n[Mongo.Collection, LocalCollection].forEach((obj) => {\n  /**\n   * simpleSchema\n   * @description function detect the correct schema by given params. If it\n   * detect multi-schema presence in the collection, then it made an attempt to find a\n   * `selector` in args\n   * @param {Object} doc - It could be <update> on update/upsert or document\n   * itself on insert/remove\n   * @param {Object} [options] - It could be <update> on update/upsert etc\n   * @param {Object} [query] - it could be <query> on update/upsert\n   * @return {Object} Schema\n   */\n  obj.prototype.simpleSchema = function (doc, options, query) {\n    if (!this._c2) return null;\n    if (this._c2._simpleSchema) return this._c2._simpleSchema;\n\n    const schemas = this._c2._simpleSchemas;\n    if (schemas && schemas.length > 0) {\n\n      let schema, selector, target;\n      // Position 0 reserved for base schema\n      for (var i = 1; i < schemas.length; i++) {\n        schema = schemas[i];\n        selector = Object.keys(schema.selector)[0];\n\n        // We will set this to undefined because in theory you might want to select\n        // on a null value.\n        target = undefined;\n        // here we are looking for selector in different places\n        // $set should have more priority here\n        if (doc.$set && typeof doc.$set[selector] !== 'undefined') {\n          target = doc.$set[selector];\n        } else if (typeof doc[selector] !== 'undefined') {\n          target = doc[selector];\n        } else if (options && options.selector) {\n          target = options.selector[selector];\n        } else if (query && query[selector]) { // on upsert/update operations\n          target = query[selector];\n        }\n\n        // we need to compare given selector with doc property or option to\n        // find right schema\n        if (target !== undefined && target === schema.selector[selector]) {\n          return schema.schema;\n        }\n      }\n      if (schemas[0]) {\n        return schemas[0].schema;\n      } else {\n        throw new Error(\"No default schema\");\n      }\n    }\n\n    return null;\n  };\n});\n\n// Wrap DB write operation methods\n['insert', 'update'].forEach((methodName) => {\n  const _super = Mongo.Collection.prototype[methodName];\n  Mongo.Collection.prototype[methodName] = function(...args) {\n    let options = (methodName === \"insert\") ? args[1] : args[2];\n\n    // Support missing options arg\n    if (!options || typeof options === \"function\") {\n      options = {};\n    }\n\n    if (this._c2 && options.bypassCollection2 !== true) {\n      let userId = null;\n      try { // https://github.com/aldeed/meteor-collection2/issues/175\n        userId = Meteor.userId();\n      } catch (err) {}\n\n      args = doValidate(\n        this,\n        methodName,\n        args,\n        Meteor.isServer || this._connection === null, // getAutoValues\n        userId,\n        Meteor.isServer // isFromTrustedCode\n      );\n      if (!args) {\n        // doValidate already called the callback or threw the error so we're done.\n        // But insert should always return an ID to match core behavior.\n        return methodName === \"insert\" ? this._makeNewID() : undefined;\n      }\n    } else {\n      // We still need to adjust args because insert does not take options\n      if (methodName === \"insert\" && typeof args[1] !== 'function') args.splice(1, 1);\n    }\n\n    return _super.apply(this, args);\n  };\n});\n\n/*\n * Private\n */\n\nfunction doValidate(collection, type, args, getAutoValues, userId, isFromTrustedCode) {\n  let doc, callback, error, options, isUpsert, selector, last, hasCallback;\n\n  if (!args.length) {\n    throw new Error(type + \" requires an argument\");\n  }\n\n  // Gather arguments and cache the selector\n  if (type === \"insert\") {\n    doc = args[0];\n    options = args[1];\n    callback = args[2];\n\n    // The real insert doesn't take options\n    if (typeof options === \"function\") {\n      args = [doc, options];\n    } else if (typeof callback === \"function\") {\n      args = [doc, callback];\n    } else {\n      args = [doc];\n    }\n  } else if (type === \"update\") {\n    selector = args[0];\n    doc = args[1];\n    options = args[2];\n    callback = args[3];\n  } else {\n    throw new Error(\"invalid type argument\");\n  }\n\n  const validatedObjectWasInitiallyEmpty = isEmpty(doc);\n\n  // Support missing options arg\n  if (!callback && typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n  options = options || {};\n\n  last = args.length - 1;\n\n  hasCallback = (typeof args[last] === 'function');\n\n  // If update was called with upsert:true, flag as an upsert\n  isUpsert = (type === \"update\" && options.upsert === true);\n\n  // we need to pass `doc` and `options` to `simpleSchema` method, that's why\n  // schema declaration moved here\n  let schema = collection.simpleSchema(doc, options, selector);\n  const isLocalCollection = (collection._connection === null);\n\n  // On the server and for local collections, we allow passing `getAutoValues: false` to disable autoValue functions\n  if ((Meteor.isServer || isLocalCollection) && options.getAutoValues === false) {\n    getAutoValues = false;\n  }\n\n  // Process pick/omit options if they are present\n  const picks = Array.isArray(options.pick) ? options.pick : null;\n  const omits = Array.isArray(options.omit) ? options.omit : null;\n\n  if (picks && omits) {\n    // Pick and omit cannot both be present in the options\n    throw new Error('pick and omit options are mutually exclusive');\n  } else if (picks) {\n    schema = schema.pick(...picks);\n  } else if (omits) {\n    schema = schema.omit(...omits);\n  }\n\n  // Determine validation context\n  let validationContext = options.validationContext;\n  if (validationContext) {\n    if (typeof validationContext === 'string') {\n      validationContext = schema.namedContext(validationContext);\n    }\n  } else {\n    validationContext = schema.namedContext();\n  }\n\n  // Add a default callback function if we're on the client and no callback was given\n  if (Meteor.isClient && !callback) {\n    // Client can't block, so it can't report errors by exception,\n    // only by callback. If they forget the callback, give them a\n    // default one that logs the error, so they aren't totally\n    // baffled if their writes don't work because their database is\n    // down.\n    callback = function(err) {\n      if (err) {\n        Meteor._debug(type + \" failed: \" + (err.reason || err.stack));\n      }\n    };\n  }\n\n  // If client validation is fine or is skipped but then something\n  // is found to be invalid on the server, we get that error back\n  // as a special Meteor.Error that we need to parse.\n  if (Meteor.isClient && hasCallback) {\n    callback = args[last] = wrapCallbackForParsingServerErrors(validationContext, callback);\n  }\n\n  const schemaAllowsId = schema.allowsKey(\"_id\");\n  if (type === \"insert\" && !doc._id && schemaAllowsId) {\n    doc._id = collection._makeNewID();\n  }\n\n  // Get the docId for passing in the autoValue/custom context\n  let docId;\n  if (type === 'insert') {\n    docId = doc._id; // might be undefined\n  } else if (type === \"update\" && selector) {\n    docId = typeof selector === 'string' || selector instanceof Mongo.ObjectID ? selector : selector._id;\n  }\n\n  // If _id has already been added, remove it temporarily if it's\n  // not explicitly defined in the schema.\n  let cachedId;\n  if (doc._id && !schemaAllowsId) {\n    cachedId = doc._id;\n    delete doc._id;\n  }\n\n  const autoValueContext = {\n    isInsert: (type === \"insert\"),\n    isUpdate: (type === \"update\" && options.upsert !== true),\n    isUpsert,\n    userId,\n    isFromTrustedCode,\n    docId,\n    isLocalCollection\n  };\n\n  const extendAutoValueContext = {\n    ...((schema._cleanOptions || {}).extendAutoValueContext || {}),\n    ...autoValueContext,\n    ...options.extendAutoValueContext,\n  };\n\n  const cleanOptionsForThisOperation = {};\n  [\"autoConvert\", \"filter\", \"removeEmptyStrings\", \"removeNullsFromArrays\", \"trimStrings\"].forEach(prop => {\n    if (typeof options[prop] === \"boolean\") {\n      cleanOptionsForThisOperation[prop] = options[prop];\n    }\n  });\n\n  // Preliminary cleaning on both client and server. On the server and for local\n  // collections, automatic values will also be set at this point.\n  schema.clean(doc, {\n    mutate: true, // Clean the doc/modifier in place\n    isModifier: (type !== \"insert\"),\n    // Start with some Collection2 defaults, which will usually be overwritten\n    ...defaultCleanOptions,\n    // The extend with the schema-level defaults (from SimpleSchema constructor options)\n    ...(schema._cleanOptions || {}),\n    // Finally, options for this specific operation should take precedence\n    ...cleanOptionsForThisOperation,\n    extendAutoValueContext, // This was extended separately above\n    getAutoValues, // Force this override\n  });\n\n  // We clone before validating because in some cases we need to adjust the\n  // object a bit before validating it. If we adjusted `doc` itself, our\n  // changes would persist into the database.\n  let docToValidate = {};\n  for (var prop in doc) {\n    // We omit prototype properties when cloning because they will not be valid\n    // and mongo omits them when saving to the database anyway.\n    if (Object.prototype.hasOwnProperty.call(doc, prop)) {\n      docToValidate[prop] = doc[prop];\n    }\n  }\n\n  // On the server, upserts are possible; SimpleSchema handles upserts pretty\n  // well by default, but it will not know about the fields in the selector,\n  // which are also stored in the database if an insert is performed. So we\n  // will allow these fields to be considered for validation by adding them\n  // to the $set in the modifier, while stripping out query selectors as these\n  // don't make it into the upserted document and break validation.\n  // This is no doubt prone to errors, but there probably isn't any better way\n  // right now.\n  if (Meteor.isServer && isUpsert && isObject(selector)) {\n    const set = docToValidate.$set || {};\n    docToValidate.$set = flattenSelector(selector);\n\n    if (!schemaAllowsId) delete docToValidate.$set._id;\n    Object.assign(docToValidate.$set, set);\n  }\n  // Set automatic values for validation on the client.\n  // On the server, we already updated doc with auto values, but on the client,\n  // we will add them to docToValidate for validation purposes only.\n  // This is because we want all actual values generated on the server.\n  if (Meteor.isClient && !isLocalCollection) {\n    schema.clean(docToValidate, {\n      autoConvert: false,\n      extendAutoValueContext,\n      filter: false,\n      getAutoValues: true,\n      isModifier: (type !== \"insert\"),\n      mutate: true, // Clean the doc/modifier in place\n      removeEmptyStrings: false,\n      removeNullsFromArrays: false,\n      trimStrings: false,\n    });\n  }\n\n  // XXX Maybe move this into SimpleSchema\n  if (!validatedObjectWasInitiallyEmpty && isEmpty(docToValidate)) {\n    throw new Error('After filtering out keys not in the schema, your ' +\n      (type === 'update' ? 'modifier' : 'object') +\n      ' is now empty');\n  }\n\n  // Validate doc\n  let isValid;\n  if (options.validate === false) {\n    isValid = true;\n  } else {\n    isValid = validationContext.validate(docToValidate, {\n      modifier: (type === \"update\" || type === \"upsert\"),\n      upsert: isUpsert,\n      extendedCustomContext: {\n        isInsert: (type === \"insert\"),\n        isUpdate: (type === \"update\" && options.upsert !== true),\n        isUpsert,\n        userId,\n        isFromTrustedCode,\n        docId,\n        isLocalCollection,\n        ...(options.extendedCustomContext || {}),\n      },\n    });\n  }\n\n  if (isValid) {\n    // Add the ID back\n    if (cachedId) {\n      doc._id = cachedId;\n    }\n\n    // Update the args to reflect the cleaned doc\n    // XXX not sure this is necessary since we mutate\n    if (type === \"insert\") {\n      args[0] = doc;\n    } else {\n      args[1] = doc;\n    }\n\n    // If callback, set invalidKey when we get a mongo unique error\n    if (Meteor.isServer && hasCallback) {\n      args[last] = wrapCallbackForParsingMongoValidationErrors(validationContext, args[last]);\n    }\n\n    return args;\n  } else {\n    error = getErrorObject(validationContext, Meteor.settings?.packages?.collection2?.disableCollectionNamesInValidation ? '' : `in ${collection._name} ${type}`);\n    if (callback) {\n      // insert/update/upsert pass `false` when there's an error, so we do that\n      callback(error, false);\n    } else {\n      throw error;\n    }\n  }\n}\n\nfunction getErrorObject(context, appendToMessage = '') {\n  let message;\n  const invalidKeys = (typeof context.validationErrors === 'function') ? context.validationErrors() : context.invalidKeys();\n  if (invalidKeys.length) {\n    const firstErrorKey = invalidKeys[0].name;\n    const firstErrorMessage = context.keyErrorMessage(firstErrorKey);\n\n    // If the error is in a nested key, add the full key to the error message\n    // to be more helpful.\n    if (firstErrorKey.indexOf('.') === -1) {\n      message = firstErrorMessage;\n    } else {\n      message = `${firstErrorMessage} (${firstErrorKey})`;\n    }\n  } else {\n    message = \"Failed validation\";\n  }\n  message = `${message} ${appendToMessage}`.trim();\n  const error = new Error(message);\n  error.invalidKeys = invalidKeys;\n  error.validationContext = context;\n  // If on the server, we add a sanitized error, too, in case we're\n  // called from a method.\n  if (Meteor.isServer) {\n    error.sanitizedError = new Meteor.Error(400, message, EJSON.stringify(error.invalidKeys));\n  }\n  return error;\n}\n\nfunction addUniqueError(context, errorMessage) {\n  const name = errorMessage.split('c2_')[1].split(' ')[0];\n  const val = errorMessage.split('dup key:')[1].split('\"')[1];\n\n  const addValidationErrorsPropName = (typeof context.addValidationErrors === 'function') ? 'addValidationErrors' : 'addInvalidKeys';\n  context[addValidationErrorsPropName]([{\n    name: name,\n    type: 'notUnique',\n    value: val\n  }]);\n}\n\nfunction wrapCallbackForParsingMongoValidationErrors(validationContext, cb) {\n  return function wrappedCallbackForParsingMongoValidationErrors(...args) {\n    const error = args[0];\n    if (error &&\n        ((error.name === \"MongoError\" && error.code === 11001) || error.message.indexOf('MongoError: E11000') !== -1) &&\n        error.message.indexOf('c2_') !== -1) {\n      addUniqueError(validationContext, error.message);\n      args[0] = getErrorObject(validationContext);\n    }\n    return cb.apply(this, args);\n  };\n}\n\nfunction wrapCallbackForParsingServerErrors(validationContext, cb) {\n  const addValidationErrorsPropName = (typeof validationContext.addValidationErrors === 'function') ? 'addValidationErrors' : 'addInvalidKeys';\n  return function wrappedCallbackForParsingServerErrors(...args) {\n    const error = args[0];\n    // Handle our own validation errors\n    if (error instanceof Meteor.Error &&\n        error.error === 400 &&\n        error.reason === \"INVALID\" &&\n        typeof error.details === \"string\") {\n      const invalidKeysFromServer = EJSON.parse(error.details);\n      validationContext[addValidationErrorsPropName](invalidKeysFromServer);\n      args[0] = getErrorObject(validationContext);\n    }\n    // Handle Mongo unique index errors, which are forwarded to the client as 409 errors\n    else if (error instanceof Meteor.Error &&\n             error.error === 409 &&\n             error.reason &&\n             error.reason.indexOf('E11000') !== -1 &&\n             error.reason.indexOf('c2_') !== -1) {\n      addUniqueError(validationContext, error.reason);\n      args[0] = getErrorObject(validationContext);\n    }\n    return cb.apply(this, args);\n  };\n}\n\nlet alreadyInsecure = {};\nfunction keepInsecure(c) {\n  // If insecure package is in use, we need to add allow rules that return\n  // true. Otherwise, it would seemingly turn off insecure mode.\n  if (Package && Package.insecure && !alreadyInsecure[c._name]) {\n    c.allow({\n      insert: function() {\n        return true;\n      },\n      update: function() {\n        return true;\n      },\n      remove: function () {\n        return true;\n      },\n      fetch: [],\n      transform: null\n    });\n    alreadyInsecure[c._name] = true;\n  }\n  // If insecure package is NOT in use, then adding the two deny functions\n  // does not have any effect on the main app's security paradigm. The\n  // user will still be required to add at least one allow function of her\n  // own for each operation for this collection. And the user may still add\n  // additional deny functions, but does not have to.\n}\n\nlet alreadyDefined = {};\nfunction defineDeny(c, options) {\n  if (!alreadyDefined[c._name]) {\n\n    const isLocalCollection = (c._connection === null);\n\n    // First define deny functions to extend doc with the results of clean\n    // and auto-values. This must be done with \"transform: null\" or we would be\n    // extending a clone of doc and therefore have no effect.\n    c.deny({\n      insert: function(userId, doc) {\n        // Referenced doc is cleaned in place\n        c.simpleSchema(doc).clean(doc, {\n          mutate: true,\n          isModifier: false,\n          // We don't do these here because they are done on the client if desired\n          filter: false,\n          autoConvert: false,\n          removeEmptyStrings: false,\n          trimStrings: false,\n          extendAutoValueContext: {\n            isInsert: true,\n            isUpdate: false,\n            isUpsert: false,\n            userId: userId,\n            isFromTrustedCode: false,\n            docId: doc._id,\n            isLocalCollection: isLocalCollection\n          }\n        });\n\n        return false;\n      },\n      update: function(userId, doc, fields, modifier) {\n        // Referenced modifier is cleaned in place\n        c.simpleSchema(modifier).clean(modifier, {\n          mutate: true,\n          isModifier: true,\n          // We don't do these here because they are done on the client if desired\n          filter: false,\n          autoConvert: false,\n          removeEmptyStrings: false,\n          trimStrings: false,\n          extendAutoValueContext: {\n            isInsert: false,\n            isUpdate: true,\n            isUpsert: false,\n            userId: userId,\n            isFromTrustedCode: false,\n            docId: doc && doc._id,\n            isLocalCollection: isLocalCollection\n          }\n        });\n\n        return false;\n      },\n      fetch: ['_id'],\n      transform: null\n    });\n\n    // Second define deny functions to validate again on the server\n    // for client-initiated inserts and updates. These should be\n    // called after the clean/auto-value functions since we're adding\n    // them after. These must *not* have \"transform: null\" if options.transform is true because\n    // we need to pass the doc through any transforms to be sure\n    // that custom types are properly recognized for type validation.\n    c.deny({\n      insert: function(userId, doc) {\n        // We pass the false options because we will have done them on client if desired\n        doValidate(\n          c,\n          \"insert\",\n          [\n            doc,\n            {\n              trimStrings: false,\n              removeEmptyStrings: false,\n              filter: false,\n              autoConvert: false\n            },\n            function(error) {\n              if (error) {\n                throw new Meteor.Error(400, 'INVALID', EJSON.stringify(error.invalidKeys));\n              }\n            }\n          ],\n          false, // getAutoValues\n          userId,\n          false // isFromTrustedCode\n        );\n\n        return false;\n      },\n      update: function(userId, doc, fields, modifier) {\n        // NOTE: This will never be an upsert because client-side upserts\n        // are not allowed once you define allow/deny functions.\n        // We pass the false options because we will have done them on client if desired\n        doValidate(\n          c,\n          \"update\",\n          [\n            {_id: doc && doc._id},\n            modifier,\n            {\n              trimStrings: false,\n              removeEmptyStrings: false,\n              filter: false,\n              autoConvert: false\n            },\n            function(error) {\n              if (error) {\n                throw new Meteor.Error(400, 'INVALID', EJSON.stringify(error.invalidKeys));\n              }\n            }\n          ],\n          false, // getAutoValues\n          userId,\n          false // isFromTrustedCode\n        );\n\n        return false;\n      },\n      fetch: ['_id'],\n      ...(options.transform === true ? {} : {transform: null}),\n    });\n\n    // note that we've already done this collection so that we don't do it again\n    // if attachSchema is called again\n    alreadyDefined[c._name] = true;\n  }\n}\n\nfunction extendSchema(s1, s2) {\n  if (s2.version >= 2) {\n    const ss = new SimpleSchema(s1);\n    ss.extend(s2);\n    return ss;\n  } else {\n    return new SimpleSchema([ s1, s2 ]);\n  }\n}\n\nexport default Collection2;\n"]},"sourceType":"module","hash":"1e478bc54c79df6dca90336cc3b64cde9a305056"}
