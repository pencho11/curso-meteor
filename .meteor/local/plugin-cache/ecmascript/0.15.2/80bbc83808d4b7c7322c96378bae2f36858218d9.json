{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\RUBEN\\Desktop\\meteor-vue\\packages\\accounts-password\\password_client.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/accounts-password/password_client.js","filename":"C:\\Users\\RUBEN\\Desktop\\meteor-vue\\packages\\accounts-password\\password_client.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"C:\\Users\\RUBEN\\Desktop\\meteor-vue","root":"C:\\Users\\RUBEN\\Desktop\\meteor-vue","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.14.0","helpers":true,"useESModules":false,"corejs":false}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"C:\\Users\\RUBEN\\Desktop\\meteor-vue\\packages\\accounts-password\\password_client.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/accounts-password/password_client.js"}},"code":"var _objectSpread;\n\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default: function (v) {\n    _objectSpread = v;\n  }\n}, 0);\n\n// Used in the various functions below to handle errors consistently\nvar reportError = function (error, callback) {\n  if (callback) {\n    callback(error);\n  } else {\n    throw error;\n  }\n}; // Attempt to log in with a password.\n//\n// @param selector {String|Object} One of the following:\n//   - {username: (username)}\n//   - {email: (email)}\n//   - a string which may be a username or email, depending on whether\n//     it contains \"@\".\n// @param password {String}\n// @param callback {Function(error|undefined)}\n\n/**\n * @summary Log the user in with a password.\n * @locus Client\n * @param {Object | String} selector\n *   Either a string interpreted as a username or an email; or an object with a\n *   single key: `email`, `username` or `id`. Username or email match in a case\n *   insensitive manner.\n * @param {String} password The user's password.\n * @param {Function} [callback] Optional callback.\n *   Called with no arguments on success, or with a single `Error` argument\n *   on failure.\n * @importFromPackage meteor\n */\n\n\nMeteor.loginWithPassword = function (selector, password, callback) {\n  if (typeof selector === 'string') if (!selector.includes('@')) selector = {\n    username: selector\n  };else selector = {\n    email: selector\n  };\n  Accounts.callLoginMethod({\n    methodArguments: [{\n      user: selector,\n      password: Accounts._hashPassword(password)\n    }],\n    userCallback: function (error, result) {\n      if (error) {\n        reportError(error, callback);\n      } else {\n        callback && callback();\n      }\n    }\n  });\n};\n\nAccounts._hashPassword = function (password) {\n  return {\n    digest: SHA256(password),\n    algorithm: \"sha-256\"\n  };\n}; // Attempt to log in as a new user.\n\n/**\n * @summary Create a new user.\n * @locus Anywhere\n * @param {Object} options\n * @param {String} options.username A unique name for this user.\n * @param {String} options.email The user's email address.\n * @param {String} options.password The user's password. This is __not__ sent in plain text over the wire.\n * @param {Object} options.profile The user's profile, typically including the `name` field.\n * @param {Function} [callback] Client only, optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage accounts-base\n */\n\n\nAccounts.createUser = function (options, callback) {\n  options = _objectSpread({}, options); // we'll be modifying options\n\n  if (typeof options.password !== 'string') throw new Error(\"options.password must be a string\");\n\n  if (!options.password) {\n    return reportError(new Meteor.Error(400, \"Password may not be empty\"), callback);\n  } // Replace password with the hashed password.\n\n\n  options.password = Accounts._hashPassword(options.password);\n  Accounts.callLoginMethod({\n    methodName: 'createUser',\n    methodArguments: [options],\n    userCallback: callback\n  });\n}; // Change password. Must be logged in.\n//\n// @param oldPassword {String|null} By default servers no longer allow\n//   changing password without the old password, but they could so we\n//   support passing no password to the server and letting it decide.\n// @param newPassword {String}\n// @param callback {Function(error|undefined)}\n\n/**\n * @summary Change the current user's password. Must be logged in.\n * @locus Client\n * @param {String} oldPassword The user's current password. This is __not__ sent in plain text over the wire.\n * @param {String} newPassword A new password for the user. This is __not__ sent in plain text over the wire.\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage accounts-base\n */\n\n\nAccounts.changePassword = function (oldPassword, newPassword, callback) {\n  if (!Meteor.user()) {\n    return reportError(new Error(\"Must be logged in to change password.\"), callback);\n  }\n\n  if (!newPassword instanceof String) {\n    return reportError(new Meteor.Error(400, \"Password must be a string\"), callback);\n  }\n\n  if (!newPassword) {\n    return reportError(new Meteor.Error(400, \"Password may not be empty\"), callback);\n  }\n\n  Accounts.connection.apply('changePassword', [oldPassword ? Accounts._hashPassword(oldPassword) : null, Accounts._hashPassword(newPassword)], function (error, result) {\n    if (error || !result) {\n      // A normal error, not an error telling us to upgrade to bcrypt\n      reportError(error || new Error(\"No result from changePassword.\"), callback);\n    } else {\n      callback && callback();\n    }\n  });\n}; // Sends an email to a user with a link that can be used to reset\n// their password\n//\n// @param options {Object}\n//   - email: (email)\n// @param callback (optional) {Function(error|undefined)}\n\n/**\n * @summary Request a forgot password email.\n * @locus Client\n * @param {Object} options\n * @param {String} options.email The email address to send a password reset link.\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage accounts-base\n */\n\n\nAccounts.forgotPassword = function (options, callback) {\n  if (!options.email) {\n    return reportError(new Meteor.Error(400, \"Must pass options.email\"), callback);\n  }\n\n  if (callback) {\n    Accounts.connection.call(\"forgotPassword\", options, callback);\n  } else {\n    Accounts.connection.call(\"forgotPassword\", options);\n  }\n}; // Resets a password based on a token originally created by\n// Accounts.forgotPassword, and then logs in the matching user.\n//\n// @param token {String}\n// @param newPassword {String}\n// @param callback (optional) {Function(error|undefined)}\n\n/**\n * @summary Reset the password for a user using a token received in email. Logs the user in afterwards.\n * @locus Client\n * @param {String} token The token retrieved from the reset password URL.\n * @param {String} newPassword A new password for the user. This is __not__ sent in plain text over the wire.\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage accounts-base\n */\n\n\nAccounts.resetPassword = function (token, newPassword, callback) {\n  if (!token instanceof String) {\n    return reportError(new Meteor.Error(400, \"Token must be a string\"), callback);\n  }\n\n  if (!newPassword instanceof String) {\n    return reportError(new Meteor.Error(400, \"Password must be a string\"), callback);\n  }\n\n  if (!newPassword) {\n    return reportError(new Meteor.Error(400, \"Password may not be empty\"), callback);\n  }\n\n  Accounts.callLoginMethod({\n    methodName: 'resetPassword',\n    methodArguments: [token, Accounts._hashPassword(newPassword)],\n    userCallback: callback\n  });\n}; // Verifies a user's email address based on a token originally\n// created by Accounts.sendVerificationEmail\n//\n// @param token {String}\n// @param callback (optional) {Function(error|undefined)}\n\n/**\n * @summary Marks the user's email address as verified. Logs the user in afterwards.\n * @locus Client\n * @param {String} token The token retrieved from the verification URL.\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage accounts-base\n */\n\n\nAccounts.verifyEmail = function (token, callback) {\n  if (!token) {\n    return reportError(new Meteor.Error(400, \"Need to pass token\"), callback);\n  }\n\n  Accounts.callLoginMethod({\n    methodName: 'verifyEmail',\n    methodArguments: [token],\n    userCallback: callback\n  });\n};","map":{"version":3,"sources":["packages/accounts-password/password_client.js"],"names":["_objectSpread","module","link","default","v","reportError","error","callback","Meteor","loginWithPassword","selector","password","includes","username","email","Accounts","callLoginMethod","methodArguments","user","_hashPassword","userCallback","result","digest","SHA256","algorithm","createUser","options","Error","methodName","changePassword","oldPassword","newPassword","String","connection","apply","forgotPassword","call","resetPassword","token","verifyEmail"],"mappings":"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","sourcesContent":["// Used in the various functions below to handle errors consistently\nconst reportError = (error, callback) => {\n   if (callback) {\n     callback(error);\n   } else {\n     throw error;\n   }\n};\n\n// Attempt to log in with a password.\n//\n// @param selector {String|Object} One of the following:\n//   - {username: (username)}\n//   - {email: (email)}\n//   - a string which may be a username or email, depending on whether\n//     it contains \"@\".\n// @param password {String}\n// @param callback {Function(error|undefined)}\n\n/**\n * @summary Log the user in with a password.\n * @locus Client\n * @param {Object | String} selector\n *   Either a string interpreted as a username or an email; or an object with a\n *   single key: `email`, `username` or `id`. Username or email match in a case\n *   insensitive manner.\n * @param {String} password The user's password.\n * @param {Function} [callback] Optional callback.\n *   Called with no arguments on success, or with a single `Error` argument\n *   on failure.\n * @importFromPackage meteor\n */\nMeteor.loginWithPassword = (selector, password, callback) => {\n  if (typeof selector === 'string')\n    if (!selector.includes('@'))\n      selector = {username: selector};\n    else\n      selector = {email: selector};\n\n  Accounts.callLoginMethod({\n    methodArguments: [{\n      user: selector,\n      password: Accounts._hashPassword(password)\n    }],\n    userCallback: (error, result) => {\n      if (error) {\n        reportError(error, callback);\n      } else {\n        callback && callback();\n      }\n    }\n  });\n};\n\nAccounts._hashPassword = password => ({\n  digest: SHA256(password),\n  algorithm: \"sha-256\"\n});\n\n// Attempt to log in as a new user.\n\n/**\n * @summary Create a new user.\n * @locus Anywhere\n * @param {Object} options\n * @param {String} options.username A unique name for this user.\n * @param {String} options.email The user's email address.\n * @param {String} options.password The user's password. This is __not__ sent in plain text over the wire.\n * @param {Object} options.profile The user's profile, typically including the `name` field.\n * @param {Function} [callback] Client only, optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage accounts-base\n */\nAccounts.createUser = (options, callback) => {\n  options = { ...options }; // we'll be modifying options\n\n  if (typeof options.password !== 'string')\n    throw new Error(\"options.password must be a string\");\n  if (!options.password) {\n    return reportError(new Meteor.Error(400, \"Password may not be empty\"), callback);\n  }\n\n  // Replace password with the hashed password.\n  options.password = Accounts._hashPassword(options.password);\n\n  Accounts.callLoginMethod({\n    methodName: 'createUser',\n    methodArguments: [options],\n    userCallback: callback\n  });\n};\n\n// Change password. Must be logged in.\n//\n// @param oldPassword {String|null} By default servers no longer allow\n//   changing password without the old password, but they could so we\n//   support passing no password to the server and letting it decide.\n// @param newPassword {String}\n// @param callback {Function(error|undefined)}\n\n/**\n * @summary Change the current user's password. Must be logged in.\n * @locus Client\n * @param {String} oldPassword The user's current password. This is __not__ sent in plain text over the wire.\n * @param {String} newPassword A new password for the user. This is __not__ sent in plain text over the wire.\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage accounts-base\n */\nAccounts.changePassword = (oldPassword, newPassword, callback) => {\n  if (!Meteor.user()) {\n    return reportError(new Error(\"Must be logged in to change password.\"), callback);\n  }\n\n  if (!newPassword instanceof String) {\n    return reportError(new Meteor.Error(400, \"Password must be a string\"), callback);\n  }\n\n  if (!newPassword) {\n    return reportError(new Meteor.Error(400, \"Password may not be empty\"), callback);\n  }\n\n  Accounts.connection.apply(\n    'changePassword',\n    [oldPassword ? Accounts._hashPassword(oldPassword) : null,\n     Accounts._hashPassword(newPassword)],\n    (error, result) => {\n    if (error || !result) {\n        // A normal error, not an error telling us to upgrade to bcrypt\n        reportError(\n          error || new Error(\"No result from changePassword.\"), callback);\n      } else {\n        callback && callback();\n      }\n    }\n  );\n};\n\n// Sends an email to a user with a link that can be used to reset\n// their password\n//\n// @param options {Object}\n//   - email: (email)\n// @param callback (optional) {Function(error|undefined)}\n\n/**\n * @summary Request a forgot password email.\n * @locus Client\n * @param {Object} options\n * @param {String} options.email The email address to send a password reset link.\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage accounts-base\n */\nAccounts.forgotPassword = (options, callback) => {\n  if (!options.email) {\n    return reportError(new Meteor.Error(400, \"Must pass options.email\"), callback);\n  }\n\n  if (callback) {\n    Accounts.connection.call(\"forgotPassword\", options, callback);\n  } else {\n    Accounts.connection.call(\"forgotPassword\", options);\n  }\n};\n\n// Resets a password based on a token originally created by\n// Accounts.forgotPassword, and then logs in the matching user.\n//\n// @param token {String}\n// @param newPassword {String}\n// @param callback (optional) {Function(error|undefined)}\n\n/**\n * @summary Reset the password for a user using a token received in email. Logs the user in afterwards.\n * @locus Client\n * @param {String} token The token retrieved from the reset password URL.\n * @param {String} newPassword A new password for the user. This is __not__ sent in plain text over the wire.\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage accounts-base\n */\nAccounts.resetPassword = (token, newPassword, callback) => {\n  if (!token instanceof String) {\n    return reportError(new Meteor.Error(400, \"Token must be a string\"), callback);\n  }\n\n  if (!newPassword instanceof String) {\n    return reportError(new Meteor.Error(400, \"Password must be a string\"), callback);\n  }\n\n  if (!newPassword) {\n    return reportError(new Meteor.Error(400, \"Password may not be empty\"), callback);\n  }\n\n  Accounts.callLoginMethod({\n    methodName: 'resetPassword',\n    methodArguments: [token, Accounts._hashPassword(newPassword)],\n    userCallback: callback});\n};\n\n// Verifies a user's email address based on a token originally\n// created by Accounts.sendVerificationEmail\n//\n// @param token {String}\n// @param callback (optional) {Function(error|undefined)}\n\n/**\n * @summary Marks the user's email address as verified. Logs the user in afterwards.\n * @locus Client\n * @param {String} token The token retrieved from the verification URL.\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage accounts-base\n */\nAccounts.verifyEmail = (token, callback) => {\n  if (!token) {\n    return reportError(new Meteor.Error(400, \"Need to pass token\"), callback);\n  }\n\n  Accounts.callLoginMethod({\n    methodName: 'verifyEmail',\n    methodArguments: [token],\n    userCallback: callback});\n};\n"]},"sourceType":"module","hash":"80bbc83808d4b7c7322c96378bae2f36858218d9"}
