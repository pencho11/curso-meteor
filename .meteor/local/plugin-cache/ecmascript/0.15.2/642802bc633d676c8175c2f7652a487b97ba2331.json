{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\RUBEN\\Desktop\\meteor-vue\\packages\\ddp-server\\stream_server.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.windows.x86_64"},"sourceFileName":"packages/ddp-server/stream_server.js","filename":"C:\\Users\\RUBEN\\Desktop\\meteor-vue\\packages\\ddp-server\\stream_server.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"C:\\Users\\RUBEN\\Desktop\\meteor-vue","root":"C:\\Users\\RUBEN\\Desktop\\meteor-vue","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true}},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":{},"_verified":{},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.14.0","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true}},{"key":"transform-react-jsx","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false}},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":true,"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_verified":true},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"proposal-logical-assignment-operators","visitor":{"_exploded":{},"_verified":{},"AssignmentExpression":{"enter":[null]}},"options":{}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}}],"presets":[],"generatorOpts":{"filename":"C:\\Users\\RUBEN\\Desktop\\meteor-vue\\packages\\ddp-server\\stream_server.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/ddp-server/stream_server.js"}},"code":"// By default, we use the permessage-deflate extension with default\n// configuration. If $SERVER_WEBSOCKET_COMPRESSION is set, then it must be valid\n// JSON. If it represents a falsey value, then we do not use permessage-deflate\n// at all; otherwise, the JSON value is used as an argument to deflate's\n// configure method; see\n// https://github.com/faye/permessage-deflate-node/blob/master/README.md\n//\n// (We do this in an _.once instead of at startup, because we don't want to\n// crash the tool during isopacket load if your JSON doesn't parse. This is only\n// a problem because the tool has to load the DDP server code just in order to\n// be a DDP client; see https://github.com/meteor/meteor/issues/3452 .)\nvar websocketExtensions = _.once(function () {\n  var extensions = [];\n  var websocketCompressionConfig = process.env.SERVER_WEBSOCKET_COMPRESSION ? JSON.parse(process.env.SERVER_WEBSOCKET_COMPRESSION) : {};\n\n  if (websocketCompressionConfig) {\n    extensions.push(Npm.require('permessage-deflate').configure(websocketCompressionConfig));\n  }\n\n  return extensions;\n});\n\nvar pathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX || \"\";\n\nStreamServer = function () {\n  var self = this;\n  self.registration_callbacks = [];\n  self.open_sockets = []; // Because we are installing directly onto WebApp.httpServer instead of using\n  // WebApp.app, we have to process the path prefix ourselves.\n\n  self.prefix = pathPrefix + '/sockjs';\n  RoutePolicy.declare(self.prefix + '/', 'network'); // set up sockjs\n\n  var sockjs = Npm.require('sockjs');\n\n  var serverOptions = {\n    prefix: self.prefix,\n    log: function () {},\n    // this is the default, but we code it explicitly because we depend\n    // on it in stream_client:HEARTBEAT_TIMEOUT\n    heartbeat_delay: 45000,\n    // The default disconnect_delay is 5 seconds, but if the server ends up CPU\n    // bound for that much time, SockJS might not notice that the user has\n    // reconnected because the timer (of disconnect_delay ms) can fire before\n    // SockJS processes the new connection. Eventually we'll fix this by not\n    // combining CPU-heavy processing with SockJS termination (eg a proxy which\n    // converts to Unix sockets) but for now, raise the delay.\n    disconnect_delay: 60 * 1000,\n    // Set the USE_JSESSIONID environment variable to enable setting the\n    // JSESSIONID cookie. This is useful for setting up proxies with\n    // session affinity.\n    jsessionid: !!process.env.USE_JSESSIONID\n  }; // If you know your server environment (eg, proxies) will prevent websockets\n  // from ever working, set $DISABLE_WEBSOCKETS and SockJS clients (ie,\n  // browsers) will not waste time attempting to use them.\n  // (Your server will still have a /websocket endpoint.)\n\n  if (process.env.DISABLE_WEBSOCKETS) {\n    serverOptions.websocket = false;\n  } else {\n    serverOptions.faye_server_options = {\n      extensions: websocketExtensions()\n    };\n  }\n\n  self.server = sockjs.createServer(serverOptions); // Install the sockjs handlers, but we want to keep around our own particular\n  // request handler that adjusts idle timeouts while we have an outstanding\n  // request.  This compensates for the fact that sockjs removes all listeners\n  // for \"request\" to add its own.\n\n  WebApp.httpServer.removeListener('request', WebApp._timeoutAdjustmentRequestCallback);\n  self.server.installHandlers(WebApp.httpServer);\n  WebApp.httpServer.addListener('request', WebApp._timeoutAdjustmentRequestCallback); // Support the /websocket endpoint\n\n  self._redirectWebsocketEndpoint();\n\n  self.server.on('connection', function (socket) {\n    // sockjs sometimes passes us null instead of a socket object\n    // so we need to guard against that. see:\n    // https://github.com/sockjs/sockjs-node/issues/121\n    // https://github.com/meteor/meteor/issues/10468\n    if (!socket) return; // We want to make sure that if a client connects to us and does the initial\n    // Websocket handshake but never gets to the DDP handshake, that we\n    // eventually kill the socket.  Once the DDP handshake happens, DDP\n    // heartbeating will work. And before the Websocket handshake, the timeouts\n    // we set at the server level in webapp_server.js will work. But\n    // faye-websocket calls setTimeout(0) on any socket it takes over, so there\n    // is an \"in between\" state where this doesn't happen.  We work around this\n    // by explicitly setting the socket timeout to a relatively large time here,\n    // and setting it back to zero when we set up the heartbeat in\n    // livedata_server.js.\n\n    socket.setWebsocketTimeout = function (timeout) {\n      if ((socket.protocol === 'websocket' || socket.protocol === 'websocket-raw') && socket._session.recv) {\n        socket._session.recv.connection.setTimeout(timeout);\n      }\n    };\n\n    socket.setWebsocketTimeout(45 * 1000);\n\n    socket.send = function (data) {\n      socket.write(data);\n    };\n\n    socket.on('close', function () {\n      self.open_sockets = _.without(self.open_sockets, socket);\n    });\n    self.open_sockets.push(socket); // only to send a message after connection on tests, useful for\n    // socket-stream-client/server-tests.js\n\n    if (process.env.TEST_METADATA) {\n      socket.send(JSON.stringify({\n        testMessageOnConnect: true\n      }));\n    } // call all our callbacks when we get a new socket. they will do the\n    // work of setting up handlers and such for specific messages.\n\n\n    _.each(self.registration_callbacks, function (callback) {\n      callback(socket);\n    });\n  });\n};\n\nObject.assign(StreamServer.prototype, {\n  // call my callback when a new socket connects.\n  // also call it for all current connections.\n  register: function (callback) {\n    var self = this;\n    self.registration_callbacks.push(callback);\n\n    _.each(self.all_sockets(), function (socket) {\n      callback(socket);\n    });\n  },\n  // get a list of all sockets\n  all_sockets: function () {\n    var self = this;\n    return _.values(self.open_sockets);\n  },\n  // Redirect /websocket to /sockjs/websocket in order to not expose\n  // sockjs to clients that want to use raw websockets\n  _redirectWebsocketEndpoint: function () {\n    var self = this; // Unfortunately we can't use a connect middleware here since\n    // sockjs installs itself prior to all existing listeners\n    // (meaning prior to any connect middlewares) so we need to take\n    // an approach similar to overshadowListeners in\n    // https://github.com/sockjs/sockjs-node/blob/cf820c55af6a9953e16558555a31decea554f70e/src/utils.coffee\n\n    ['request', 'upgrade'].forEach(event => {\n      var httpServer = WebApp.httpServer;\n      var oldHttpServerListeners = httpServer.listeners(event).slice(0);\n      httpServer.removeAllListeners(event); // request and upgrade have different arguments passed but\n      // we only care about the first one which is always request\n\n      var newListener = function (request\n      /*, moreArguments */\n      ) {\n        // Store arguments for use within the closure below\n        var args = arguments; // TODO replace with url package\n\n        var url = Npm.require('url'); // Rewrite /websocket and /websocket/ urls to /sockjs/websocket while\n        // preserving query string.\n\n\n        var parsedUrl = url.parse(request.url);\n\n        if (parsedUrl.pathname === pathPrefix + '/websocket' || parsedUrl.pathname === pathPrefix + '/websocket/') {\n          parsedUrl.pathname = self.prefix + '/websocket';\n          request.url = url.format(parsedUrl);\n        }\n\n        _.each(oldHttpServerListeners, function (oldListener) {\n          oldListener.apply(httpServer, args);\n        });\n      };\n\n      httpServer.addListener(event, newListener);\n    });\n  }\n});","map":{"version":3,"sources":["packages/ddp-server/stream_server.js"],"names":["websocketExtensions","_","once","extensions","websocketCompressionConfig","process","env","SERVER_WEBSOCKET_COMPRESSION","JSON","parse","push","Npm","require","configure","pathPrefix","__meteor_runtime_config__","ROOT_URL_PATH_PREFIX","StreamServer","self","registration_callbacks","open_sockets","prefix","RoutePolicy","declare","sockjs","serverOptions","log","heartbeat_delay","disconnect_delay","jsessionid","USE_JSESSIONID","DISABLE_WEBSOCKETS","websocket","faye_server_options","server","createServer","WebApp","httpServer","removeListener","_timeoutAdjustmentRequestCallback","installHandlers","addListener","_redirectWebsocketEndpoint","on","socket","setWebsocketTimeout","timeout","protocol","_session","recv","connection","setTimeout","send","data","write","without","TEST_METADATA","stringify","testMessageOnConnect","each","callback","Object","assign","prototype","register","all_sockets","values","forEach","event","oldHttpServerListeners","listeners","slice","removeAllListeners","newListener","request","args","arguments","url","parsedUrl","pathname","format","oldListener","apply"],"mappings":"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","sourcesContent":["// By default, we use the permessage-deflate extension with default\n// configuration. If $SERVER_WEBSOCKET_COMPRESSION is set, then it must be valid\n// JSON. If it represents a falsey value, then we do not use permessage-deflate\n// at all; otherwise, the JSON value is used as an argument to deflate's\n// configure method; see\n// https://github.com/faye/permessage-deflate-node/blob/master/README.md\n//\n// (We do this in an _.once instead of at startup, because we don't want to\n// crash the tool during isopacket load if your JSON doesn't parse. This is only\n// a problem because the tool has to load the DDP server code just in order to\n// be a DDP client; see https://github.com/meteor/meteor/issues/3452 .)\nvar websocketExtensions = _.once(function () {\n  var extensions = [];\n\n  var websocketCompressionConfig = process.env.SERVER_WEBSOCKET_COMPRESSION\n        ? JSON.parse(process.env.SERVER_WEBSOCKET_COMPRESSION) : {};\n  if (websocketCompressionConfig) {\n    extensions.push(Npm.require('permessage-deflate').configure(\n      websocketCompressionConfig\n    ));\n  }\n\n  return extensions;\n});\n\nvar pathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX ||  \"\";\n\nStreamServer = function () {\n  var self = this;\n  self.registration_callbacks = [];\n  self.open_sockets = [];\n\n  // Because we are installing directly onto WebApp.httpServer instead of using\n  // WebApp.app, we have to process the path prefix ourselves.\n  self.prefix = pathPrefix + '/sockjs';\n  RoutePolicy.declare(self.prefix + '/', 'network');\n\n  // set up sockjs\n  var sockjs = Npm.require('sockjs');\n  var serverOptions = {\n    prefix: self.prefix,\n    log: function() {},\n    // this is the default, but we code it explicitly because we depend\n    // on it in stream_client:HEARTBEAT_TIMEOUT\n    heartbeat_delay: 45000,\n    // The default disconnect_delay is 5 seconds, but if the server ends up CPU\n    // bound for that much time, SockJS might not notice that the user has\n    // reconnected because the timer (of disconnect_delay ms) can fire before\n    // SockJS processes the new connection. Eventually we'll fix this by not\n    // combining CPU-heavy processing with SockJS termination (eg a proxy which\n    // converts to Unix sockets) but for now, raise the delay.\n    disconnect_delay: 60 * 1000,\n    // Set the USE_JSESSIONID environment variable to enable setting the\n    // JSESSIONID cookie. This is useful for setting up proxies with\n    // session affinity.\n    jsessionid: !!process.env.USE_JSESSIONID\n  };\n\n  // If you know your server environment (eg, proxies) will prevent websockets\n  // from ever working, set $DISABLE_WEBSOCKETS and SockJS clients (ie,\n  // browsers) will not waste time attempting to use them.\n  // (Your server will still have a /websocket endpoint.)\n  if (process.env.DISABLE_WEBSOCKETS) {\n    serverOptions.websocket = false;\n  } else {\n    serverOptions.faye_server_options = {\n      extensions: websocketExtensions()\n    };\n  }\n\n  self.server = sockjs.createServer(serverOptions);\n\n  // Install the sockjs handlers, but we want to keep around our own particular\n  // request handler that adjusts idle timeouts while we have an outstanding\n  // request.  This compensates for the fact that sockjs removes all listeners\n  // for \"request\" to add its own.\n  WebApp.httpServer.removeListener(\n    'request', WebApp._timeoutAdjustmentRequestCallback);\n  self.server.installHandlers(WebApp.httpServer);\n  WebApp.httpServer.addListener(\n    'request', WebApp._timeoutAdjustmentRequestCallback);\n\n  // Support the /websocket endpoint\n  self._redirectWebsocketEndpoint();\n\n  self.server.on('connection', function (socket) {\n    // sockjs sometimes passes us null instead of a socket object\n    // so we need to guard against that. see:\n    // https://github.com/sockjs/sockjs-node/issues/121\n    // https://github.com/meteor/meteor/issues/10468\n    if (!socket) return;\n\n    // We want to make sure that if a client connects to us and does the initial\n    // Websocket handshake but never gets to the DDP handshake, that we\n    // eventually kill the socket.  Once the DDP handshake happens, DDP\n    // heartbeating will work. And before the Websocket handshake, the timeouts\n    // we set at the server level in webapp_server.js will work. But\n    // faye-websocket calls setTimeout(0) on any socket it takes over, so there\n    // is an \"in between\" state where this doesn't happen.  We work around this\n    // by explicitly setting the socket timeout to a relatively large time here,\n    // and setting it back to zero when we set up the heartbeat in\n    // livedata_server.js.\n    socket.setWebsocketTimeout = function (timeout) {\n      if ((socket.protocol === 'websocket' ||\n           socket.protocol === 'websocket-raw')\n          && socket._session.recv) {\n        socket._session.recv.connection.setTimeout(timeout);\n      }\n    };\n    socket.setWebsocketTimeout(45 * 1000);\n\n    socket.send = function (data) {\n      socket.write(data);\n    };\n    socket.on('close', function () {\n      self.open_sockets = _.without(self.open_sockets, socket);\n    });\n    self.open_sockets.push(socket);\n\n    // only to send a message after connection on tests, useful for\n    // socket-stream-client/server-tests.js\n    if (process.env.TEST_METADATA) {\n      socket.send(JSON.stringify({ testMessageOnConnect: true }));\n    }\n\n    // call all our callbacks when we get a new socket. they will do the\n    // work of setting up handlers and such for specific messages.\n    _.each(self.registration_callbacks, function (callback) {\n      callback(socket);\n    });\n  });\n\n};\n\nObject.assign(StreamServer.prototype, {\n  // call my callback when a new socket connects.\n  // also call it for all current connections.\n  register: function (callback) {\n    var self = this;\n    self.registration_callbacks.push(callback);\n    _.each(self.all_sockets(), function (socket) {\n      callback(socket);\n    });\n  },\n\n  // get a list of all sockets\n  all_sockets: function () {\n    var self = this;\n    return _.values(self.open_sockets);\n  },\n\n  // Redirect /websocket to /sockjs/websocket in order to not expose\n  // sockjs to clients that want to use raw websockets\n  _redirectWebsocketEndpoint: function() {\n    var self = this;\n    // Unfortunately we can't use a connect middleware here since\n    // sockjs installs itself prior to all existing listeners\n    // (meaning prior to any connect middlewares) so we need to take\n    // an approach similar to overshadowListeners in\n    // https://github.com/sockjs/sockjs-node/blob/cf820c55af6a9953e16558555a31decea554f70e/src/utils.coffee\n    ['request', 'upgrade'].forEach((event) => {\n      var httpServer = WebApp.httpServer;\n      var oldHttpServerListeners = httpServer.listeners(event).slice(0);\n      httpServer.removeAllListeners(event);\n\n      // request and upgrade have different arguments passed but\n      // we only care about the first one which is always request\n      var newListener = function(request /*, moreArguments */) {\n        // Store arguments for use within the closure below\n        var args = arguments;\n\n        // TODO replace with url package\n        var url = Npm.require('url');\n\n        // Rewrite /websocket and /websocket/ urls to /sockjs/websocket while\n        // preserving query string.\n        var parsedUrl = url.parse(request.url);\n        if (parsedUrl.pathname === pathPrefix + '/websocket' ||\n            parsedUrl.pathname === pathPrefix + '/websocket/') {\n          parsedUrl.pathname = self.prefix + '/websocket';\n          request.url = url.format(parsedUrl);\n        }\n        _.each(oldHttpServerListeners, function(oldListener) {\n          oldListener.apply(httpServer, args);\n        });\n      };\n      httpServer.addListener(event, newListener);\n    });\n  }\n});\n"]},"sourceType":"module","hash":"642802bc633d676c8175c2f7652a487b97ba2331"}
