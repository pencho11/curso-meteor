[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar WebApp = Package.webapp.WebApp;\nvar WebAppInternals = Package.webapp.WebAppInternals;\nvar main = Package.webapp.main;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Promise = Package.promise.Promise;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"akryum:vue-component-dev-server\":{\"server\":{\"main.js\":function module(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                          //\n// packages/akryum_vue-component-dev-server/server/main.js                                                  //\n//                                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                            //\nlet os;\nmodule.link(\"os\", {\n  default(v) {\n    os = v;\n  }\n\n}, 0);\n\nfunction getMeteorPort() {\n  const reg = /:\\/\\/.+:(\\d+)/gi;\n  const result = reg.exec(Meteor.absoluteUrl());\n\n  if (result && result.length >= 2) {\n    return parseInt(result[1]) + 3;\n  }\n}\n\nfunction getLocalIp() {\n  const ifaces = os.networkInterfaces();\n  let ip;\n\n  for (const key of Object.keys(ifaces)) {\n    const interfaces = ifaces[key];\n\n    for (const iface of interfaces) {\n      if (iface.family !== 'IPv4' || iface.internal !== false) {// skip over internal (i.e. 127.0.0.1) and non-ipv4 addresses\n      } else {\n        ip = iface.address;\n        break;\n      }\n    }\n\n    if (ip) {\n      break;\n    }\n  }\n\n  if (!ip) {\n    console.warn(\"[HMR] No local IP detected. If you want to connect from a remote device, set the local IP with the 'HMR_URL' env. variable.\");\n    ip = '127.0.0.1';\n  } else {// console.warn(`[HMR] Local IP detected: '${ip}'. If you have issues connecting from a remote device, set the local IP with the 'HMR_URL' env. variable.`)\n  }\n\n  return ip;\n} // to define only dev port with same url\n\n\nconst PORT = parseInt(process.env.HMR_PORT) || parseInt(process.env.VUE_DEV_SERVER_PORT) || getMeteorPort() || 3003; // to define full url with port (example: https://dev.example.com:8443) or only domain\n\nconst DEVURL = process.env.HMR_URL || process.env.VUE_DEV_SERVER_URL || getLocalIp(); // Client-side config\n\n__meteor_runtime_config__.VUE_DEV_SERVER_URL = DEVURL.indexOf(':') === -1 ? \"\".concat(DEVURL, \":\").concat(PORT) : DEVURL;\n__meteor_runtime_config__.VUE_NO_HMR = !!process.env.NO_HMR;\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nvar exports = require(\"/node_modules/meteor/akryum:vue-component-dev-server/server/main.js\");\n\n/* Exports */\nPackage._define(\"akryum:vue-component-dev-server\", exports);\n\n})();\n","servePath":"/packages/akryum_vue-component-dev-server.js","sourceMap":{"version":3,"sources":["packages/akryum:vue-component-dev-server/server/main.js"],"names":["os","module","link","default","v","getMeteorPort","reg","result","exec","Meteor","absoluteUrl","length","parseInt","getLocalIp","ifaces","networkInterfaces","ip","key","Object","keys","interfaces","iface","family","internal","address","console","warn","PORT","process","env","HMR_PORT","VUE_DEV_SERVER_PORT","DEVURL","HMR_URL","VUE_DEV_SERVER_URL","__meteor_runtime_config__","indexOf","VUE_NO_HMR","NO_HMR"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA,IAAIA,EAAJ;AAAOC,MAAM,CAACC,IAAP,CAAY,IAAZ,EAAiB;AAACC,SAAO,CAACC,CAAD,EAAG;AAACJ,MAAE,GAACI,CAAH;AAAK;;AAAjB,CAAjB,EAAoC,CAApC;;AAEP,SAASC,aAAT,GAA0B;AACxB,QAAMC,GAAG,GAAG,iBAAZ;AACA,QAAMC,MAAM,GAAGD,GAAG,CAACE,IAAJ,CAASC,MAAM,CAACC,WAAP,EAAT,CAAf;;AACA,MAAIH,MAAM,IAAIA,MAAM,CAACI,MAAP,IAAiB,CAA/B,EAAkC;AAChC,WAAOC,QAAQ,CAACL,MAAM,CAAC,CAAD,CAAP,CAAR,GAAsB,CAA7B;AACD;AACF;;AAED,SAASM,UAAT,GAAuB;AACrB,QAAMC,MAAM,GAAGd,EAAE,CAACe,iBAAH,EAAf;AAEA,MAAIC,EAAJ;;AACA,OAAK,MAAMC,GAAX,IAAkBC,MAAM,CAACC,IAAP,CAAYL,MAAZ,CAAlB,EAAuC;AACrC,UAAMM,UAAU,GAAGN,MAAM,CAACG,GAAD,CAAzB;;AACA,SAAK,MAAMI,KAAX,IAAoBD,UAApB,EAAgC;AAC9B,UAAIC,KAAK,CAACC,MAAN,KAAiB,MAAjB,IAA2BD,KAAK,CAACE,QAAN,KAAmB,KAAlD,EAAyD,CACvD;AACD,OAFD,MAEO;AACLP,UAAE,GAAGK,KAAK,CAACG,OAAX;AACA;AACD;AACF;;AACD,QAAIR,EAAJ,EAAQ;AACN;AACD;AACF;;AAED,MAAI,CAACA,EAAL,EAAS;AACPS,WAAO,CAACC,IAAR;AACAV,MAAE,GAAG,WAAL;AACD,GAHD,MAGO,CACL;AACD;;AAED,SAAOA,EAAP;AACD,C,CAED;;;AACA,MAAMW,IAAI,GAAGf,QAAQ,CAACgB,OAAO,CAACC,GAAR,CAAYC,QAAb,CAAR,IAAkClB,QAAQ,CAACgB,OAAO,CAACC,GAAR,CAAYE,mBAAb,CAA1C,IAA+E1B,aAAa,EAA5F,IAAkG,IAA/G,C,CAEA;;AACA,MAAM2B,MAAM,GAAGJ,OAAO,CAACC,GAAR,CAAYI,OAAZ,IAAuBL,OAAO,CAACC,GAAR,CAAYK,kBAAnC,IAAyDrB,UAAU,EAAlF,C,CAEA;;AACAsB,yBAAyB,CAACD,kBAA1B,GAA+CF,MAAM,CAACI,OAAP,CAAe,GAAf,MAAwB,CAAC,CAAzB,aAAgCJ,MAAhC,cAA0CL,IAA1C,IAAmDK,MAAlG;AACAG,yBAAyB,CAACE,UAA1B,GAAuC,CAAC,CAACT,OAAO,CAACC,GAAR,CAAYS,MAArD,C","file":"/packages/akryum_vue-component-dev-server.js","sourcesContent":["import os from 'os'\n\nfunction getMeteorPort () {\n  const reg = /:\\/\\/.+:(\\d+)/gi\n  const result = reg.exec(Meteor.absoluteUrl())\n  if (result && result.length >= 2) {\n    return parseInt(result[1]) + 3\n  }\n}\n\nfunction getLocalIp () {\n  const ifaces = os.networkInterfaces()\n\n  let ip\n  for (const key of Object.keys(ifaces)) {\n    const interfaces = ifaces[key]\n    for (const iface of interfaces) {\n      if (iface.family !== 'IPv4' || iface.internal !== false) {\n        // skip over internal (i.e. 127.0.0.1) and non-ipv4 addresses\n      } else {\n        ip = iface.address\n        break\n      }\n    }\n    if (ip) {\n      break\n    }\n  }\n\n  if (!ip) {\n    console.warn(`[HMR] No local IP detected. If you want to connect from a remote device, set the local IP with the 'HMR_URL' env. variable.`)\n    ip = '127.0.0.1'\n  } else {\n    // console.warn(`[HMR] Local IP detected: '${ip}'. If you have issues connecting from a remote device, set the local IP with the 'HMR_URL' env. variable.`)\n  }\n\n  return ip\n}\n\n// to define only dev port with same url\nconst PORT = parseInt(process.env.HMR_PORT) || parseInt(process.env.VUE_DEV_SERVER_PORT) || getMeteorPort() || 3003\n\n// to define full url with port (example: https://dev.example.com:8443) or only domain\nconst DEVURL = process.env.HMR_URL || process.env.VUE_DEV_SERVER_URL || getLocalIp()\n\n// Client-side config\n__meteor_runtime_config__.VUE_DEV_SERVER_URL = DEVURL.indexOf(':') === -1 ? `${DEVURL}:${PORT}` : DEVURL\n__meteor_runtime_config__.VUE_NO_HMR = !!process.env.NO_HMR\n"]}}]