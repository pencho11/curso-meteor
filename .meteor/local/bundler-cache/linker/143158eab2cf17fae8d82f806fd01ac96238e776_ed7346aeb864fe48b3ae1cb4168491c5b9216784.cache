[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar MongoInternals = Package.mongo.MongoInternals;\nvar Mongo = Package.mongo.Mongo;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar Collection2 = Package['aldeed:collection2'].Collection2;\nvar CollectionHooks = Package['matb33:collection-hooks'].CollectionHooks;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Promise = Package.promise.Promise;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"socialize:base-model\":{\"entry-meteor.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/socialize_base-model/entry-meteor.js                                                                   //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nmodule.export({\n  BaseModel: () => BaseModel\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet construct;\nmodule.link(\"./base-model\", {\n  default(v) {\n    construct = v;\n  }\n\n}, 1);\n\n/* eslint-enable import/no-unresolved */\nconst BaseModel = construct(Meteor);\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"base-model.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/socialize_base-model/base-model.js                                                                     //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nlet MessageBox;\nmodule.link(\"message-box\", {\n  default(v) {\n    MessageBox = v;\n  }\n\n}, 1);\nlet diff;\nmodule.link(\"mongodb-diff\", {\n  diff(v) {\n    diff = v;\n  }\n\n}, 2);\nmodule.exportDefault(Meteor => {\n  /* We check for server code here to deal with a buffer issue in meteor-message-box\n   * This shouldn't be a major issue as I doubt we will need to display this error\n   * on the client at this point. Should be fixed though.\n   * https://github.com/aldeed/meteor-message-box/issues/1\n  */\n  if (Meteor.isServer) {\n    MessageBox.defaults({\n      messages: {\n        en: {\n          Untrusted: 'Inserts/Updates from untrusted code not supported'\n        }\n      }\n    });\n  }\n\n  SimpleSchema.denyUntrusted = function denyUntrusted() {\n    if (this.isSet) {\n      const autoValue = this.definition.autoValue && this.definition.autoValue.call(this);\n      const {\n        defaultValue\n      } = this.definition;\n\n      if (this.value !== defaultValue && this.value !== autoValue && !this.isFromTrustedCode) {\n        return 'Untrusted';\n      }\n    }\n\n    return undefined;\n  };\n\n  function extend(receiver, provider) {\n    const rec = receiver;\n\n    for (const prop in provider) {\n      if (prop in provider) {\n        rec[prop] = provider[prop];\n      }\n    }\n  }\n\n  return class BaseModel {\n    constructor() {\n      let document = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      let preClean = arguments.length > 1 ? arguments[1] : undefined;\n      let doc = document;\n\n      if (preClean) {\n        doc = this._getSchema(doc).clean(doc);\n      }\n\n      extend(this, doc);\n\n      this.getDocument = function getDocument() {\n        return doc;\n      };\n    }\n\n    static createEmpty(_id) {\n      return new this({\n        _id\n      });\n    }\n\n    static methods(methodMap) {\n      const self = this;\n\n      if ((typeof methodMap === 'function' || typeof methodMap === 'object') && !!methodMap) {\n        const keys = Object.keys(methodMap);\n\n        for (let i = 0, {\n          length\n        } = keys; i < length; i++) {\n          const method = methodMap[keys[i]];\n\n          if (typeof method === 'function') {\n            if (!self.prototype[keys[i]]) {\n              self.prototype[keys[i]] = method;\n            } else {\n              throw new Meteor.Error('existent-method', \"The method \".concat(keys[i], \" already exists.\"));\n            }\n          }\n        }\n      }\n    }\n\n    static updateTransformFunction() {\n      this.prototype.getCollection()._transform = document => new this(document);\n    }\n\n    static attachCollection(collection) {\n      let transform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      this.prototype.getCollection = function getCollection() {\n        return collection;\n      };\n\n      if (transform) {\n        this.updateTransformFunction();\n      }\n    }\n\n    static attachSchema(schemaInstance) {\n      const collection = this.prototype.getCollection();\n\n      if (collection) {\n        collection.attachSchema(schemaInstance);\n      } else {\n        throw new Meteor.Error(\"Can't append schema to non existent collection. Please attach a collection to your model using `ModelName.attachCollection`\");\n      }\n    }\n\n    static appendSchema(schemaObject) {\n      this.attachSchema(new SimpleSchema(schemaObject));\n    }\n\n    _getSchema() {\n      const schema = this.getCollection().simpleSchema(...arguments);\n\n      if (schema) {\n        return schema;\n      }\n\n      throw new Meteor.Error('noSchema', \"You don't have a schema defined for \".concat(this.getCollectionName()));\n    }\n\n    getCollection() {\n      // We just throw here. This method is reassigned in attachCollection method when collection is attached.\n      if (this) throw new Meteor.Error('noCollection', 'You must use ClassName.attachCollection to attach a collection to your model.');\n    }\n\n    getCollectionName() {\n      return this.getCollection()._name;\n    } // get all values from the model that do not have a denyUpdate or denyUntrusted in their schema\n\n\n    getUpdatableFields() {\n      const schemas = Meteor._get(this.getCollection(), '_c2', '_simpleSchemas');\n\n      const fields = {\n        _id: this._id\n      };\n\n      for (const key of Object.keys(this)) {\n        schemas.forEach(_ref => {\n          let {\n            schema\n          } = _ref;\n\n          if (schema[key] && !(schema[key].custom && schema[key].custom === SimpleSchema.denyUntrusted) && !schema[key].denyUpdate) {\n            fields[key] = this[key];\n          }\n        });\n      }\n\n      return fields;\n    }\n\n    checkOwnership() {\n      return this.userId === Meteor.userId();\n    }\n\n    save(callback) {\n      let obj = Object.keys(this).reduce((accumulator, key) => {\n        if (key !== 'getDocument') accumulator[key] = this[key]; // eslint-disable-line no-param-reassign\n\n        return accumulator;\n      }, {});\n\n      if (this._id) {\n        const updateDiff = diff(this.getDocument(), obj);\n\n        if (updateDiff && Object.keys(updateDiff).length !== 0) {\n          this.update(updateDiff, callback);\n        } else {\n          callback && callback(null);\n        }\n      } else {\n        const schema = this._getSchema(obj);\n\n        if (Meteor.isClient && schema) {\n          obj = schema.clean(obj, {\n            extendAutoValueContext: {\n              isInsert: true,\n              userId: Meteor.userId()\n            }\n          });\n        }\n\n        this._id = this.getCollection().insert(obj, callback);\n      }\n\n      return this;\n    }\n\n    update(modifier, callback) {\n      if (this._id) {\n        this.getCollection().update(this._id, modifier, callback);\n      }\n    }\n\n    remove(callback) {\n      if (this._id) {\n        this.getCollection().remove({\n          _id: this._id\n        }, callback);\n      }\n    }\n\n  };\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"node_modules\":{\"mongodb-diff\":{\"package.json\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// node_modules/meteor/socialize_base-model/node_modules/mongodb-diff/package.json                                 //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nmodule.exports = {\n  \"name\": \"mongodb-diff\",\n  \"version\": \"0.4.4\"\n};\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// node_modules/meteor/socialize_base-model/node_modules/mongodb-diff/index.js                                     //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\nmodule.useNode();\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nvar exports = require(\"/node_modules/meteor/socialize:base-model/entry-meteor.js\");\n\n/* Exports */\nPackage._define(\"socialize:base-model\", exports);\n\n})();\n","servePath":"/packages/socialize_base-model.js","sourceMap":{"version":3,"sources":["packages/socialize:base-model/entry-meteor.js","packages/socialize:base-model/base-model.js"],"names":["module","export","BaseModel","Meteor","link","v","construct","default","SimpleSchema","MessageBox","diff","exportDefault","isServer","defaults","messages","en","Untrusted","denyUntrusted","isSet","autoValue","definition","call","defaultValue","value","isFromTrustedCode","undefined","extend","receiver","provider","rec","prop","constructor","document","preClean","doc","_getSchema","clean","getDocument","createEmpty","_id","methods","methodMap","self","keys","Object","i","length","method","prototype","Error","updateTransformFunction","getCollection","_transform","attachCollection","collection","transform","attachSchema","schemaInstance","appendSchema","schemaObject","schema","simpleSchema","getCollectionName","_name","getUpdatableFields","schemas","_get","fields","key","forEach","custom","denyUpdate","checkOwnership","userId","save","callback","obj","reduce","accumulator","updateDiff","update","isClient","extendAutoValueContext","isInsert","insert","modifier","remove"],"mappings":"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","file":"/packages/socialize_base-model.js","sourcesContent":["/* eslint-disable import/no-unresolved */\nimport { Meteor } from 'meteor/meteor';\nimport construct from './base-model';\n/* eslint-enable import/no-unresolved */\n\nconst BaseModel = construct(Meteor);\n\nexport { BaseModel };\n","/* eslint-disable import/no-unresolved */\nimport SimpleSchema from 'simpl-schema';\nimport MessageBox from 'message-box';\nimport { diff } from 'mongodb-diff';\n/* eslint-enable import/no-unresolved */\n\nexport default (Meteor) => {\n    /* We check for server code here to deal with a buffer issue in meteor-message-box\n     * This shouldn't be a major issue as I doubt we will need to display this error\n     * on the client at this point. Should be fixed though.\n     * https://github.com/aldeed/meteor-message-box/issues/1\n    */\n    if (Meteor.isServer) {\n        MessageBox.defaults({\n            messages: {\n                en: {\n                    Untrusted: 'Inserts/Updates from untrusted code not supported',\n                },\n            },\n        });\n    }\n\n    SimpleSchema.denyUntrusted = function denyUntrusted() {\n        if (this.isSet) {\n            const autoValue = this.definition.autoValue && this.definition.autoValue.call(this);\n            const { defaultValue } = this.definition;\n\n            if (this.value !== defaultValue && this.value !== autoValue && !this.isFromTrustedCode) {\n                return 'Untrusted';\n            }\n        }\n        return undefined;\n    };\n\n    function extend(receiver, provider) {\n        const rec = receiver;\n        for (const prop in provider) {\n            if (prop in provider) {\n                rec[prop] = provider[prop];\n            }\n        }\n    }\n\n    return class BaseModel {\n        constructor(document = {}, preClean) {\n            let doc = document;\n            if (preClean) {\n                doc = this._getSchema(doc).clean(doc);\n            }\n            extend(this, doc);\n            this.getDocument = function getDocument() {\n                return doc;\n            };\n        }\n\n        static createEmpty(_id) {\n            return new this({ _id });\n        }\n\n        static methods(methodMap) {\n            const self = this;\n            if ((typeof methodMap === 'function' || typeof methodMap === 'object') && !!methodMap) {\n                const keys = Object.keys(methodMap);\n                for (let i = 0, { length } = keys; i < length; i++) {\n                    const method = methodMap[keys[i]];\n\n                    if (typeof method === 'function') {\n                        if (!self.prototype[keys[i]]) {\n                            self.prototype[keys[i]] = method;\n                        } else {\n                            throw new Meteor.Error('existent-method', `The method ${keys[i]} already exists.`);\n                        }\n                    }\n                }\n            }\n        }\n\n        static updateTransformFunction() {\n            this.prototype.getCollection()._transform = document => new this(document);\n        }\n\n        static attachCollection(collection, transform = true) {\n            this.prototype.getCollection = function getCollection() {\n                return collection;\n            };\n\n            if (transform) {\n                this.updateTransformFunction();\n            }\n        }\n\n        static attachSchema(schemaInstance) {\n            const collection = this.prototype.getCollection();\n\n            if (collection) {\n                collection.attachSchema(schemaInstance);\n            } else {\n                throw new Meteor.Error(\"Can't append schema to non existent collection. Please attach a collection to your model using `ModelName.attachCollection`\");\n            }\n        }\n\n        static appendSchema(schemaObject) {\n            this.attachSchema(new SimpleSchema(schemaObject));\n        }\n\n        _getSchema(...args) {\n            const schema = this.getCollection().simpleSchema(...args);\n            if (schema) {\n                return schema;\n            }\n            throw new Meteor.Error('noSchema', `You don't have a schema defined for ${this.getCollectionName()}`);\n        }\n\n        getCollection() {\n            // We just throw here. This method is reassigned in attachCollection method when collection is attached.\n            if (this) throw new Meteor.Error('noCollection', 'You must use ClassName.attachCollection to attach a collection to your model.');\n        }\n\n        getCollectionName() {\n            return this.getCollection()._name;\n        }\n\n        // get all values from the model that do not have a denyUpdate or denyUntrusted in their schema\n        getUpdatableFields() {\n            const schemas = Meteor._get(this.getCollection(), '_c2', '_simpleSchemas');\n            const fields = { _id: this._id };\n\n            for (const key of Object.keys(this)) {\n                schemas.forEach(({ schema }) => {\n                    if (schema[key] && !(schema[key].custom && schema[key].custom === SimpleSchema.denyUntrusted) && !schema[key].denyUpdate) {\n                        fields[key] = this[key];\n                    }\n                });\n            }\n\n            return fields;\n        }\n\n        checkOwnership() {\n            return this.userId === Meteor.userId();\n        }\n\n        save(callback) {\n            let obj = Object.keys(this).reduce(\n                (accumulator, key) => {\n                    if (key !== 'getDocument') accumulator[key] = this[key]; // eslint-disable-line no-param-reassign\n                    return accumulator;\n                }, {},\n            );\n\n            if (this._id) {\n                const updateDiff = diff(this.getDocument(), obj);\n                if (updateDiff && Object.keys(updateDiff).length !== 0) {\n                    this.update(updateDiff, callback);\n                } else {\n                    callback && callback(null);\n                }\n            } else {\n                const schema = this._getSchema(obj);\n                if (Meteor.isClient && schema) {\n                    obj = schema.clean(obj, {\n                        extendAutoValueContext: {\n                            isInsert: true,\n                            userId: Meteor.userId(),\n                        },\n                    });\n                }\n                this._id = this.getCollection().insert(obj, callback);\n            }\n\n            return this;\n        }\n\n        update(modifier, callback) {\n            if (this._id) {\n                this.getCollection().update(this._id, modifier, callback);\n            }\n        }\n\n        remove(callback) {\n            if (this._id) {\n                this.getCollection().remove({ _id: this._id }, callback);\n            }\n        }\n    };\n};\n"]}}]