[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Accounts = Package['accounts-base'].Accounts;\nvar Mongo = Package.mongo.Mongo;\nvar Collection2 = Package['aldeed:collection2'].Collection2;\nvar CollectionHooks = Package['matb33:collection-hooks'].CollectionHooks;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Promise = Package.promise.Promise;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"socialize:user-model\":{\"common\":{\"common.js\":function module(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                          //\n// packages/socialize_user-model/common/common.js                                                           //\n//                                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                            //\nmodule.export({\n  User: () => User,\n  UsersCollection: () => UsersCollection\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n\n}, 0);\nlet check;\nmodule.link(\"meteor/check\", {\n  check(v) {\n    check = v;\n  }\n\n}, 1);\nlet LinkableModel, LinkParent;\nmodule.link(\"meteor/socialize:linkable-model\", {\n  LinkableModel(v) {\n    LinkableModel = v;\n  },\n\n  LinkParent(v) {\n    LinkParent = v;\n  }\n\n}, 2);\nlet construct;\nmodule.link(\"./user-model.js\", {\n  default(v) {\n    construct = v;\n  }\n\n}, 3);\nconst {\n  User,\n  UsersCollection\n} = construct({\n  Meteor,\n  Package,\n  check,\n  LinkableModel,\n  LinkParent\n});\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"user-model.js\":function module(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                          //\n// packages/socialize_user-model/common/user-model.js                                                       //\n//                                                                                                          //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                            //\nlet SimpleSchema;\nmodule.link(\"simpl-schema\", {\n  default(v) {\n    SimpleSchema = v;\n  }\n\n}, 0);\nmodule.exportDefault(_ref => {\n  let {\n    Meteor,\n    Package,\n    check,\n    LinkableModel,\n    LinkParent\n  } = _ref;\n\n  /**\n  * Represents a User\n  * @class User\n  * @param {Object} document An object representing a user ususally a Mongo document\n  */\n  class User extends LinkParent {\n    //eslint-disable-line\n    static addFieldsToPublish(fieldsObj) {\n      Object.assign(this.fieldsToPublish, fieldsObj);\n    }\n    /**\n    * The personal name of the user account, You if the the user represents the\n    * currently logged in user, or this.username otherwise\n    * @returns {String} A name representation of the user account\n    */\n\n\n    displayName() {\n      return this.isSelf() ? 'You' : this.username;\n    }\n    /**\n    * Check if the this user is the current logged in user or the specified user\n    * @param   {Object}  user The user to check against\n    * @returns {Boolean} Whether or not this user is the same as the specified user\n    */\n\n\n    isSelf(user) {\n      const userId = user && user._id || Meteor.userId();\n      return this._id === userId;\n    }\n\n  }\n\n  User.fieldsToPublish = {\n    username: 1\n  };\n  User.attachCollection(Meteor.users);\n  const UsersSchema = new SimpleSchema({\n    username: {\n      type: String,\n      // For accounts-password, either emails or username is required, but not both. It is OK to make this\n      // optional here because the accounts-password package does its own validation.\n      // Third-party login packages may not require either. Adjust this schema as necessary for your usage.\n      optional: true\n    },\n    emails: {\n      type: Array,\n      // For accounts-password, either emails or username is required, but not both. It is OK to make this\n      // optional here because the accounts-password package does its own validation.\n      // Third-party login packages may not require either. Adjust this schema as necessary for your usage.\n      optional: true\n    },\n    'emails.$': {\n      type: Object\n    },\n    'emails.$.address': {\n      type: String,\n      regEx: SimpleSchema.RegEx.Email\n    },\n    'emails.$.verified': {\n      type: Boolean\n    },\n    'emails.$.default': {\n      type: Boolean,\n      optional: true\n    },\n    createdAt: {\n      type: Date\n    },\n    // Make sure this services field is in your schema if you're using any of the accounts packages\n    services: {\n      type: Object,\n      optional: true,\n      blackbox: true\n    },\n    heartbeat: {\n      type: Date,\n      optional: true\n    }\n  });\n  User.attachSchema(UsersSchema);\n  LinkableModel.registerParentModel(User);\n\n  if (Package['accounts-password']) {\n    Meteor.methods && Meteor.methods({\n      /**\n      * Sets the default email for the currently logged in users\n      * @param {String} emailAddress The email address to set as the current\n      */\n      setDefaultEmail(emailAddress) {\n        check(emailAddress, String);\n\n        if (this.userId) {\n          const user = Meteor.users.findOne({\n            _id: this.userId,\n            'emails.address': emailAddress\n          });\n\n          if (user) {\n            Meteor.users.update({\n              _id: this.userId,\n              'emails.default': true\n            }, {\n              $set: {\n                'emails.$.default': false\n              }\n            });\n            Meteor.users.update({\n              _id: this.userId,\n              'emails.address': emailAddress\n            }, {\n              $set: {\n                'emails.$.default': true\n              }\n            });\n          }\n        } else {\n          throw new Meteor.Error('NotAuthorized', 'You must be logged in to perform this operation.');\n        }\n      }\n\n    });\n    User.methods({\n      /**\n      * Set the default email address for the user\n      * @param {[type]} emailAddress [description]\n      */\n      setDefaultEmail(emailAddress) {\n        if (Meteor.user().isSelf()) {\n          Meteor.call('setDefaultEmail', emailAddress);\n        }\n      },\n\n      /**\n      * Get the default email address for the user\n      * @returns {String} The users default email address\n      */\n      defaultEmail() {\n        const obj = this.emails.find(rec => rec.default === true);\n        return obj && obj.address || this.emails[0].address;\n      }\n\n    });\n  }\n\n  return {\n    User,\n    UsersCollection: Meteor.users\n  };\n});\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nvar exports = require(\"/node_modules/meteor/socialize:user-model/common/common.js\");\n\n/* Exports */\nPackage._define(\"socialize:user-model\", exports);\n\n})();\n","servePath":"/packages/socialize_user-model.js","sourceMap":{"version":3,"sources":["packages/socialize:user-model/common/common.js","packages/socialize:user-model/common/user-model.js"],"names":["module","export","User","UsersCollection","Meteor","link","v","check","LinkableModel","LinkParent","construct","default","Package","SimpleSchema","exportDefault","addFieldsToPublish","fieldsObj","Object","assign","fieldsToPublish","displayName","isSelf","username","user","userId","_id","attachCollection","users","UsersSchema","type","String","optional","emails","Array","regEx","RegEx","Email","Boolean","createdAt","Date","services","blackbox","heartbeat","attachSchema","registerParentModel","methods","setDefaultEmail","emailAddress","findOne","update","$set","Error","call","defaultEmail","obj","find","rec","address"],"mappings":"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","file":"/packages/socialize_user-model.js","sourcesContent":["/* global Package */\n/* eslint-disable import/no-unresolved */\nimport { Meteor } from 'meteor/meteor';\nimport { check } from 'meteor/check';\nimport { LinkableModel, LinkParent } from 'meteor/socialize:linkable-model';\n/* eslint-enable import/no-unresolved */\n\nimport construct from './user-model.js';\n\nconst { User, UsersCollection } = construct({ Meteor, Package, check, LinkableModel, LinkParent });\n\nexport { User, UsersCollection };\n","/* eslint-disable import/no-unresolved */\nimport SimpleSchema from 'simpl-schema';\n/* eslint-enable import/no-unresolved */\n\n\nexport default ({ Meteor, Package, check, LinkableModel, LinkParent }) => {\n    /**\n    * Represents a User\n    * @class User\n    * @param {Object} document An object representing a user ususally a Mongo document\n    */\n    class User extends LinkParent { //eslint-disable-line\n        static fieldsToPublish = { username: 1 };\n\n        static addFieldsToPublish(fieldsObj) {\n            Object.assign(this.fieldsToPublish, fieldsObj);\n        }\n\n        /**\n        * The personal name of the user account, You if the the user represents the\n        * currently logged in user, or this.username otherwise\n        * @returns {String} A name representation of the user account\n        */\n        displayName() {\n            return this.isSelf() ? 'You' : this.username;\n        }\n\n        /**\n        * Check if the this user is the current logged in user or the specified user\n        * @param   {Object}  user The user to check against\n        * @returns {Boolean} Whether or not this user is the same as the specified user\n        */\n        isSelf(user) {\n            const userId = (user && user._id) || Meteor.userId();\n\n            return this._id === userId;\n        }\n    }\n\n    User.attachCollection(Meteor.users);\n\n    const UsersSchema = new SimpleSchema({\n        username: {\n            type: String,\n            // For accounts-password, either emails or username is required, but not both. It is OK to make this\n            // optional here because the accounts-password package does its own validation.\n            // Third-party login packages may not require either. Adjust this schema as necessary for your usage.\n            optional: true,\n        },\n        emails: {\n            type: Array,\n            // For accounts-password, either emails or username is required, but not both. It is OK to make this\n            // optional here because the accounts-password package does its own validation.\n            // Third-party login packages may not require either. Adjust this schema as necessary for your usage.\n            optional: true,\n        },\n        'emails.$': {\n            type: Object,\n        },\n        'emails.$.address': {\n            type: String,\n            regEx: SimpleSchema.RegEx.Email,\n        },\n        'emails.$.verified': {\n            type: Boolean,\n        },\n        'emails.$.default': {\n            type: Boolean,\n            optional: true,\n        },\n        createdAt: {\n            type: Date,\n        },\n        // Make sure this services field is in your schema if you're using any of the accounts packages\n        services: {\n            type: Object,\n            optional: true,\n            blackbox: true,\n        },\n        heartbeat: {\n            type: Date,\n            optional: true,\n        },\n    });\n\n    User.attachSchema(UsersSchema);\n\n    LinkableModel.registerParentModel(User);\n\n\n    if (Package['accounts-password']) {\n        Meteor.methods && Meteor.methods({\n            /**\n            * Sets the default email for the currently logged in users\n            * @param {String} emailAddress The email address to set as the current\n            */\n            setDefaultEmail(emailAddress) {\n                check(emailAddress, String);\n                if (this.userId) {\n                    const user = Meteor.users.findOne({ _id: this.userId, 'emails.address': emailAddress });\n                    if (user) {\n                        Meteor.users.update({ _id: this.userId, 'emails.default': true }, { $set: { 'emails.$.default': false } });\n                        Meteor.users.update({ _id: this.userId, 'emails.address': emailAddress }, { $set: { 'emails.$.default': true } });\n                    }\n                } else {\n                    throw new Meteor.Error('NotAuthorized', 'You must be logged in to perform this operation.');\n                }\n            },\n        });\n\n        User.methods({\n            /**\n            * Set the default email address for the user\n            * @param {[type]} emailAddress [description]\n            */\n            setDefaultEmail(emailAddress) {\n                if (Meteor.user().isSelf()) {\n                    Meteor.call('setDefaultEmail', emailAddress);\n                }\n            },\n            /**\n            * Get the default email address for the user\n            * @returns {String} The users default email address\n            */\n            defaultEmail() {\n                const obj = this.emails.find(rec => rec.default === true);\n                return (obj && obj.address) || this.emails[0].address;\n            },\n        });\n    }\n\n    return { User, UsersCollection: Meteor.users };\n};\n"]}}]