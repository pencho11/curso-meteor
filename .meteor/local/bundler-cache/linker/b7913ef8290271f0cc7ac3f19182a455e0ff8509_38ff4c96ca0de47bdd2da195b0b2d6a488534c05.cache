[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nValidatedMethod = Package['mdg:validated-method'].ValidatedMethod;\ncheck = Package.check.check;\nMatch = Package.check.Match;\nAccounts = Package['accounts-base'].Accounts;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nWebAppInternals = Package.webapp.WebAppInternals;\nmain = Package.webapp.main;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nmeteorInstall = Package.modules.meteorInstall;\nPromise = Package.promise.Promise;\nAutoupdate = Package.autoupdate.Autoupdate;\n\n","servePath":"/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"api\":{\"Users\":{\"UsersCtrl.js\":function module(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// imports/api/Users/UsersCtrl.js                                               //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\nlet ValidatedMethod;\nmodule.link(\"meteor/mdg:validated-method\", {\n  ValidatedMethod(v) {\n    ValidatedMethod = v;\n  }\n\n}, 0);\nlet check, Match;\nmodule.link(\"meteor/check\", {\n  check(v) {\n    check = v;\n  },\n\n  Match(v) {\n    Match = v;\n  }\n\n}, 1);\nnew ValidatedMethod({\n  name: 'user.save',\n\n  validate(user) {\n    try {\n      check(user, {\n        _id: Match.OneOf(String, null),\n        username: String,\n        emails: [{\n          address: String,\n          verified: Boolean\n        }],\n        profile: {\n          profile: String,\n          name: String,\n          path: Match.OneOf(String, null)\n        }\n      });\n    } catch (error) {\n      console.log('save.user', error);\n      throw new Meteor.Error('403', 'La informacion introducida no es valida');\n    }\n  },\n\n  run(user) {\n    const responseMessage = '';\n\n    try {\n      Accounts.createUser({\n        username: user.username,\n        email: user.emails[0].address,\n        profile: user.profile\n      });\n      responseMessage = 'Se ha creado usuario exitosamente';\n    } catch (error) {\n      console.error('user.save: ', error);\n      throw new Meteor.Error('500', 'Ocurrió un error al crear un usuario');\n    }\n\n    return responseMessage;\n  }\n\n});\n//////////////////////////////////////////////////////////////////////////////////\n\n}}},\"startup\":{\"server\":{\"index.js\":function module(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// imports/startup/server/index.js                                              //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\nmodule.link(\"../../api/Users/UsersCtrl\");\n//////////////////////////////////////////////////////////////////////////////////\n\n}}}},\"server\":{\"main.js\":function module(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////\n//                                                                              //\n// server/main.js                                                               //\n//                                                                              //\n//////////////////////////////////////////////////////////////////////////////////\n                                                                                //\nmodule.link(\"/imports/startup/server\");\n//////////////////////////////////////////////////////////////////////////////////\n\n}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\",\n    \".mjs\",\n    \".ts\",\n    \".vue\"\n  ]\n});\n\nvar exports = require(\"/server/main.js\");","hash":"efbc9abfe19607bfdfa006be2bc1f978b59f70c5","servePath":"/app.js","sourceMap":{"version":3,"sources":["imports/api/Users/UsersCtrl.js","imports/startup/server/index.js","server/main.js"],"names":["ValidatedMethod","module","link","v","check","Match","name","validate","user","_id","OneOf","String","username","emails","address","verified","Boolean","profile","path","error","console","log","Meteor","Error","run","responseMessage","Accounts","createUser","email"],"mappings":";;;;;;;;AAAA,IAAIA,eAAJ;AAAoBC,MAAM,CAACC,IAAP,CAAY,6BAAZ,EAA0C;AAACF,iBAAe,CAACG,CAAD,EAAG;AAACH,mBAAe,GAACG,CAAhB;AAAkB;;AAAtC,CAA1C,EAAkF,CAAlF;AAAqF,IAAIC,KAAJ,EAAUC,KAAV;AAAgBJ,MAAM,CAACC,IAAP,CAAY,cAAZ,EAA2B;AAACE,OAAK,CAACD,CAAD,EAAG;AAACC,SAAK,GAACD,CAAN;AAAQ,GAAlB;;AAAmBE,OAAK,CAACF,CAAD,EAAG;AAACE,SAAK,GAACF,CAAN;AAAQ;;AAApC,CAA3B,EAAiE,CAAjE;AAGzH,IAAIH,eAAJ,CAAqB;AACjBM,MAAI,EAAE,WADW;;AAEjBC,UAAQ,CAACC,IAAD,EAAM;AACV,QAAI;AACAJ,WAAK,CAACI,IAAD,EAAO;AACRC,WAAG,EAAEJ,KAAK,CAACK,KAAN,CAAYC,MAAZ,EAAoB,IAApB,CADG;AAERC,gBAAQ,EAAED,MAFF;AAGRE,cAAM,EAAE,CAAC;AAACC,iBAAO,EAAEH,MAAV;AAAkBI,kBAAQ,EAAEC;AAA5B,SAAD,CAHA;AAIRC,eAAO,EAAE;AACLA,iBAAO,EAAEN,MADJ;AAELL,cAAI,EAAEK,MAFD;AAGLO,cAAI,EAAEb,KAAK,CAACK,KAAN,CAAYC,MAAZ,EAAoB,IAApB;AAHD;AAJD,OAAP,CAAL;AAUH,KAXD,CAWE,OAAOQ,KAAP,EAAc;AACZC,aAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,KAAzB;AACA,YAAM,IAAIG,MAAM,CAACC,KAAX,CAAiB,KAAjB,EAAwB,yCAAxB,CAAN;AACH;AACJ,GAlBgB;;AAmBjBC,KAAG,CAAChB,IAAD,EAAM;AACL,UAAMiB,eAAe,GAAG,EAAxB;;AACA,QAAI;AACAC,cAAQ,CAACC,UAAT,CAAoB;AAChBf,gBAAQ,EAAEJ,IAAI,CAACI,QADC;AAEhBgB,aAAK,EAAEpB,IAAI,CAACK,MAAL,CAAY,CAAZ,EAAeC,OAFN;AAGhBG,eAAO,EAAET,IAAI,CAACS;AAHE,OAApB;AAKAQ,qBAAe,GAAG,mCAAlB;AACH,KAPD,CAOE,OAAON,KAAP,EAAc;AACZC,aAAO,CAACD,KAAR,CAAc,aAAd,EAA6BA,KAA7B;AACA,YAAM,IAAIG,MAAM,CAACC,KAAX,CAAiB,KAAjB,EAAwB,sCAAxB,CAAN;AACH;;AACD,WAAOE,eAAP;AACH;;AAjCgB,CAArB,E;;;;;;;;;;;ACHAxB,MAAM,CAACC,IAAP,CAAY,2BAAZ,E;;;;;;;;;;;ACAAD,MAAM,CAACC,IAAP,CAAY,yBAAZ,E","file":"/app.js","sourcesContent":["import {ValidatedMethod} from 'meteor/mdg:validated-method';\r\nimport {check, Match} from 'meteor/check';\r\n\r\nnew ValidatedMethod ({\r\n    name: 'user.save',\r\n    validate(user){\r\n        try {\r\n            check(user, {\r\n                _id: Match.OneOf(String, null),\r\n                username: String,\r\n                emails: [{address: String, verified: Boolean}],\r\n                profile: {\r\n                    profile: String,\r\n                    name: String,\r\n                    path: Match.OneOf(String, null)\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log('save.user', error);\r\n            throw new Meteor.Error('403', 'La informacion introducida no es valida')\r\n        }\r\n    },\r\n    run(user){\r\n        const responseMessage = '';\r\n        try {\r\n            Accounts.createUser({\r\n                username: user.username,\r\n                email: user.emails[0].address,\r\n                profile: user.profile\r\n            });\r\n            responseMessage = 'Se ha creado usuario exitosamente';\r\n        } catch (error) {\r\n            console.error('user.save: ', error);\r\n            throw new Meteor.Error('500', 'Ocurrió un error al crear un usuario');\r\n        }\r\n        return responseMessage;\r\n    }\r\n});","import '../../api/Users/UsersCtrl';","import \"/imports/startup/server\";"]}}]