{"version":3,"sources":["meteor://ðŸ’»app/packages/socialize:user-model/common/common.js","meteor://ðŸ’»app/packages/socialize:user-model/common/user-model.js"],"names":["module","export","User","UsersCollection","Meteor","link","v","check","LinkableModel","LinkParent","construct","Package","_inheritsLoose","default","SimpleSchema","exportDefault","addFieldsToPublish","fieldsObj","Object","assign","fieldsToPublish","displayName","isSelf","username","user","userId","_id","attachCollection","users","UsersSchema","type","String","optional","emails","Array","regEx","RegEx","Email","Boolean","createdAt","Date","services","blackbox","heartbeat","attachSchema","registerParentModel","methods","setDefaultEmail","emailAddress","findOne","update","$set","Error","call","defaultEmail","obj","find","rec","address"],"mappings":"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","file":"/packages/socialize_user-model.js","sourcesContent":["/* global Package */\n/* eslint-disable import/no-unresolved */\nimport { Meteor } from 'meteor/meteor';\nimport { check } from 'meteor/check';\nimport { LinkableModel, LinkParent } from 'meteor/socialize:linkable-model';\n/* eslint-enable import/no-unresolved */\n\nimport construct from './user-model.js';\n\nconst { User, UsersCollection } = construct({ Meteor, Package, check, LinkableModel, LinkParent });\n\nexport { User, UsersCollection };\n","/* eslint-disable import/no-unresolved */\nimport SimpleSchema from 'simpl-schema';\n/* eslint-enable import/no-unresolved */\n\n\nexport default ({ Meteor, Package, check, LinkableModel, LinkParent }) => {\n    /**\n    * Represents a User\n    * @class User\n    * @param {Object} document An object representing a user ususally a Mongo document\n    */\n    class User extends LinkParent { //eslint-disable-line\n        static fieldsToPublish = { username: 1 };\n\n        static addFieldsToPublish(fieldsObj) {\n            Object.assign(this.fieldsToPublish, fieldsObj);\n        }\n\n        /**\n        * The personal name of the user account, You if the the user represents the\n        * currently logged in user, or this.username otherwise\n        * @returns {String} A name representation of the user account\n        */\n        displayName() {\n            return this.isSelf() ? 'You' : this.username;\n        }\n\n        /**\n        * Check if the this user is the current logged in user or the specified user\n        * @param   {Object}  user The user to check against\n        * @returns {Boolean} Whether or not this user is the same as the specified user\n        */\n        isSelf(user) {\n            const userId = (user && user._id) || Meteor.userId();\n\n            return this._id === userId;\n        }\n    }\n\n    User.attachCollection(Meteor.users);\n\n    const UsersSchema = new SimpleSchema({\n        username: {\n            type: String,\n            // For accounts-password, either emails or username is required, but not both. It is OK to make this\n            // optional here because the accounts-password package does its own validation.\n            // Third-party login packages may not require either. Adjust this schema as necessary for your usage.\n            optional: true,\n        },\n        emails: {\n            type: Array,\n            // For accounts-password, either emails or username is required, but not both. It is OK to make this\n            // optional here because the accounts-password package does its own validation.\n            // Third-party login packages may not require either. Adjust this schema as necessary for your usage.\n            optional: true,\n        },\n        'emails.$': {\n            type: Object,\n        },\n        'emails.$.address': {\n            type: String,\n            regEx: SimpleSchema.RegEx.Email,\n        },\n        'emails.$.verified': {\n            type: Boolean,\n        },\n        'emails.$.default': {\n            type: Boolean,\n            optional: true,\n        },\n        createdAt: {\n            type: Date,\n        },\n        // Make sure this services field is in your schema if you're using any of the accounts packages\n        services: {\n            type: Object,\n            optional: true,\n            blackbox: true,\n        },\n        heartbeat: {\n            type: Date,\n            optional: true,\n        },\n    });\n\n    User.attachSchema(UsersSchema);\n\n    LinkableModel.registerParentModel(User);\n\n\n    if (Package['accounts-password']) {\n        Meteor.methods && Meteor.methods({\n            /**\n            * Sets the default email for the currently logged in users\n            * @param {String} emailAddress The email address to set as the current\n            */\n            setDefaultEmail(emailAddress) {\n                check(emailAddress, String);\n                if (this.userId) {\n                    const user = Meteor.users.findOne({ _id: this.userId, 'emails.address': emailAddress });\n                    if (user) {\n                        Meteor.users.update({ _id: this.userId, 'emails.default': true }, { $set: { 'emails.$.default': false } });\n                        Meteor.users.update({ _id: this.userId, 'emails.address': emailAddress }, { $set: { 'emails.$.default': true } });\n                    }\n                } else {\n                    throw new Meteor.Error('NotAuthorized', 'You must be logged in to perform this operation.');\n                }\n            },\n        });\n\n        User.methods({\n            /**\n            * Set the default email address for the user\n            * @param {[type]} emailAddress [description]\n            */\n            setDefaultEmail(emailAddress) {\n                if (Meteor.user().isSelf()) {\n                    Meteor.call('setDefaultEmail', emailAddress);\n                }\n            },\n            /**\n            * Get the default email address for the user\n            * @returns {String} The users default email address\n            */\n            defaultEmail() {\n                const obj = this.emails.find(rec => rec.default === true);\n                return (obj && obj.address) || this.emails[0].address;\n            },\n        });\n    }\n\n    return { User, UsersCollection: Meteor.users };\n};\n"]}