{"version":3,"sources":["meteor://ðŸ’»app/packages/tmeasday:check-npm-versions/check-npm-versions.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAAO,OAAP,CAAe;AAAA,oBAAQ;AAAR,GAAf;AAAuC;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAavC;AACA;AACA;AACA;AACA,QAAM,4BAA4B,GAAG,CAAC,IAAD,EAAe,KAAf,KAA6D;AAChG,QAAI;AACF,YAAM,gBAAgB,GAAG,OAAO,WAAI,IAAJ,mBAAP,CAAgC,OAAzD;;AACA,UAAI,MAAM,CAAC,SAAP,CAAiB,gBAAjB,EAAmC,KAAnC,CAAJ,EAA+C;AAC7C,eAAO,IAAP;AACD,OAFD,MAEO;AACL,eAAO,gBAAP;AACD;AACF,KAPD,CAOE,OAAO,CAAP,EAAU;AACV;AACA,YAAM,OAAO,GAAG,CAAC,CAAC,QAAF,EAAhB,CAFU,CAGV;;AACA,UAAI,OAAO,CAAC,QAAR,CAAiB,oBAAjB,MAA2C,IAA3C,IAAmD,OAAO,CAAC,QAAR,CAAiB,uBAAjB,MAA8C,IAArG,EAA2G;AACzG,eAAO,KAAP;AACD,OAFD,MAEO;AACL,cAAM,CAAN;AACD;AACF;AACF,GAlBD;;AAoBO,QAAM,gBAAgB,GAAG,CAAC,QAAD,EAAqB,WAArB,KAAkD;AAChF,QAAI,MAAM,CAAC,aAAX,EAA0B;AACxB,YAAM,QAAQ,GAAsB,EAApC;AAEA,YAAM,CAAC,IAAP,CAAY,QAAZ,EAAsB,OAAtB,CAA+B,IAAD,IAAS;AACrC,cAAM,KAAK,GAAG,QAAQ,CAAC,IAAD,CAAtB;AACA,cAAM,OAAO,GAAG,4BAA4B,CAAC,IAAD,EAAO,KAAP,CAA5C;;AAEA,YAAI,OAAO,KAAK,IAAhB,EAAsB;AACpB,kBAAQ,CAAC,IAAD,CAAR,GAAiB,OAAjB;AACD;AACF,OAPD;;AASA,UAAI,MAAM,CAAC,IAAP,CAAY,QAAZ,EAAsB,MAAtB,KAAiC,CAArC,EAAwC;AACtC;AACD;;AAED,YAAM,MAAM,GAAa,EAAzB;AAEA,YAAM,CAAC,IAAP,CAAY,QAAZ,EAAsB,OAAtB,CAA+B,IAAD,IAAS;AACrC,cAAM,SAAS,GAAG,QAAQ,CAAC,IAAD,CAA1B;AACA,cAAM,WAAW,aAAM,IAAN,cAAc,QAAQ,CAAC,IAAD,CAAtB,CAAjB;;AAEA,YAAI,SAAJ,EAAe;AACb,gBAAM,CAAC,IAAP,cAAkB,IAAlB,cAA0B,SAA1B,yBAAkD,WAAlD;AACD,SAFD,MAEO;AACL,gBAAM,CAAC,IAAP,cAAkB,IAAlB,cAA0B,QAAQ,CAAC,IAAD,CAAlC;AACD;AACF,OATD;AAWA,YAAM,SAAS,GAAG,WAAW,kBAAW,WAAX,UAA6B,EAA1D;AACA,aAAO,CAAC,IAAR,0CAA+C,SAA/C,+BACA,MAAM,CAAC,IAAP,CAAY,IAAZ,CADA;AAMD;AACF,GAtCM","file":"/packages/tmeasday_check-npm-versions.js","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport semver from 'semver';\n\ntype boolOrString = boolean | string;\n\ninterface indexBoolorString {\n  [key: string]: boolOrString\n}\n\ninterface indexAny {\n  [key: string]: any\n}\n\n// Returns:\n//   - true      if a version of the package in the range is installed\n//   - false     if no version is installed\n//   - version#  if incompatible version is installed\nconst compatibleVersionIsInstalled = (name: string, range: string | semver.Range): boolOrString => {\n  try {\n    const installedVersion = require(`${name}/package.json`).version;\n    if (semver.satisfies(installedVersion, range)) {\n      return true;\n    } else {\n      return installedVersion;\n    }\n  } catch (e) {\n    // XXX add something to the tool to make this more reliable\n    const message = e.toString();\n    // One message comes out of the install npm package the other from npm directly\n    if (message.includes('Cannot find module') === true || message.includes(\"Can't find npm module\") === true) {\n      return false;\n    } else {\n      throw e;\n    }\n  }\n};\n\nexport const checkNpmVersions = (packages: indexAny, packageName: string): void => {\n  if (Meteor.isDevelopment) {\n    const failures: indexBoolorString = {};\n\n    Object.keys(packages).forEach((name) => {\n      const range = packages[name];\n      const failure = compatibleVersionIsInstalled(name, range);\n\n      if (failure !== true) {\n        failures[name] = failure;\n      }\n    });\n\n    if (Object.keys(failures).length === 0) {\n      return;\n    }\n\n    const errors: string[] = [];\n\n    Object.keys(failures).forEach((name) => {\n      const installed = failures[name];\n      const requirement = `${name}@${packages[name]}`;\n\n      if (installed) {\n        errors.push(` - ${name}@${installed} installed, ${requirement} needed`);\n      } else {\n        errors.push(` - ${name}@${packages[name]} not installed.`);\n      }\n    });\n\n    const qualifier = packageName ? `(for ${packageName}) ` : '';\n    console.warn(`WARNING: npm peer requirements ${qualifier}not installed:\n  ${errors.join('\\n')}\n\n  Read more about installing npm peer dependencies:\n    http://guide.meteor.com/using-packages.html#peer-npm-dependencies\n  `);\n  }\n};\n"]}